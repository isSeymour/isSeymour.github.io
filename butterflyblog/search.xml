<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JWT身份认证原理</title>
    <url>/butterflyblog/2023/07/26/JWT%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="JWT身份认证原理"><a href="#JWT身份认证原理" class="headerlink" title="JWT身份认证原理"></a>JWT身份认证原理</h1><blockquote>
<h4 id="官网：Json-Web-Token"><a href="#官网：Json-Web-Token" class="headerlink" title="官网：Json Web Token"></a>官网：<a href="https://jwt.io/">Json Web Token</a></h4><p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/jwt1.png" alt="JWT官方"> </p>
</blockquote>
<h3 id="0x01-认证原理"><a href="#0x01-认证原理" class="headerlink" title="0x01 认证原理"></a>0x01 认证原理</h3><p>JWT，Json Web Token。用户登陆成功后，服务端返回一个 jwt 的 token，服务端不储存，客户端储存。此后客户端每次请求，都带上 token。服务端会 jwt校验 token 的有效性。优点显而易见，是不需要在服务端储存 token，服务端只需要做校验有效性的工作即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/jwt2.png" alt="JWT官方解释"></p>
<p><strong>JWT 格式：</strong></p>
<p>点分三段的字符串：</p>
<p><strong>第一段：HEADER</strong></p>
<p>base64url 加密的密文，可解密。</p>
<p>jwt 头部，包含说明第三段不可解密的编码算法名 HS256、字段数据类型标识 JWT。</p>
<p><strong>第二段：PAYLOAD</strong></p>
<p>base64url 加密的密文，可解密。</p>
<p>jwt 数据，包含自定义的数据。</p>
<p><strong>第三段：VERIFY SIGNATURE</strong></p>
<p>HS256 加密的密文，无法解密</p>
<p>校验签名，第一段密文.第二段密文“盐”进行 HS256 加密，生成密文，再做base64url 加密。</p>
<h3 id="0x02-代码实例"><a href="#0x02-代码实例" class="headerlink" title="0x02 代码实例"></a>0x02 代码实例</h3><p>为了实现用户登录之后的身份认证和授权管理，采用 JWT 认证。</p>
<p><code>pip install pyjwt</code></p>
<h4 id="颁发-token"><a href="#颁发-token" class="headerlink" title="颁发 token"></a>颁发 token</h4><p><code>release.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_token</span>(<span class="params">payload,timeout=<span class="number">30</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    创建token的部分</span></span><br><span class="line"><span class="string">    payload 外部传入payload，即用户信息在外部写，传入这里输出token即可</span></span><br><span class="line"><span class="string">    timeout 超时时间，默认30s</span></span><br><span class="line"><span class="string">    返回值：token</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 构造header</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;alg&quot;</span>:<span class="string">&quot;HS256&quot;</span>,</span><br><span class="line">        <span class="string">&quot;typ&quot;</span>:<span class="string">&quot;jwt&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#构造payload</span></span><br><span class="line">    payload[<span class="string">&#x27;exp&#x27;</span>] = datetime.datetime.utcnow() + datetime.timedelta(seconds=timeout)</span><br><span class="line">    token = jwt.encode(payload=payload,key=settings.SECRET_KEY,algorithm=<span class="string">&quot;HS256&quot;</span>,headers=headers)</span><br><span class="line">    <span class="keyword">return</span> token</span><br></pre></td></tr></table></figure>

<h4 id="认证-token"><a href="#认证-token" class="headerlink" title="认证 token"></a>认证 token</h4><p><code>auth.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> BaseAuthentication</span><br><span class="line"><span class="keyword">from</span> rest_framework.exceptions <span class="keyword">import</span> AuthenticationFailed</span><br><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">from</span> jwt <span class="keyword">import</span> exceptions</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JwtAuthentication</span>(<span class="title class_ inherited__">BaseAuthentication</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">authenticate</span>(<span class="params">self, request</span>):</span><br><span class="line">        token = request.META.get(<span class="string">&quot;HTTP_AAMS_TOKEN&quot;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            payload = jwt.decode(token, settings.SECRET_KEY, algorithms=<span class="string">&quot;HS256&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> exceptions.ExpiredSignatureError:</span><br><span class="line">            <span class="keyword">raise</span> AuthenticationFailed(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">400</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;token已失效&quot;</span>&#125;)</span><br><span class="line">        <span class="keyword">except</span> jwt.DecodeError:</span><br><span class="line">            <span class="keyword">raise</span> AuthenticationFailed(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">400</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;token认证失败&quot;</span>&#125;)</span><br><span class="line">        <span class="keyword">except</span> jwt.InvalidTokenError:</span><br><span class="line">            <span class="keyword">raise</span> AuthenticationFailed(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">400</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;token无效&quot;</span>&#125;)</span><br><span class="line">        <span class="comment"># 这个return是会放行的，并不是直接返回。</span></span><br><span class="line">        <span class="comment"># 这里的意思是会把payload和token挂载在request上</span></span><br><span class="line">        <span class="comment"># payload:储存了username(用户账号)和exp(过期时间)，挂载在request.user</span></span><br><span class="line">        <span class="comment"># token:储存了token信息，挂载在request.auth上</span></span><br><span class="line">        <span class="keyword">return</span> (payload, token)</span><br></pre></td></tr></table></figure>

<h4 id="配置在全局"><a href="#配置在全局" class="headerlink" title="配置在全局"></a>配置在全局</h4><p>若是要哪个请求需要认证才能进行后续业务，那么：</p>
<p><code>views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> myserver.mytoken.auth <span class="keyword">import</span> JwtAuthentication</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">aView</span>(...):</span><br><span class="line">	authentication_class = [JwtAuthentication,]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line">        ..</span><br></pre></td></tr></table></figure>

<p>因为基本上所有的请求，都是要认证再进行业务的。所以可以配置在</p>
<p><code>settings.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SECRET_KEY = <span class="string">&quot;xxxxxxxxxxxx自己设置即可xxxxxxxxxxxxx&quot;</span>	<span class="comment"># 前面设置的密钥（盐）</span></span><br><span class="line"></span><br><span class="line">REST_FRAMEWORK = [</span><br><span class="line">    <span class="string">&quot;DEFAULT_AUTHENTICATION_CLASS&quot;</span>:[</span><br><span class="line">        <span class="string">&quot;myserver.mytoken.JwtAuthentication&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>注意，要在登陆视图函数取消认证配置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LoginView</span>(...):</span><br><span class="line">    authentication_class = [] <span class="comment">#这里设置的优先级会高于全局设置，所以最终Login会取消认证的操作，直接放行</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">...</span>):</span><br></pre></td></tr></table></figure>

<h4 id="login视图函数"><a href="#login视图函数" class="headerlink" title="login视图函数"></a>login视图函数</h4><p><code>views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> ensure_csrf_cookie</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> .mytoken.release <span class="keyword">import</span> create_token</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Major,User</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> CourseSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Login</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    authentication_classes = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&quot;code&quot;</span>:<span class="number">400</span>, <span class="string">&quot;msg&quot;</span>:<span class="string">&quot;后端没有login的get&quot;</span>&#125;,status=status.HTTP_200_OK)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self,request</span>):</span><br><span class="line">        username = request.POST.get(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">&quot;password&quot;</span>)</span><br><span class="line"></span><br><span class="line">        exists = User.objects.<span class="built_in">filter</span>(username=username,password=password).exists()</span><br><span class="line">        <span class="keyword">if</span> exists:</span><br><span class="line">            token = create_token(&#123;<span class="string">&quot;username&quot;</span>:username&#125;)</span><br><span class="line">            res = &#123;</span><br><span class="line">                <span class="string">&quot;code&quot;</span>:<span class="number">200</span>,</span><br><span class="line">                <span class="string">&quot;msg&quot;</span>:<span class="string">&quot;登陆成功！&quot;</span>,</span><br><span class="line">                <span class="string">&quot;data&quot;</span>:&#123;</span><br><span class="line">                    <span class="string">&quot;aams-token&quot;</span>:token,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Response(res,status=status.HTTP_200_OK)</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&quot;code&quot;</span>:<span class="number">400</span>, <span class="string">&quot;msg&quot;</span>:<span class="string">&quot;登陆失败！&quot;</span>&#125;,status=status.HTTP_400_BAD_REQUEST)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>若想一天不失效，可以：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">token = create_token(&#123;<span class="string">&quot;username&quot;</span>:username&#125;,timeout=<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>)    <span class="comment">#一天不失效</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="0x03-认证测试"><a href="#0x03-认证测试" class="headerlink" title="0x03 认证测试"></a>0x03 认证测试</h3><p>正如前面所说，我们采用JWT认证，那么测试登录和认证十分重要。</p>
<p>在第一次登录成功之后，应该由后端颁发一个token（我的系统命名为aams-token）。此后，每次网络请求必须带上这个aams-token作为请求头，后端会在请求头里取到aams-token，由中间件进行认证拦截，认证成功则会放行，否则请求失败。</p>
<h4 id="登录测试"><a href="#登录测试" class="headerlink" title="登录测试"></a>登录测试</h4><p>首先看一下能否在登录成功后得到一个正确的token：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/jwt3.png" alt="登陆测试"></p>
<h4 id="认证测试"><a href="#认证测试" class="headerlink" title="认证测试"></a>认证测试</h4><p>除登录API，随便选择一个API，发起请求，分别看在没有token和带有token的情况下，会收到什么响应：</p>
<p>注：以下所有API的response都是自行设计的code和msg。</p>
<p>为了方便测试，我只采用了少量的code（同时也尽量贴合状态码的原意）和msg。</p>
<blockquote>
<p>code 状态码：200 处理成功；400 处理失败；301 重定向；202 接收处理但等待创建。</p>
<p>msg 状态信息：解释每种情况下的具体信息。</p>
</blockquote>
<h5 id="情况1：不带token"><a href="#情况1：不带token" class="headerlink" title="情况1：不带token"></a>情况1：不带token</h5><p>如下图，可见code状态码为400，msg状态信息为token认证失败。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/jwt4.png" alt="情况1：不带token"></p>
<h5 id="情况2：带失效的token"><a href="#情况2：带失效的token" class="headerlink" title="情况2：带失效的token"></a>情况2：带失效的token</h5><p>如下图，可见code状态码为400，msg状态信息为token已失效。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/jwt5.png" alt="情况2：带失效的token"></p>
<h5 id="情况3：带有效的token"><a href="#情况3：带有效的token" class="headerlink" title="情况3：带有效的token"></a>情况3：带有效的token</h5><p>如下图，可见code状态码为200，msg状态信息为获取成功。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/jwt6.png" alt="情况3：带有效的token"></p>
]]></content>
      <categories>
        <category>Web技术</category>
      </categories>
      <tags>
        <tag>身份认证</tag>
      </tags>
  </entry>
  <entry>
    <title>C++标准模板库（STL）</title>
    <url>/butterflyblog/2023/10/22/C++%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93%EF%BC%88STL%EF%BC%89/</url>
    <content><![CDATA[<h1 id="C-标准模板库（STL）"><a href="#C-标准模板库（STL）" class="headerlink" title="C++标准模板库（STL）"></a>C++标准模板库（STL）</h1><blockquote>
<p>参考来源：<a href="https://zhuanlan.zhihu.com/p/344558356">知乎：【C++】标准模板库（STL）：超快入门！算法竞赛必看！</a></p>
<p>参考来源：<a href="https://wyqz.top/p/870124582.html#toc-heading-2">C++ STL 总结-基于算法竞赛（悠享版）</a></p>
<p>2023.10.22@isSeymour</p>
</blockquote>
<h2 id="零、废话说在前头"><a href="#零、废话说在前头" class="headerlink" title="零、废话说在前头"></a>零、废话说在前头</h2><h3 id="0-1-什么是C-标准模板库（STL）？"><a href="#0-1-什么是C-标准模板库（STL）？" class="headerlink" title="0.1 什么是C++标准模板库（STL）？"></a>0.1 什么是C++标准模板库（STL）？</h3><ul>
<li><p><strong>标准模板库 STL</strong>（Standard Template Library），是 C++ 标准库的一部分，不需要单独安装，只需要<code>#include </code>头文件。</p>
</li>
<li><p>C++ 对模板（Template）支持得很好，STL 就是借助模板把常用的数据结构及其算法都实现了一遍，并且做到了<strong>数据结构和算法的分离</strong>。</p>
</li>
<li><p>C++ 语言的核心优势之一就是便于软件的复用。</p>
<p>C++ 语言有两个方面体现了复用：</p>
<ul>
<li>面向对象的继承和多态机制</li>
<li>通过模板的概念实现了对泛型程序设计的支持</li>
</ul>
</li>
<li><p>C++中的模板，就好比英语作文的模板，<strong>只换主题，不换句式和结构</strong>。对应到C++模板，就是<strong>只换类型，不换方法</strong>。</p>
</li>
</ul>
<h3 id="0-2-STL有什么优势？"><a href="#0-2-STL有什么优势？" class="headerlink" title="0.2 STL有什么优势？"></a>0.2 STL有什么优势？</h3><ul>
<li><p>STL封装了很多实用的容器，省时省力，能够让你将更多心思放到解决问题的步骤上，而非费力去实现数据结构诸多细节上，<strong>像极了用python时候的酣畅淋漓</strong>。</p>
<p>P.S. 如果你对STL源码颇有兴趣，那你不妨拜读C++大师侯捷的杰作《<strong>STL源码剖析</strong>》。</p>
</li>
</ul>
<h3 id="0-3-STL六大部件"><a href="#0-3-STL六大部件" class="headerlink" title="0.3 STL六大部件"></a>0.3 STL六大部件</h3><ul>
<li>容器（Containers）</li>
<li>分配器（Allocators）</li>
<li>算法（Algorithm）</li>
<li>迭代器（Iterators）</li>
<li>适配器（Adapters）</li>
<li>仿函数（Functors）</li>
</ul>
<p>要真正提高C++编程效率，需要将STL六大部件结合使用，才能大放异彩。所谓部件，也即是零件，需要将这六大零件组装在一起，配合使用，整整齐齐。</p>
<blockquote>
<p>STL的基本使用：</p>
<ul>
<li><code>vector</code></li>
<li><code>set</code></li>
<li><code>string</code></li>
<li><code>map</code></li>
<li><code>queue</code></li>
<li><code>priority_queue</code></li>
<li><code>stack</code></li>
<li><code>pair</code></li>
<li><code>algorithm</code></li>
</ul>
</blockquote>
<h1 id="第一部分-数据结构"><a href="#第一部分-数据结构" class="headerlink" title="第一部分 数据结构"></a>第一部分 数据结构</h1><h2 id="一、vector"><a href="#一、vector" class="headerlink" title="一、vector"></a>一、<code>vector</code></h2><blockquote>
<p>vector（矢量），是一种「<strong>变长数组</strong>」，即“自动改变数组长度的数组”。</p>
<p>注意：<strong>在局部区域中（比如局部函数里面）开vector数组，是在堆空间里面开的。</strong></p>
<p>在局部区域开数组是在栈空间开的，而栈空间比较小，如果开了非常长的数组就会发生爆栈。</p>
<p>故局部区域<strong>不可以</strong>开大长度数组，但是可以开大长度<code>vector</code>。</p>
</blockquote>
<h3 id="1-1-初始化"><a href="#1-1-初始化" class="headerlink" title="1.1 初始化"></a>1.1 初始化</h3><p>要使用vector，需要添加头文件：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br></pre></td></tr></table></figure>

<h4 id="（1）一维初始化"><a href="#（1）一维初始化" class="headerlink" title="（1）一维初始化"></a>（1）一维初始化</h4><p>像定义变量一样定义vector变量。类型名可以是int、double、char、struct，也可以是STL容器：vector、set、queue。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;类型名&gt; 变量名;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用例</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; a;		<span class="comment">//定义了一个名为a的一维数组,数组存储int类型数据</span></span><br><span class="line">vector&lt;<span class="type">double</span>&gt; b;	<span class="comment">//定义了一个名为b的一维数组，数组存储double类型数据</span></span><br><span class="line">vector&lt;node&gt; c;		<span class="comment">//定义了一个名为c的一维数组，数组存储结构体类型数据，node是结构体类型</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; name;	<span class="comment">//注意：&gt; &gt;之间要加空格</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定长度和初始值的初始化</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(n)</span></span>;	<span class="comment">//定义一个长度为n的数组，初始值默认为0，下标范围[0, n - 1]</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(n, <span class="number">1</span>)</span></span>;<span class="comment">//v[0]到v[n-1]所有的元素初始值均为1</span></span><br><span class="line"><span class="comment">//注意：指定数组长度之后（指定长度后的数组就相当于正常的数组了）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化中有多个元素</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; a&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;<span class="comment">//数组a中有五个元素，数组长度就为5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 拷贝初始化</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">b</span><span class="params">(a)</span></span>;		<span class="comment">//两个数组中的类型必须相同,a和b都是长度为n+1，初始值都为0的数组</span></span><br></pre></td></tr></table></figure>

<h4 id="（2）二维初始化"><a href="#（2）二维初始化" class="headerlink" title="（2）二维初始化"></a>（2）二维初始化</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义第一维固定长度为5，第二维可变化的二维数组。</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v[<span class="number">5</span>];</span><br><span class="line"><span class="comment">//注意：行不可变（只有5行）, 而列可变,可以在指定行添加元素</span></span><br><span class="line"><span class="comment">//第一维固定长度为5，第二维长度可以改变</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 理解：</span></span><br><span class="line"><span class="comment">// 长度为5的v数组，数组中存储的是vector&lt;int&gt;数据类型，而该类型就是数组形式，故v为二维数组。</span></span><br><span class="line"><span class="comment">// 其中每个数组元素均为空，因为没有指定长度，所以第二维可变长。可以进行下述操作：</span></span><br><span class="line">v[<span class="number">1</span>].<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">v[<span class="number">2</span>].<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 行列均可变</span></span><br><span class="line"><span class="comment">// 初始化二维均可变长数组</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; v;<span class="comment">//定义一个行和列均可变的二维数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以在v数组里面装多个数组</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; t1&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; t2&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">v.<span class="built_in">push_back</span>(t1);</span><br><span class="line">v.<span class="built_in">push_back</span>(t2);</span><br><span class="line">v.<span class="built_in">push_back</span>(&#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;) <span class="comment">// &#123;3, 4, 5, 6&#125;可以作为vector的初始化,相当于一个无名vector</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 行列长度均固定 n + 1行 m + 1列初始值为0</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; <span class="built_in">a</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m + <span class="number">1</span>, <span class="number">0</span>));</span><br></pre></td></tr></table></figure>

<h3 id="1-2-方法函数"><a href="#1-2-方法函数" class="headerlink" title="1.2 方法函数"></a>1.2 方法函数</h3><h4 id="（1）函数清单"><a href="#（1）函数清单" class="headerlink" title="（1）函数清单"></a>（1）函数清单</h4><p><strong>c指定为数组名称</strong>，含义中会注明算法复杂度。</p>
<table>
<thead>
<tr>
<th>方法函数</th>
<th>含义</th>
<th>时间复杂度</th>
</tr>
</thead>
<tbody><tr>
<td><code>c.front()</code></td>
<td>返回第一个数据</td>
<td>O(1)</td>
</tr>
<tr>
<td><code>c.back()</code></td>
<td>返回数组中的最后一个数据</td>
<td>O(1)</td>
</tr>
<tr>
<td><code>c.pop_back()</code></td>
<td>删除最后一个数据</td>
<td>O(1)</td>
</tr>
<tr>
<td><code>c.push_back(element)</code></td>
<td>在尾部加一个数据</td>
<td>O(1)</td>
</tr>
<tr>
<td><code>c.size()</code></td>
<td>返回实际数据个数（unsigned类型）</td>
<td>O(1)</td>
</tr>
<tr>
<td><code>c.clear()</code></td>
<td>清空</td>
<td>O(N)，N为元素个数</td>
</tr>
<tr>
<td><code>c.resize(n, v)</code></td>
<td>改变数组大小为<code>n</code>,<code>n</code>个空间数值赋为<code>v</code>，如果没有默认赋值为<code>0</code></td>
<td></td>
</tr>
<tr>
<td><code>c.insert(it, x)</code></td>
<td>向任意迭代器<code>it</code>插入一个元素<code>x</code></td>
<td>O(N)</td>
</tr>
<tr>
<td><code>c.erase(__position)</code></td>
<td>删除一个元素</td>
<td></td>
</tr>
<tr>
<td><code>c.erase(first,last)</code></td>
<td>删除<code>[first,last)</code>的所有元素</td>
<td>O(N)</td>
</tr>
<tr>
<td><code>c.begin()</code></td>
<td>返回首元素的迭代器（通俗来说就是地址）</td>
<td>O(1)</td>
</tr>
<tr>
<td><code>c.end()</code></td>
<td>返回最后一个元素后一个位置的迭代器（地址）</td>
<td>O(1)</td>
</tr>
<tr>
<td><code>c.empty()</code></td>
<td>判断是否为空，为空返回真，反之返回假</td>
<td>O(1)</td>
</tr>
</tbody></table>
<blockquote>
<p>注意： </p>
<ul>
<li><p><code>end()</code>返回的是最后一个元素的后一个位置的地址，不是最后一个元素的地址，<strong>所有STL容器均是如此</strong></p>
</li>
<li><p>删除一个的使用示例</p>
<ul>
<li><code>v.erase(v.begin()+3);</code>删除v[3]</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="（2）排序"><a href="#（2）排序" class="headerlink" title="（2）排序"></a>（2）排序</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sort</span>(c.<span class="built_in">begin</span>(), c.<span class="built_in">end</span>());</span><br><span class="line"><span class="comment">// 对所有元素进行排序，如果要对指定区间进行排序，可以对sort()里面的参数进行加减改动。</span></span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="built_in">sort</span>(a.<span class="built_in">begin</span>() + <span class="number">1</span>, a.<span class="built_in">end</span>()); <span class="comment">// 对[1, n]区间进行从小到大排序</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-访问"><a href="#1-3-访问" class="headerlink" title="1.3 访问"></a>1.3 访问</h3><h4 id="（1）下标"><a href="#（1）下标" class="headerlink" title="（1）下标"></a>（1）下标</h4><p>一维数组的下标是<code>从0到v.size()−1</code>，访问之外的数会出现越界错误</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    vi.<span class="built_in">push_back</span>(i);</span><br><span class="line"></span><br><span class="line"><span class="comment">//下标访问 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    cout &lt;&lt; vi[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="（2）迭代器"><a href="#（2）迭代器" class="headerlink" title="（2）迭代器"></a>（2）迭代器</h4><p>类似指针一样的访问 ，首先需要声明迭代器变量，和声明指针变量一样</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//迭代器访问</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it;   </span><br><span class="line"><span class="comment">//相当于声明了一个迭代器类型的变量it</span></span><br><span class="line"><span class="comment">//通俗来说就是声明了一个指针变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式一：</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it = vi.<span class="built_in">begin</span>(); </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    cout &lt;&lt; *(it + i) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二：</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line"><span class="keyword">for</span>(it = vi.<span class="built_in">begin</span>(); it != vi.<span class="built_in">end</span>();it ++)</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="comment">//vi.end()指向尾元素地址的下一个地址</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<ul>
<li><code>vi[i]</code> 和 <code>*(vi.begin() + i)</code> 等价</li>
<li><code>vector</code>和<code>string</code>的<code>STL</code>容器支持<code>*(it + i)</code>的元素访问，其它容器可能也可以支持这种方式访问，但用的不多，可自行尝试</li>
</ul>
</blockquote>
<h3 id="1-4-常见用途"><a href="#1-4-常见用途" class="headerlink" title="1.4 常见用途"></a>1.4 常见用途</h3><p><strong>（1）储存数据</strong></p>
<p>vector本身可以作为数组使用，而且在一些元素个数不确定的场合可以很好地节省空间。</p>
<p><strong>（2）用邻接表存储图</strong></p>
<p>使用vector实现邻接表，更为简单。</p>
<h2 id="二、stack"><a href="#二、stack" class="headerlink" title="二、stack"></a>二、<code>stack</code></h2><p>栈为数据结构的一种，是STL中实现的一个先进后出，后进先出的容器。</p>
<h3 id="2-1-初始化"><a href="#2-1-初始化" class="headerlink" title="2.1 初始化"></a>2.1 初始化</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//头文件需要添加</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明</span></span><br><span class="line">stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">stack&lt;string&gt; s;</span><br><span class="line">stack&lt;node&gt; s;<span class="comment">//node是结构体类型</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-方法函数"><a href="#2-2-方法函数" class="headerlink" title="2.2 方法函数"></a>2.2 方法函数</h3><h4 id="（1）函数清单-1"><a href="#（1）函数清单-1" class="headerlink" title="（1）函数清单"></a>（1）函数清单</h4><table>
<thead>
<tr>
<th>方法函数</th>
<th>含义</th>
<th>时间复杂度</th>
</tr>
</thead>
<tbody><tr>
<td><code>s.push(ele)</code></td>
<td>元素<code>ele</code>入栈</td>
<td>O(1)</td>
</tr>
<tr>
<td><code>s.pop()</code></td>
<td>移除栈顶元素</td>
<td>O(1)</td>
</tr>
<tr>
<td><code>s.top()</code></td>
<td>取得栈顶元素（但不删除）</td>
<td>O(1)</td>
</tr>
<tr>
<td><code>s.empty()</code></td>
<td>检测栈内是否为空，空为真</td>
<td>O(1)</td>
</tr>
<tr>
<td><code>s.size()</code></td>
<td>返回栈内元素的个数</td>
<td>O(1)</td>
</tr>
</tbody></table>
<h3 id="2-3-栈遍历"><a href="#2-3-栈遍历" class="headerlink" title="2.3 栈遍历"></a>2.3 栈遍历</h3><h4 id="栈遍历"><a href="#栈遍历" class="headerlink" title="栈遍历"></a>栈遍历</h4><ul>
<li>栈只能对栈顶元素进行操作，如果想要进行遍历，只能将栈中元素一个个取出来存在数组中</li>
</ul>
<h4 id="数组模拟栈进行遍历"><a href="#数组模拟栈进行遍历" class="headerlink" title="数组模拟栈进行遍历"></a>数组模拟栈进行遍历</h4><ul>
<li>通过一个<strong>数组</strong>对栈进行模拟，一个存放下标的变量<code>top</code>模拟指向栈顶的指针。</li>
<li><strong>特点：</strong> 比<code>STL</code>的<code>stack</code>速度更快，遍历元素方便</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> s[<span class="number">100</span>]; <span class="comment">// 栈 从左至右为栈底到栈顶</span></span><br><span class="line"><span class="type">int</span> tt = <span class="number">-1</span>; <span class="comment">// tt 代表栈顶指针,初始栈内无元素，tt为-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="comment">//入栈 </span></span><br><span class="line">    s[++tt] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 出栈</span></span><br><span class="line"><span class="type">int</span> top_element = s[tt--]; </span><br><span class="line"></span><br><span class="line"><span class="comment">//入栈操作示意</span></span><br><span class="line"><span class="comment">//  0  1  2  3  4  5  </span></span><br><span class="line"><span class="comment">//                tt</span></span><br><span class="line"><span class="comment">//出栈后示意</span></span><br><span class="line"><span class="comment">//  0  1  2  3  4 </span></span><br><span class="line"><span class="comment">//              tt</span></span><br></pre></td></tr></table></figure>





<h2 id="三、queue"><a href="#三、queue" class="headerlink" title="三、queue"></a>三、<code>queue</code></h2><p>队列是一种先进先出的数据结构。</p>
<h3 id="3-1-初始化"><a href="#3-1-初始化" class="headerlink" title="3.1 初始化"></a>3.1 初始化</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="comment">//定义初始化</span></span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-方法函数"><a href="#3-2-方法函数" class="headerlink" title="3.2 方法函数"></a>3.2 方法函数</h3><table>
<thead>
<tr>
<th>方法函数</th>
<th>含义</th>
<th>时间复杂度</th>
</tr>
</thead>
<tbody><tr>
<td><code>q.front()</code></td>
<td>返回队首元素</td>
<td>O(1)</td>
</tr>
<tr>
<td><code>q.back()</code></td>
<td>返回队尾元素</td>
<td>O(1)</td>
</tr>
<tr>
<td><code>q.push(element)</code></td>
<td>尾部添加一个元素<code>element</code> 进队</td>
<td>O(1)</td>
</tr>
<tr>
<td><code>q.pop()</code></td>
<td>删除第一个元素 出队</td>
<td>O(1)</td>
</tr>
<tr>
<td><code>q.size()</code></td>
<td>返回队列中元素个数，返回值类型<code>unsigned int</code></td>
<td>O(1)</td>
</tr>
<tr>
<td><code>q.empty()</code></td>
<td>判断是否为空，队列为空，返回<code>true</code></td>
<td>O(1)</td>
</tr>
</tbody></table>
<h3 id="3-3-队列模拟"><a href="#3-3-队列模拟" class="headerlink" title="3.3 队列模拟"></a>3.3 队列模拟</h3><p>使用<code>q[]</code>数组模拟队列<br><code>hh</code>表示队首元素的下标，初始值为<code>0</code><br><code>tt</code>表示队尾元素的下标，初始值为<code>-1</code>，表示刚<strong>开始队列为空</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>,tt = <span class="number">-1</span>;</span><br><span class="line">	<span class="comment">// 入队 </span></span><br><span class="line">    q[++tt] = <span class="number">1</span>;</span><br><span class="line">    q[++tt] = <span class="number">2</span>; </span><br><span class="line">    <span class="comment">// 将所有元素出队 </span></span><br><span class="line">    <span class="keyword">while</span>(hh &lt;= tt) &#123;</span><br><span class="line">        <span class="type">int</span> t = q[hh++];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure>



<h2 id="四、deque"><a href="#四、deque" class="headerlink" title="四、deque"></a>四、<code>deque</code></h2><p>首尾都可插入和删除的队列为双端队列。</p>
<h3 id="4-1-初始化"><a href="#4-1-初始化" class="headerlink" title="4.1 初始化"></a>4.1 初始化</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="comment">//初始化定义</span></span><br><span class="line">deque&lt;<span class="type">int</span>&gt; dq;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-方法函数"><a href="#4-2-方法函数" class="headerlink" title="4.2 方法函数"></a>4.2 方法函数</h3><table>
<thead>
<tr>
<th>方法函数</th>
<th>含义</th>
<th>时间复杂度</th>
</tr>
</thead>
<tbody><tr>
<td><code>push_back(x)/push_front(x)</code></td>
<td>把<code>x</code>插入队尾后 &#x2F; 队首</td>
<td>O(1)</td>
</tr>
<tr>
<td><code>back()/front()</code></td>
<td>返回队尾 &#x2F; 队首元素</td>
<td>O(1)</td>
</tr>
<tr>
<td><code>pop_back() / pop_front()</code></td>
<td>删除队尾 &#x2F; 队首元素</td>
<td>O(1)</td>
</tr>
<tr>
<td><code>erase(iterator it)</code></td>
<td>删除双端队列中的某一个元素</td>
<td></td>
</tr>
<tr>
<td><code>erase(iterator first,iterator last)</code></td>
<td>删除双端队列中<code>[first,last)</code>中的元素</td>
<td></td>
</tr>
<tr>
<td><code>empty()</code></td>
<td>判断deque是否空</td>
<td>O(1)</td>
</tr>
<tr>
<td><code>size()</code></td>
<td>返回deque的元素数量</td>
<td>O(1)</td>
</tr>
<tr>
<td><code>clear()</code></td>
<td>清空deque</td>
<td>O(1)</td>
</tr>
</tbody></table>
<h3 id="4-3-排序"><a href="#4-3-排序" class="headerlink" title="4.3 排序"></a>4.3 排序</h3><p>deque可以进行排序</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从小到大</span></span><br><span class="line"><span class="built_in">sort</span>(q.<span class="built_in">begin</span>(), q.<span class="built_in">end</span>())</span><br><span class="line"><span class="comment">//从大到小排序</span></span><br><span class="line"><span class="built_in">sort</span>(q.<span class="built_in">begin</span>(), q.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());<span class="comment">//deque里面的类型需要是int型</span></span><br><span class="line"><span class="built_in">sort</span>(q.<span class="built_in">begin</span>(), q.<span class="built_in">end</span>(), <span class="built_in">greater</span>());<span class="comment">//高版本C++才可以用</span></span><br></pre></td></tr></table></figure>





<h2 id="五、priority-queue"><a href="#五、priority-queue" class="headerlink" title="五、priority_queue"></a>五、<code>priority_queue</code></h2><p>优先队列是在正常队列的基础上加了优先级，保证每次的队首元素都是优先级最大的。</p>
<p>可以实现每次从优先队列中取出的元素都是队列中<strong>优先级最大</strong>的一个。</p>
<p>它的底层是通过<strong>堆</strong>来实现的。</p>
<h3 id="5-1-初始化"><a href="#5-1-初始化" class="headerlink" title="5.1 初始化"></a>5.1 初始化</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="comment">//初始化定义</span></span><br><span class="line">priority_queue&lt;<span class="type">int</span>&gt; q;</span><br></pre></td></tr></table></figure>

<h3 id="5-2-函数方法"><a href="#5-2-函数方法" class="headerlink" title="5.2 函数方法"></a>5.2 函数方法</h3><table>
<thead>
<tr>
<th>方法函数</th>
<th>含义</th>
<th>时间复杂度</th>
</tr>
</thead>
<tbody><tr>
<td><code>q.top()</code></td>
<td>访问队首元素</td>
<td></td>
</tr>
<tr>
<td><code>q.push()</code></td>
<td>入队</td>
<td></td>
</tr>
<tr>
<td><code>q.pop()</code></td>
<td>堆顶（队首）元素出队</td>
<td></td>
</tr>
<tr>
<td><code>q.size()</code></td>
<td>队列元素个数</td>
<td></td>
</tr>
<tr>
<td><code>q.empty()</code></td>
<td>是否为空</td>
<td></td>
</tr>
<tr>
<td><code>empty()</code></td>
<td>判断deque是否空</td>
<td></td>
</tr>
</tbody></table>
<blockquote>
<ul>
<li><strong>注意</strong>没有<code>clear()</code>！</li>
<li>优先队列只能通过<code>top()</code>访问队首元素（优先级最高的元素）</li>
</ul>
</blockquote>
<h3 id="5-3-设置优先级"><a href="#5-3-设置优先级" class="headerlink" title="5.3 设置优先级"></a>5.3 设置优先级</h3><h4 id="5-3-1-基本数据类型的优先级"><a href="#5-3-1-基本数据类型的优先级" class="headerlink" title="5.3.1 基本数据类型的优先级"></a>5.3.1 基本数据类型的优先级</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">priority_queue&lt;<span class="type">int</span>&gt; pq; <span class="comment">// 默认大根堆, 即每次取出的元素是队列中的最大值</span></span><br><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt; &gt; q; <span class="comment">// 小根堆, 每次取出的元素是队列中的最小值</span></span><br></pre></td></tr></table></figure>

<p><strong>参数解释：</strong></p>
<ul>
<li><strong>第二个参数：</strong><br><code>vector&lt; int &gt;</code> 是用来承载底层数据结构堆的容器，若优先队列中存放的是<code>double</code>型数据，就要填<code>vector&lt; double &gt;</code><br><strong>总之存的是什么类型的数据，就相应的填写对应类型。同时也要改动第三个参数里面的对应类型。</strong></li>
<li><strong>第三个参数：</strong><br><code>less&lt; int &gt;</code> 表示数字大的优先级大，堆顶为最大的数字<br><code>greater&lt; int &gt;</code>表示数字小的优先级大，堆顶为最小的数字<br><strong>int代表的是数据类型，也要填优先队列中存储的数据类型</strong></li>
</ul>
<h5 id="1-基础写法（非常常用）"><a href="#1-基础写法（非常常用）" class="headerlink" title="1. 基础写法（非常常用）"></a>1. 基础写法（非常常用）</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">priority_queue&lt;<span class="type">int</span>&gt; q1; <span class="comment">// 默认大根堆, 即每次取出的元素是队列中的最大值</span></span><br><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, less&lt;<span class="type">int</span>&gt; &gt; q2; <span class="comment">// 大根堆, 每次取出的元素是队列中的最大值，同第一行</span></span><br><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt; &gt; q3; <span class="comment">// 小根堆, 每次取出的元素是队列中的最小值</span></span><br></pre></td></tr></table></figure>

<h5 id="2-自定义排序（不常见，主要是写着麻烦）"><a href="#2-自定义排序（不常见，主要是写着麻烦）" class="headerlink" title="2. 自定义排序（不常见，主要是写着麻烦）"></a>2. 自定义排序（不常见，主要是写着麻烦）</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp1</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &gt; y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp2</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> <span class="type">int</span> x,<span class="type">const</span> <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt; y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, cmp1&gt; q1; <span class="comment">// 小根堆</span></span><br><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, cmp2&gt; q2; <span class="comment">// 大根堆</span></span><br></pre></td></tr></table></figure>

<h4 id="5-3-2-结构体优先级设置"><a href="#5-3-2-结构体优先级设置" class="headerlink" title="5.3.2 结构体优先级设置"></a>5.3.2 结构体优先级设置</h4><p>优先队列中存储结构体类型，必须要设置优先级，即结构体的比较运算（因为优先队列的堆中要比较大小，才能将对应最大或者最小元素移到堆顶）。</p>
<ul>
<li>优先级设置可以定义在<strong>结构体内</strong>进行小于号重载，也可以定义在<strong>结构体外</strong>。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//要排序的结构体（存储在优先队列里面的）</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优先队列的定义</span></span><br><span class="line">priority_queue&lt;Point&gt; q;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>版本一：自定义全局比较规则</strong></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义的比较结构体</span></span><br><span class="line"><span class="comment">//注意：cmp是个结构体 </span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp</span> &#123;<span class="comment">//自定义堆的排序规则 </span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> Point&amp; a,<span class="type">const</span> Point&amp; b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.x &lt; b.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//初始化定义， </span></span><br><span class="line">priority_queue&lt;Point, vector&lt;Point&gt;, cmp&gt; q; <span class="comment">// x大的在堆顶</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>版本二：直接在结构体里面写</strong></p>
<p>因为是在结构体内部自定义的规则，一旦需要比较结构体，自动调用结构体内部重载运算符规则。</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span> &lt; (Point a, Point b) &#123;	<span class="comment">//为两个结构体参数，结构体调用一定要写上friend</span></span><br><span class="line">        <span class="keyword">return</span> a.x &lt; b.x;<span class="comment">//按x从小到大排，x大的在堆顶</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式二</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Point &amp;a) <span class="type">const</span> &#123;<span class="comment">//直接传入一个参数，不必要写friend</span></span><br><span class="line">        <span class="keyword">return</span> x &lt; a.x;<span class="comment">//按x升序排列，x大的在堆顶</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意：</strong> 优先队列自定义排序规则和<code>sort()</code>函数定义<code>cmp</code>函数很相似，但是最后返回的情况是<strong>相反</strong>的。即相同的符号，最后定义的排列顺序是完全相反的。<br>所以只需要记住<code>sort</code>的排序规则和优先队列的排序规则是相反的就可以了。</p>
</blockquote>
<h3 id="5-4-存储特殊类型的优先级"><a href="#5-4-存储特殊类型的优先级" class="headerlink" title="5.4 存储特殊类型的优先级"></a>5.4 存储特殊类型的优先级</h3><h4 id="存储pair类型"><a href="#存储pair类型" class="headerlink" title="存储pair类型"></a>存储pair类型</h4><ul>
<li>排序规则：<br>默认先对<code>pair</code>的<code>first</code>进行降序排序，然后再对<code>second</code>降序排序<br>对<code>first</code>先排序，大的排在前面，如果<code>first</code>元素相同，再对<code>second</code>元素排序，保持大的在前面。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    priority_queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt;q;</span><br><span class="line">    q.<span class="built_in">push</span>(&#123;<span class="number">7</span>, <span class="number">8</span>&#125;);</span><br><span class="line">    q.<span class="built_in">push</span>(&#123;<span class="number">7</span>, <span class="number">9</span>&#125;);</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">8</span>, <span class="number">7</span>));</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; q.<span class="built_in">top</span>().first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; q.<span class="built_in">top</span>().second &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line"><span class="number">8</span> <span class="number">7</span></span><br><span class="line"><span class="number">7</span> <span class="number">9</span></span><br><span class="line"><span class="number">7</span> <span class="number">8</span></span><br></pre></td></tr></table></figure>





<h2 id="六、map"><a href="#六、map" class="headerlink" title="六、map"></a>六、<code>map</code></h2><p>未完待续….</p>
<h1 id="第二部分-算法"><a href="#第二部分-算法" class="headerlink" title="第二部分 算法"></a>第二部分 算法</h1><h2 id="1-排序sort"><a href="#1-排序sort" class="headerlink" title="1.排序sort"></a>1.排序sort</h2><p>未完待续….</p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>AAMS-同济教务系统</title>
    <url>/butterflyblog/2023/07/29/AAMS-%E5%90%8C%E6%B5%8E%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="AAMS-同济教务系统"><a href="#AAMS-同济教务系统" class="headerlink" title="AAMS-同济教务系统"></a>AAMS-同济教务系统</h1><blockquote>
<p><font color=red>网址入口：</font><a class="btn-beautify blue larger" href="http://isseymour.cn/" 
  title="AAMS-同济教务系统"><i class="far fa-hand-point-right"></i><span>AAMS-同济教务系统</span></a></p>
<p><font color=red>说明：账号密码请询问站长，谢谢配合！</font></p>
</blockquote>
<h3 id="0x01-AAMS是什么？"><a href="#0x01-AAMS是什么？" class="headerlink" title="0x01 AAMS是什么？"></a>0x01 AAMS是什么？</h3><ul>
<li>Academic Affairs Management System</li>
<li>教务管理系统</li>
</ul>
<p>本次项目致力于搭建一个有数据库支持的、前后端分离的教务管理系统。</p>
<h3 id="0x02-技术栈"><a href="#0x02-技术栈" class="headerlink" title="0x02 技术栈"></a>0x02 技术栈</h3><p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/aams1.png" alt="aams技术栈"></p>
<ul>
<li>前端：Vue 2.x、Vue-Router、ElementUI、Axios</li>
<li>后端：Django、DRF、JWT</li>
<li>数据库：MySQL</li>
</ul>
<p>本次项目采用前后端分离的架构，前端采用 VUE 框架，后端采用Django 框架，前后端通过 AJAX 技术进行连接。</p>
<p>后端主要管理数据库、数据查询、数据操作等功能，构建数据模型、与数据库交互、业务流程处理、网络请求接收并响应等功能。其中网络请求部分，通过传输 JSON 格式数据给前端，前端接收 JSON 格式数据后，把数据传给前端渲染的 data 进行渲染并呈现给用户。</p>
<p>前端是 SPA 单页面应用，功能跳转通过 vue-router 来处理，本地身份认证与路由拦截也通过 vue-router 处理。其中关于网络请求有单独的文件结构，简洁明了。美化工作由 elementUI 和少量原生的 CSS 来处理。</p>
<h3 id="0x03-效果展示"><a href="#0x03-效果展示" class="headerlink" title="0x03 效果展示"></a>0x03 效果展示</h3><h4 id="3-1-学生端"><a href="#3-1-学生端" class="headerlink" title="3.1 学生端"></a>3.1 学生端</h4><h5 id="3-1-1-首页"><a href="#3-1-1-首页" class="headerlink" title="3.1.1 首页"></a>3.1.1 首页</h5><p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/aams2.png" alt="学生端首页"></p>
<p>说明：</p>
<p>（1）登录成功提示；</p>
<p>（2）主页分为头部信息、左侧菜单栏、中间主内容区域；</p>
<p>（3）主页会自动获取最近的几条通知广告，进行自动播放；</p>
<p>（4）右上角的“我的信息”可以退出登录；</p>
<p>（5）“通知公告”处可以打开通知查看详情；</p>
<p>（6）本学期进度是一些个人信息，其中进度圈是指当前的学期阶段（分为5阶段，2是开放选课阶段，未到选课阶段时，无法选课）。</p>
<h5 id="3-1-2-全校课程"><a href="#3-1-2-全校课程" class="headerlink" title="3.1.2 全校课程"></a>3.1.2 全校课程</h5><p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/aams3.png" alt="全校课程"></p>
<p>说明：</p>
<p>（1）可以输入学期代码、下拉选择校区，再点击查询；</p>
<p>（2）在右下角有每页几条、跳转数据、直接跳转数据的功能；</p>
<p>（3）每次查询会给出查询结果，是否成功查询、网络出错等。</p>
<h5 id="3-1-3-个人选课"><a href="#3-1-3-个人选课" class="headerlink" title="3.1.3 个人选课"></a>3.1.3 个人选课</h5><p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/aams4.png" alt="个人选课1"></p>
<p>说明：</p>
<p>（1）刚进入时，显示当前没有对您开放的选课，可以刷新；</p>
<p>（2）刷新若有选课会展示选课的轮次，以供选择；</p>
<p>（3）进入选课有确认阅读选课信息界面。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/aams5.png" alt="个人选课2"></p>
<p>说明：</p>
<p>（1）进入选课界面后，初始时，没有任何数据；</p>
<p>（2）点击“添加课程”，会在选课列表里添加所有可选的课程；</p>
<p>（3）下拉有在线课表的功能，可以查看；</p>
<p>（4）选课列表里的每个课程可以查看，然后进行具体课程班级的选择；</p>
<p>（5）前端自动进行选课是否冲突的判断，不冲突则选课成功，冲突会给出提示；</p>
<p>（6）选好的课程后，可以刷新课表，在下拉课表里查看当前的课程表；</p>
<p>（7）已选的课程会变成“深绿色”的课程序号，未选是“浅绿色”的课程序号；</p>
<p>（8）再次点击已选的课程，会进行退课，退课前会先提示是否确认退课操作；</p>
<p>（9）课程会自动排在课程表里对应时间位置，并写清楚课程名、教师、教室。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/aams6.png" alt="个人选课3"></p>
<p>说明：</p>
<p>（1）进入我的课表页面，点击左上角“学生课表”旁边的“刷新”；</p>
<p>（2）下拉有表格的课程列表，信息更加全面。</p>
<h5 id="3-1-4-成绩查询"><a href="#3-1-4-成绩查询" class="headerlink" title="3.1.4 成绩查询"></a>3.1.4 成绩查询</h5><p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/aams9.png" alt="成绩查询"></p>
<p>说明：</p>
<p>（1）会向后端查询当前账号的所有成绩单；</p>
<p>（2）成绩会按照学期先后进行排序展示，你可以点击“学期编号”旁边的箭头，更改排序的先后顺序；</p>
<p>教师端有录入成绩的功能（后面会展示）。</p>
<h4 id="3-2-教师端"><a href="#3-2-教师端" class="headerlink" title="3.2 教师端"></a>3.2 教师端</h4><h5 id="3-2-1-首页"><a href="#3-2-1-首页" class="headerlink" title="3.2.1 首页"></a>3.2.1 首页</h5><p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/aams10.png" alt="教师端首页"></p>
<p>说明：</p>
<p>（1）该页面大体内容和学生端类似，为了作为区分，我更改了外围的主色调；</p>
<p>（2）教师端的侧边菜单栏功能与学生端不同。</p>
<p>（3）部分通知不一样，部分通知可能并不是发给教师，所以教师看不到。</p>
<h5 id="3-2-2-我的授课"><a href="#3-2-2-我的授课" class="headerlink" title="3.2.2 我的授课"></a>3.2.2 我的授课</h5><p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/aams12.png" alt="我的授课"></p>
<p>说明：</p>
<p>（1）教师授课的课程都会在该页面显示。</p>
<h5 id="3-2-3-录入成绩"><a href="#3-2-3-录入成绩" class="headerlink" title="3.2.3 录入成绩"></a>3.2.3 录入成绩</h5><p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/aams11.png" alt="录入成绩"></p>
<p>说明：</p>
<p>（1）教师可在该页面录入成绩；</p>
<p>（2）录入成绩有学期阶段限制，不是处于第5阶段：学期结束阶段，无法录入；</p>
<h3 id="0x04-杂谈"><a href="#0x04-杂谈" class="headerlink" title="0x04 杂谈"></a>0x04 杂谈</h3><h4 id="4-1-心得"><a href="#4-1-心得" class="headerlink" title="4.1 心得"></a>4.1 心得</h4><p>本次项目，我很早就开始准备了，也是最初一直学了好久的 B 站课程，我前端选的是 VUE，在 B 站上选了一个播放量比较大的，每天有空就学，也因为比较感兴趣，学的不算枯燥，会同时记录 notes，防止自己看了一遍就忘了，就白学了。（视频链接：<a href="https://www.bilibili.com/video/BV1Zy4y1K7SH/">b站尚硅谷Vue2.0+Vue3.0</a>）</p>
<p>尤其计算机操作类的课程，都是很容易生疏，因此，我每天看完的内容，一定会总结一下。大概在 5 月初的样子，把 VUE 教程看完了，对前端感觉了解深刻了很多。同时因为有了这次的经历，对自学新的知识开始转变思想，也比较有信心通过自学能学会新技术。后端原本打算使用Java，但是由于我没有学过 Java，可能 5 月才开始学，会有点晚了。所以，转向使用已学过的 Python 做后端，在 Flask 和 Django 之间，选择了 Django，主要是看重他的框架比较成型，也好让我对后端基本框架有一个更加成熟完备的了解，便于以后更好的学习其他后端框架。同时比较好的是 Django 不需要我直接操作数据库，这点对于我这个还没有学过数据库的同学来说，无疑是最大的好处。我的后端学的不如前端扎实，毕竟学前端时间也长，而学后端的时间少不说，还缺乏比较全面的教程。</p>
<p>在学完前端和后端基本框架之后，我开始着手做这个项目了。做项目的过程中，又引发很多问题。比如说遇到关于登陆后的认证问题，我就去学习了一下 JWT 认证，了解了原理，然后自己再编写；遇到关于后端规范化数据格式，我学习了 DRF，采用 APIView 和序列化器，使得交互数据非常简洁明了；遇到跨域请求问题，学习了解决跨域问题的前端、后端方法。</p>
<p>经历这么一遭，最终也是做好了，也算是比较满意吧。其实我发现，热爱很重要，其实想想学习的这一路还是比较痛苦的，但是由于迫切希望看到结果，我也一直快马加鞭的学了下来。希望以后还能保持这份热爱，继续前行！</p>
<h4 id="4-2-认知"><a href="#4-2-认知" class="headerlink" title="4.2 认知"></a>4.2 认知</h4><p>最后，关于分析国内外的 web 技术，我可能说不出太多认知。我仅说说我学过的这些技术中，我的一些看法吧。</p>
<p>前端技术 vue 是尤雨溪开发出来的一套框架。我其实比较惊喜能够在计算机的某种技术里看到中国人的名字放在第一位。我的体会一直是中国在追赶国外的新兴技术，我们也能做到很好的使用，但是总是缺少开发新兴技术的人。所以，Vue 的出现，让我感到惊喜！</p>
<p>其他 web 技术，我了解的不多，我目前听到的说法是：中国比较庞大的 web 技术生态是微信生态系统，微信提供了许多 API 和开发工具，允许开发人员在其平台上构建应用程序和服务。国外比较多用的也几乎都是类似微信的一些社交媒体，如 Twitter、Facebook、Instagram 等。</p>
<p>我一直认为，能否推动某种技术大力发展取决于它的受众面是否广阔。希望今后能看到更多以中国人名字排头的 web 技术！</p>
]]></content>
      <categories>
        <category>开发项目</category>
      </categories>
      <tags>
        <tag>前后端分离</tag>
      </tags>
  </entry>
  <entry>
    <title>CC++习题与知识</title>
    <url>/butterflyblog/2022/12/24/CC++%E4%B9%A0%E9%A2%98%E4%B8%8E%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h2 id="CC-习题与知识"><a href="#CC-习题与知识" class="headerlink" title="CC++习题与知识"></a>CC++习题与知识</h2><p>[TOC]</p>
<h3 id="【1】输入错误处理"><a href="#【1】输入错误处理" class="headerlink" title="【1】输入错误处理"></a>【1】输入错误处理</h3><h4 id="cin-gt-gt-int-型变量（C"><a href="#cin-gt-gt-int-型变量（C" class="headerlink" title="cin &gt;&gt; int 型变量（C++)"></a>cin &gt;&gt; int 型变量（C++)</h4><p><strong>三种情况：</strong></p>
<ol>
<li>输入非法：非数字、超上下限</li>
<li>输入合法，但不在用户要求范围内</li>
<li>输入合法且在用户要求范围内 √</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;请输入x的值[0-100] : &quot;</span>;</span><br><span class="line">		cin &gt;&gt; x;</span><br><span class="line">		<span class="keyword">if</span> (!cin.<span class="built_in">good</span>()) &#123;			<span class="comment">//或！cin. /cin.fail()</span></span><br><span class="line">			cin.<span class="built_in">clear</span>();			<span class="comment">//清除内部错误状态标记位</span></span><br><span class="line">			cin.<span class="built_in">ignore</span>(<span class="number">65536</span>, <span class="string">&#x27;\n&#x27;</span>);<span class="comment">//清除缓冲区中字符，到\n为止，最多清65536个，可改</span></span><br><span class="line">			<span class="keyword">continue</span>;				<span class="comment">//也可#include &lt;limits&gt;后INT_MAX，或直接2147483647，</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt;= <span class="number">100</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">/*cin.ignore(cin.rdbuf()-&gt;in_avail(),&#x27;\n&#x27;); </span></span><br><span class="line"><span class="comment">	返回缓冲区中现有字符数</span></span><br><span class="line"><span class="comment">	VS  :可用</span></span><br><span class="line"><span class="comment">	Dev :无论缓冲区中现有多少字符，均返回0，不可用</span></span><br><span class="line"><span class="comment">  cin.ignore(numeric_limits&lt;streamsize&gt;::max(),&#x27;\n&#x27;);</span></span><br><span class="line"><span class="comment">	返回流缓冲区的最大容量</span></span><br><span class="line"><span class="comment">	VS  :直接可用（64位整数）</span></span><br><span class="line"><span class="comment">		当 #include &lt;Window.h&gt; 时不可用</span></span><br><span class="line"><span class="comment">	Dev :加 #include &lt;limits&gt;（32位整数）</span></span><br></pre></td></tr></table></figure>

<p>实际上也可不要continue，改用else if</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;请输入x的值[0-100] : &quot;</span>;</span><br><span class="line">		cin &gt;&gt; x;</span><br><span class="line">		<span class="keyword">if</span> (!cin.<span class="built_in">good</span>()) &#123;</span><br><span class="line">			cin.<span class="built_in">clear</span>();</span><br><span class="line">			cin.<span class="built_in">ignore</span>(<span class="number">65536</span>, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt;= <span class="number">100</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p><strong>模板：</strong></p>
<p>while (1) {<br>        提示并输入x<br>        if (输入错误) {<br>            <strong>清除错误标记</strong><br>            <strong>清空缓冲区</strong><br>        }<br>        <strong>else</strong> if (x &gt;&#x3D; 0 &amp;&amp; x &lt;&#x3D; 100)<br>            break;<br>    }</p>
<h4 id="scanf-“-d”-amp-int变量-C方式"><a href="#scanf-“-d”-amp-int变量-C方式" class="headerlink" title="scanf(“%d”, &amp;int变量)  (C方式)"></a>scanf(“%d”, &amp;int变量)  (C方式)</h4><p><strong>scanf返回值：</strong>正确按指定格式输入变量的个数，也即<strong>能正确接收到值的变量个数</strong>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请输入x的值[0-100] : &quot;</span>);</span><br><span class="line">		ret = ;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x) != <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="built_in">getchar</span>()!=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;输入有错[ret=%d x=%d],请重新输入\n&quot;</span>, ret, x); <span class="comment">//这句不一定要，看情况</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">/*scanf(&quot;%*[^\n]&quot;); 清缓冲区</span></span><br><span class="line"><span class="comment">  setbuf(stdin,NULL); 清缓冲区时，setbuf可用，但是只能用一次</span></span><br><span class="line"><span class="comment">  char ch;</span></span><br><span class="line"><span class="comment">  while(((ch=getchar())!=EOF) &amp;&amp; ch != &#x27;\n&#x27;)</span></span><br><span class="line"><span class="comment">  	; 也是正确的，EOF = end of file,暂时不了解，可避免用.dat文件重定向输入会出问题（否则死循环非法）</span></span><br></pre></td></tr></table></figure>



<h4 id="x3D-x3D-cin-与-scanf-在输入超上下限时有差异-x3D-x3D"><a href="#x3D-x3D-cin-与-scanf-在输入超上下限时有差异-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;cin 与 scanf 在输入超上下限时有差异&#x3D;&#x3D;"></a>&#x3D;&#x3D;cin 与 scanf 在输入超上下限时有差异&#x3D;&#x3D;</h4><p>**cin	:**状态 false，值上限&#x2F;随机</p>
<p>**scanf:**无状态观察，返回正确的1，截断赋值</p>
<h4 id="由此引申出错误输入处理的通用规则"><a href="#由此引申出错误输入处理的通用规则" class="headerlink" title="由此引申出错误输入处理的通用规则"></a>由此引申出错误输入处理的通用规则</h4><ol>
<li><p>上述处理规则适用于各种int</p>
<p>不含char&#x2F;unsigned char，因为输入方式不同。（只是说，运算时可以当作一字节整数处理）</p>
</li>
<li><p>如何判断char&#x2F;unsigned char 型的输入错误？</p>
</li>
<li><p>如何判断float&#x2F;double 型的输入错误？</p>
</li>
<li><p>如何判断bool 型的输入错误？</p>
</li>
</ol>
<h4 id="计算机的思维"><a href="#计算机的思维" class="headerlink" title="计算机的思维"></a>计算机的思维</h4><ol>
<li>读入1.1时，读完”1”正确，”.1”后续留在缓冲区</li>
<li>读入126abc，同理</li>
</ol>
<p>所以一般来说，我们都依次处理每个输入，</p>
<p>若本次输入正确，后续则留在缓冲区</p>
<p>否则，清空全部缓冲区</p>
<h4 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h4><ol>
<li><p>对于多个输入，有没有标准处理非法？</p>
<p>没有</p>
</li>
<li><p>无特殊约定下的错误处理准则？</p>
<p>一次读一个，cin若false则清空缓冲区，否则不清</p>
</li>
<li><p>在实际应用中，如何尽可能地避免输入错误？</p>
<p>多选择，少输入，从用户角度避免输入错误，而不是错误后纠正</p>
</li>
</ol>
<h3 id="【2】打印月历"><a href="#【2】打印月历" class="headerlink" title="【2】打印月历"></a>【2】打印月历</h3><h4 id="闰年表达式"><a href="#闰年表达式" class="headerlink" title="闰年表达式"></a>闰年表达式</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">leap = (y % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; y % <span class="number">100</span> != <span class="number">0</span> || y % <span class="number">400</span> == <span class="number">0</span>)? <span class="number">1</span> : <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<h4 id="控制输出"><a href="#控制输出" class="headerlink" title="控制输出"></a>控制输出</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(week == <span class="number">6</span>)</span><br><span class="line">    cout &lt;&lt; endl;		<span class="comment">//周六换行</span></span><br><span class="line">week = (++week) % <span class="number">7</span>;	<span class="comment">//使得week在0-6间反复</span></span><br></pre></td></tr></table></figure>



<h3 id="【3】光标移动"><a href="#【3】光标移动" class="headerlink" title="【3】光标移动"></a>【3】光标移动</h3><h4 id="键盘键"><a href="#键盘键" class="headerlink" title="键盘键"></a>键盘键</h4><ol>
<li><p>普通字符：</p>
<p>一键单码（ASCII码）</p>
</li>
<li><p>箭头键：</p>
<p>一键双码</p>
<p>224 + 72&#x2F;80&#x2F;75&#x2F;77（上下左右）</p>
<p>​			H  P   K   M</p>
</li>
</ol>
<h4 id="用户选项与参数用法"><a href="#用户选项与参数用法" class="headerlink" title="用户选项与参数用法"></a>用户选项与参数用法</h4><p>有时比如用户要输入的选项是0-6，那我们可以用这种选项来作为必要的参数输入给函数，控制函数的某种功能是否开启</p>
<h4 id="习惯培养"><a href="#习惯培养" class="headerlink" title="习惯培养"></a>习惯培养</h4><ol>
<li><p>多用<strong>符号常量（宏定义）</strong>和<strong>全局常量（const)</strong></p>
<p>对于一些固定的参数，虽然说对于本题固定，但是尽量不要写死参数</p>
<p>不允许使用全局变量，但是鼓励多用全局常量</p>
</li>
<li><p><strong>条件运算符</strong></p>
<p>对于只有两个出口的函数，往往可以用？：来代替，简化代码，看起来也方便</p>
</li>
<li><p>多条件的int 整数选择，用<strong>switch-case</strong></p>
</li>
<li><p>循环的选择，用1，用loop？</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(loop)&#123;</span><br><span class="line">    sel = <span class="built_in">menu</span>();</span><br><span class="line">    <span class="keyword">switch</span>(sel)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">            <span class="built_in">move</span>(hout, <span class="number">0</span>, sel-<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">            <span class="built_in">move</span>(hout, <span class="number">1</span>, sel-<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">            loop = <span class="number">0</span>;	<span class="comment">//巧妙</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(loop)&#123;</span><br><span class="line">    <span class="keyword">switch</span>(_getch())&#123;</span><br><span class="line">    	<span class="keyword">case</span> <span class="string">&#x27;L&#x27;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;l&#x27;</span>:				<span class="comment">//两个连用，遇到break才会出switch</span></span><br><span class="line">        	<span class="keyword">if</span>(++x &gt; MAX_X)</span><br><span class="line">                x = rool ? <span class="number">1</span> : MAX_X;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;J&#x27;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;j&#x27;</span>:</span><br><span class="line">            ...</span><br><span class="line">        	...</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        	<span class="keyword">continue</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">224</span>:</span><br><span class="line">	<span class="keyword">if</span>(!move_by_arrow)</span><br><span class="line">        <span class="keyword">continue</span>;	<span class="comment">//奇妙控制是否能够箭头，在要动用的前面截路，加个判断+continue</span></span><br><span class="line">	<span class="keyword">switch</span>(_getch())&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">72</span>:<span class="comment">//&#x27;H&#x27;</span></span><br><span class="line">            <span class="comment">//上</span></span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="【4】递归分解正整数"><a href="#【4】递归分解正整数" class="headerlink" title="【4】递归分解正整数"></a>【4】递归分解正整数</h3><h4 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">-2147483648</span>, b = -a;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;<span class="comment">//得到-2147483648</span></span><br><span class="line">cout &lt;&lt; -a &lt;&lt; endl;<span class="comment">//得到-2147483648</span></span><br><span class="line">cout &lt;&lt; b &lt;&lt; endl;<span class="comment">//得到-2147483648</span></span><br></pre></td></tr></table></figure>

<h4 id="正序"><a href="#正序" class="headerlink" title="正序"></a>正序</h4><p>输入：12345</p>
<p>输出：1 2 3 4 5 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">convert</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n/<span class="number">10</span>)</span><br><span class="line">        <span class="built_in">convert</span>(n/<span class="number">10</span>);</span><br><span class="line">    cout &lt;&lt; (<span class="type">char</span>)(<span class="string">&#x27;0&#x27;</span> + n%<span class="number">10</span>) &lt;&lt; <span class="string">&quot; &quot;</span>;<span class="comment">//记住 整数转字符 输出的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="逆序"><a href="#逆序" class="headerlink" title="逆序"></a>逆序</h4><p>输入：12345</p>
<p>输出：5 4 3 2 1 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">convert</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; (<span class="type">char</span>)(<span class="string">&#x27;0&#x27;</span> + n%<span class="number">10</span>) &lt;&lt; <span class="string">&quot; &quot;</span>;<span class="comment">//把输出放前面，会导致先输出个位数字！</span></span><br><span class="line">    <span class="keyword">if</span>(n/<span class="number">10</span>)</span><br><span class="line">        <span class="built_in">convert</span>(n/<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++ 必要记忆知识点</title>
    <url>/butterflyblog/2022/12/25/CC++%20%E5%BF%85%E8%A6%81%E8%AE%B0%E5%BF%86%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h3 id="C-x2F-C-必要记忆知识点"><a href="#C-x2F-C-必要记忆知识点" class="headerlink" title="C&#x2F;C++ 必要记忆知识点"></a>C&#x2F;C++ 必要记忆知识点</h3><h3 id="常用简记"><a href="#常用简记" class="headerlink" title="常用简记"></a>常用简记</h3><h4 id="一、头文件-主要针对C"><a href="#一、头文件-主要针对C" class="headerlink" title="一、头文件(主要针对C++)"></a>一、头文件(主要针对C++)</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//防止VS安全报错</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//C++ 输入输出流</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">cin &gt;&gt; a;</span><br><span class="line">cout &lt;&lt;  ...  &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//C 方式输入输出流(包含文件流)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a);</span><br><span class="line"><span class="built_in">fopen</span>(...);		<span class="built_in">fcolse</span>(...);</span><br><span class="line"></span><br><span class="line"><span class="comment">//C++ 输出格式控制符</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line">cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">5</span>) &lt;&lt; ...</span><br><span class="line"></span><br><span class="line"><span class="comment">//C++ 文件输入输出流</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="function">ifstream <span class="title">in</span><span class="params">(<span class="string">&quot;a.txt&quot;</span>,ios::in)</span></span>;</span><br><span class="line"><span class="function">ofstream <span class="title">out</span><span class="params">(<span class="string">&quot;b.txt&quot;</span>,ios::out)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符数组处理函数库</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span><span class="comment">//C++</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span><span class="comment">//C 方式</span></span></span><br><span class="line"><span class="built_in">strcpy</span>(s1,s2);</span><br><span class="line"><span class="built_in">strcmp</span>(s1,s2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//数学函数库</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span><span class="comment">//C++ </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span><span class="comment">//C 方式</span></span></span><br><span class="line"><span class="built_in">sqrt</span>(x);</span><br><span class="line"><span class="built_in">exp</span>(<span class="number">10</span>);	<span class="built_in">pow</span>(<span class="number">2.717</span>,<span class="number">10</span>);</span><br><span class="line"><span class="built_in">log</span>(<span class="number">2.717</span>);	<span class="built_in">log10</span>(<span class="number">100</span>);<span class="comment">//分别以e、10为底</span></span><br><span class="line"><span class="built_in">sin</span>(x);		<span class="built_in">asin</span>(x);</span><br><span class="line"><span class="built_in">abs</span>(n);		<span class="built_in">fabs</span>(x);</span><br><span class="line"><span class="built_in">floor</span>(x);	<span class="built_in">ceil</span>(x);<span class="comment">//向下取整、向上取整</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//控制台输入输出函数库</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="built_in">getchar</span>(ch);	_getche(ch);	_getch(ch);<span class="comment">//等待、有回显；不等，有回显；不等、无回显</span></span><br><span class="line"><span class="built_in">putchar</span>(ch);</span><br><span class="line"><span class="built_in">kbhit</span>();<span class="comment">//检查是否有键盘输入，有则非0，无则0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//时间函数库</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//辅助函数库</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span><span class="comment">//C 方式</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span><span class="comment">//C++</span></span></span><br><span class="line"><span class="built_in">malloc</span>(...);		<span class="built_in">free</span>(...);<span class="comment">//分配</span></span><br><span class="line"><span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">NULL</span>));	<span class="built_in">rand</span>();<span class="comment">//随机数</span></span><br><span class="line"><span class="built_in">exit</span>(ret);			<span class="built_in">system</span>(...);<span class="comment">//系统</span></span><br><span class="line"><span class="built_in">atof</span>(<span class="string">&quot;3.14&quot;</span>);		<span class="built_in">atoi</span>(<span class="string">&quot;25&quot;</span>);<span class="comment">//转换。字符串-&gt;浮点数，并返回。字符串-&gt;整数，并返回。</span></span><br><span class="line"><span class="built_in">itoa</span>(<span class="number">25</span>,str,<span class="number">16</span>);<span class="comment">//以16进制，把整数25转换到字符串中并返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字符类型函数库</span></span><br><span class="line"><span class="meta">#incldue <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="built_in">isdigit</span>(...);	<span class="built_in">isalpha</span>(...);<span class="comment">//是数字？是字母？是则返回非0，否则0</span></span><br><span class="line"><span class="built_in">islower</span>(...);	<span class="built_in">isupper</span>(...);<span class="comment">//是小写字母？是大写字母？是则返回非0，否则0</span></span><br><span class="line"><span class="built_in">isalnum</span>(...);	<span class="built_in">isxdigit</span>(...);<span class="comment">//数字字母？十六进制数？</span></span><br><span class="line"><span class="built_in">isspace</span>(...);	<span class="built_in">iscntrl</span>(...);<span class="comment">//white space?是DEL字符（0x7F）？</span></span><br><span class="line"><span class="built_in">tolower</span>(...);	<span class="built_in">toupper</span>(...);<span class="comment">//返回值转换大小写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Windows基础函数库</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Window.h&gt;</span></span></span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">100</span>);<span class="comment">//当前程序睡眠100ms</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h3 id="本文档开始"><a href="#本文档开始" class="headerlink" title="本文档开始"></a>本文档开始</h3><h4 id="一、原码与补码"><a href="#一、原码与补码" class="headerlink" title="一、原码与补码"></a>一、原码与补码</h4><p>十进制数字 -&gt; 补码</p>
<p>（1）取绝对值，转二进制  –&gt; <strong>原码</strong></p>
<p>（2）正数：                         –&gt;<strong>补码</strong></p>
<p>​		  负数：取反+1            –&gt; <strong>补码</strong></p>
<p>（0不论看作正还是负，最终都会得到补码为00000000 00000000，其中看作负数时由高位溢出得到）</p>
<p>例：</p>
<table>
<thead>
<tr>
<th>十进制数</th>
<th>取绝对值，转二进制：原码</th>
<th>正数不动，负数取反加一：补码</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>00000000 00000000</td>
<td>00000000 00000000</td>
</tr>
<tr>
<td>10</td>
<td>00000000 00001010</td>
<td>00000000 00001010</td>
</tr>
<tr>
<td>-10</td>
<td>00000000 00001010</td>
<td>11111111 11110110</td>
</tr>
<tr>
<td>32767</td>
<td>01111111 11111111</td>
<td>01111111 11111111</td>
</tr>
<tr>
<td>-32767</td>
<td>01111111 11111111</td>
<td>10000000 00000001</td>
</tr>
<tr>
<td>-32768</td>
<td>10000000 00000000</td>
<td>10000000 00000000</td>
</tr>
</tbody></table>
<blockquote>
<p>（1）计算机的整数均用补码表示</p>
<p>（2）可以发现，不论原码还是补码，开头第一位的数字都一定遵循：</p>
<p>​		正数 0</p>
<p>​		负数 1</p>
<p>​	开头第一位称为”符号位“</p>
</blockquote>
<h4 id="二、各数据类型所占字节及表示范围"><a href="#二、各数据类型所占字节及表示范围" class="headerlink" title="二、各数据类型所占字节及表示范围"></a>二、各数据类型所占字节及表示范围</h4><p>​	以VS2022 x86&#x2F;32bit 为基准：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>类型标识符</th>
<th>字节</th>
<th>数值范围</th>
<th>数值范围</th>
</tr>
</thead>
<tbody><tr>
<td>整型</td>
<td>[signed] int</td>
<td>4</td>
<td>-2147483648 ~ +2147483647</td>
<td>-2^31^ ~ +2^31^-1</td>
</tr>
<tr>
<td>无符号整型</td>
<td>unsigned int</td>
<td>4</td>
<td>0 ~ +4294967295</td>
<td>0 ~ 2^32^-1</td>
</tr>
<tr>
<td>短整型</td>
<td>short [int]</td>
<td>2</td>
<td>-32768 ~ +32767</td>
<td>-2^15^ ~ +2^15^-1</td>
</tr>
<tr>
<td>无符号短整型</td>
<td>unsigned short [int]</td>
<td>2</td>
<td>0 ~ 65535</td>
<td>0 ~ 2^16^-1</td>
</tr>
<tr>
<td>长整型</td>
<td>long [int]</td>
<td>4</td>
<td>-2147483648 ~ +2147483647</td>
<td>-2^31^ ~ +2^31^-1</td>
</tr>
<tr>
<td>无符号长整型</td>
<td>unsigned long [int]</td>
<td>4</td>
<td>0 ~ 4294967295</td>
<td>0 ~ 2^32^-1</td>
</tr>
<tr>
<td>长长整型</td>
<td>long long [int]</td>
<td>8</td>
<td>-9223372036854775808 ~ +92…807</td>
<td>-2^63^ ~ +2^63^-1</td>
</tr>
<tr>
<td>无符号…</td>
<td>unsigned long long [int]</td>
<td>8</td>
<td>0 ~ 18446744073709551616</td>
<td>0 ~ 2^64^-1</td>
</tr>
<tr>
<td>字符型</td>
<td>[signed] char</td>
<td>1</td>
<td>-128 ~ +127</td>
<td>-2^7^ ~ +2^7^-1</td>
</tr>
<tr>
<td>无符号字符型</td>
<td>unsigned char</td>
<td>1</td>
<td>0 ~ 255</td>
<td>0 ~ 2^8^-1</td>
</tr>
<tr>
<td>单精度型</td>
<td>float</td>
<td>4</td>
<td>-3.4×10^38^ ~ +3.4×10^38^</td>
<td></td>
</tr>
<tr>
<td>双精度型</td>
<td>double</td>
<td>8</td>
<td>-1.7×10^308^ ~ +1.7×10^308^</td>
<td></td>
</tr>
<tr>
<td>长双精度型</td>
<td>long double</td>
<td>8</td>
<td>-1.7×10^308^ ~ +1.7×10^308^</td>
<td></td>
</tr>
</tbody></table>
<blockquote>
<p>（1）求字节数：</p>
<p>​		sizeof(   )</p>
<p>（2）头文件</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;climits&gt;</span>  <span class="comment">//头文件中有预置定义</span></span></span><br><span class="line">cout &lt;&lt; INT_MIN &lt;&lt; endl;</span><br></pre></td></tr></table></figure>

<p>（3）浮点数有 有效位数 的限定，可能存在一定的误差</p>
</blockquote>
<h4 id="三、常量"><a href="#三、常量" class="headerlink" title="三、常量"></a>三、常量</h4><p>cout &lt;&lt; typeid(123LU).name() &lt;&lt; endl;</p>
<p><strong>1、整型常量</strong></p>
<ul>
<li>4种表示方法</li>
</ul>
<p>二进制：0b + 0~1</p>
<p>八进制：0 + 0~7</p>
<p>十进制：正常</p>
<p>十六进制：0x&#x2F;0X + 0<del>9, a</del>f, A~F</p>
<ul>
<li>缺省为int 型，其他可加后缀</li>
</ul>
<p>123</p>
<p>123L  123l</p>
<p>123U  123u</p>
<p>123UL  123ul  123LU  123lu</p>
<p><strong>2、浮点型常量</strong></p>
<ul>
<li>仅可用十进制，但有 2 种形式<ul>
<li>十进制数（带小数点的数字）</li>
<li>指数形式（科学计数法）</li>
</ul>
</li>
<li>e 前 e 后<ul>
<li>e 前：尾数部分，必须有数</li>
<li>e 后：指数部分，必须整数</li>
</ul>
</li>
</ul>
<p>​		可：1.23e4   1.23e-4   -1.23e-4</p>
<p>​		不可：e4  1.23e4.5</p>
<ul>
<li><p>浮点数在内存中的存储分三部分：符号位、指数部分、尾数部分</p>
<ul>
<li><p>float 单精度：</p>
<p>31：0&#x2F;1 符号位</p>
<p>23~30：8 bit 指数</p>
<p>0~22：23 bit 尾数</p>
</li>
<li><p>double 双精度：</p>
<p>63：0&#x2F;1 符号位</p>
<p>52~62：11 bit 指数</p>
<p>0~51：52 bit 尾数</p>
</li>
</ul>
<img src="https://pic4.zhimg.com/80/v2-e319c25ffdd4b40f34096dde45ced77b_720w.webp" alt="img" style="zoom:80%;" />
</li>
<li><p>浮点数的存储遵从 <strong>IEEE 754</strong> 规范</p>
</li>
<li><p>浮点数有<strong>指定有效位数（float：6位，double：15位）</strong></p>
<ul>
<li><p>超出有效位数则舍去（四舍五入），因此会产生误差</p>
<p>常量1：123456.789012345<strong>6</strong>e5</p>
<p>常量2：123456.789012345<strong>7</strong>e5</p>
<p>上述两个常量在内存中存储都是0.123456789012346e11</p>
<p>1.0 &#x2F; 3 * 3 &#x3D; ?</p>
</li>
</ul>
</li>
<li><p>浮点常量缺省为double 型，如需表示为float 型，可加后缀 f&#x2F;F</p>
<ul>
<li>1.23	：double 型	8 字节</li>
<li>1.23F  ：float 型        4 字节</li>
<li>可用 sizeof(1.23) 或 typeif(1.23).name() 验证</li>
</ul>
</li>
</ul>
<p><strong>3、字符常量</strong></p>
<ul>
<li><p>ASCII 码占用 1 字节，共可表示 256 个字符</p>
<p>0xxxxxxx	：基本ASCII 码	128 个（0~127）</p>
<p>1xxxxxxx	：扩展ASCII 码	128 个（128~255）</p>
</li>
<li><p>基本ASCII 码分为“图形字符”和”控制字符”</p>
<p>0~32、127	：控制字符，34个</p>
<p>33~126		  ：图形字符，94个</p>
</li>
<li><p>几个基本的ASCII 码值</p>
<table>
<thead>
<tr>
<th>空格</th>
<th>数字0</th>
<th>字母A</th>
<th>字母a</th>
</tr>
</thead>
<tbody><tr>
<td>32</td>
<td>48</td>
<td>65</td>
<td>97</td>
</tr>
<tr>
<td>0x20</td>
<td>0x30</td>
<td>0x41</td>
<td>0x61</td>
</tr>
</tbody></table>
</li>
<li><p>汉字表示</p>
<p>GBK	：2字节</p>
</li>
<li><p>输出表示方法</p>
<ul>
<li><p>一般表示’     ‘</p>
<p>可放空格、大多可见图形字符</p>
</li>
<li><p>转义符表示’\   ‘</p>
<p>放字符、八进制、十六进制数</p>
<p>八进制：’\ddd’        （三位）</p>
<p>十六进制：’\xhh’     （两位，x 必须小写）</p>
</li>
</ul>
</li>
<li><p>一个字符常量多种表达形式</p>
<ul>
<li><p>A</p>
<p>‘A’	‘\101’	‘\x41’</p>
</li>
<li><p>ESC（ASCII &#x3D; 27）</p>
<p>‘\33’	‘\033’	‘\x16’	‘\x1B’</p>
</li>
<li><p>换行（ASCII &#x3D; 10）</p>
<p>‘\n’	‘\12’	‘\012’	‘\xA’	‘\xa’	‘\x0A’	‘\x0a’</p>
</li>
<li><p>双引号（ASCII &#x3D; 34）</p>
<p>‘ \“ ‘	‘\42’	‘\042’	‘\x22’</p>
</li>
</ul>
</li>
<li><p><strong>‘0’ 与 ‘\0’的区别</strong></p>
<ul>
<li>‘0’	：ASCII &#x3D; 48	‘\60’	‘\060’	‘\x30’</li>
<li>‘\0’   ：ASCII &#x3D; 0      ‘\00’  ‘\000’  ‘\x0’  ‘\x00’</li>
</ul>
</li>
<li><p>控制字符中，除空格外，都不能直接表示，\  ‘  “  等特殊字符也不能直接表示</p>
</li>
<li><p>C&#x2F;C++ 严格区分字符、字符串，不可用’ 汉’</p>
<ul>
<li>单引号：字符</li>
<li>双引号：字符串</li>
</ul>
</li>
</ul>
<p><strong>4、字符串常量</strong></p>
<ul>
<li>连续多个字符组成的字符序列<ul>
<li>“abc123*#”</li>
<li>“\x61\x62\x63\061\62\x2a\043”</li>
<li>“\r\n\t \ \ A \ \ t \x1b \ “ \1234\xft\x2f\33”</li>
</ul>
</li>
<li>字符串常量方式可表示汉字”同济”</li>
<li>字符串常量在内存中的存放：每个字符的ASCII 码 + 字符串结束标志’\0’</li>
<li>数字0，ASCII &#x3D; 48；尾零’\0’，ASCII &#x3D; 0</li>
<li>区别：<ul>
<li>空字符串长度为0，但有尾零’\0’存在</li>
<li>‘A’字符常量，内存占 1 字节</li>
<li>“A”字符串常量，内存占 2 字节</li>
</ul>
</li>
</ul>
<p><strong>5、符号常量</strong></p>
<ul>
<li><p>用一个标识符代表的常量</p>
<p>#define  pi  3.14159</p>
</li>
<li><p>优点：含义清晰，修改方便</p>
</li>
</ul>
<h4 id="四、变量"><a href="#四、变量" class="headerlink" title="四、变量"></a>四、变量</h4><ul>
<li><p>标识符：用来标识变量名、符号常量名、函数名、数组名、结构体名、类名等的有效字符序列，称为标识符。</p>
<p><strong>由字母或下划线开头</strong>，由字母、数字、下划线组成</p>
<p>标识符区分大小写（大小写敏感）</p>
<p>长度 &lt;&#x3D; 32</p>
</li>
<li><p>变量</p>
<p>同级不能同名</p>
<p>不能与关键字（int &#x2F; float 等）同名</p>
<p>VS2022允许使用中文做变量名，通用性差，不建议</p>
<p>C++11标准支持auto自动定义类型，由初值决定类型，易错，不建议</p>
<p><strong>多个变量赋同一初值，要分开进行</strong></p>
</li>
</ul>
<p><strong>1、整型变量</strong></p>
<ul>
<li><p><strong>数据的溢出在C++中不认为是错误</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">short</span> a=<span class="number">32767</span>, b=a+<span class="number">1</span>;	<span class="comment">//b得到为-32768</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>赋值：<strong>短 &#x3D;&gt; 长：低位 赋值，高位 填充符号位（短为signed）&#x2F; 填充0（短为unsigned）</strong></p>
</li>
<li><p>赋值：<strong>长 &#x3D;&gt; 短：低位 赋值，高位 丢弃</strong></p>
</li>
</ul>
<p><strong>2、浮点型变量</strong></p>
<ul>
<li><p><strong>float 赋值给 double 一定正确</strong></p>
</li>
<li><p><strong>double 赋值给 float 不一定正确，且不同于整型的高位丢弃</strong></p>
<p>（VS2022会有inf（infinity 无穷）的形式，有warning）</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> d = <span class="number">1.23456e38</span>;	<span class="comment">//d    1.23456e+38</span></span><br><span class="line"><span class="type">float</span> f1 = d;			<span class="comment">//f1   1.23456e+38</span></span><br><span class="line"><span class="type">float</span> f2 = d * <span class="number">10</span>;		<span class="comment">//f2   inf</span></span><br></pre></td></tr></table></figure>

<p><strong>3、字符型变量</strong></p>
<ul>
<li>注意变量与常量的区别</li>
<li>与整数的互通性：可当作1字节的整数参与运算（signed、unsigned）</li>
</ul>
<p><strong>4、字符串型变量</strong></p>
<ul>
<li>C++无</li>
<li>可用一维字符数组来表示字符串变量</li>
</ul>
<p><strong>5、常变量</strong></p>
<ul>
<li><p>在程序执行过程中值不能改变的变量</p>
</li>
<li><p>const  数据类型  变量名  &#x3D;  初值;</p>
</li>
<li><p>常变量有分号，符号常量不用带分号</p>
</li>
<li><p>必须在定义时赋初值，且执行过程中不能再次赋值，否则编译错误</p>
</li>
<li><p>常变量与符号常量使用方法相似，但有本质区别</p>
<p>（推荐使用常变量）</p>
<p>常变量：有类型、有空间、有初始值（除了值不可变，其余同变量）</p>
<p>符号常量：一个标识符替代一串字符</p>
</li>
</ul>
<h4 id="五、运算符"><a href="#五、运算符" class="headerlink" title="五、运算符"></a>五、运算符</h4><ul>
<li><p>参与运算的操作数的个数不同，有：一元、二元、三元运算符（单目、双目、三目运算符）</p>
</li>
<li><p>唯一的三目运算符是第15组的” ：？“</p>
</li>
<li><p>优先级：<strong>优先级越小，意为高，先运算</strong>。最高为1，最低为18。</p>
</li>
<li><p>结合性：同级混合运算的结合方向。<strong>右结合</strong>意为<strong>从右到左</strong>进行运算。</p>
</li>
</ul>
<p><strong>1、算术运算符与算数表达式</strong></p>
<ul>
<li><p>注意：整数相除，得到整数，不会是小数</p>
<p>V1 &#x3D; 1 &#x2F; 3   &#x3D;&#x3D;&gt;  0</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">+ -			<span class="comment">//5级</span></span><br><span class="line">* / %		<span class="comment">//6级</span></span><br><span class="line">均是双目，均是左结合</span><br></pre></td></tr></table></figure>

<p><strong>转换的优先级与整型提升</strong></p>
<p>整型提升表示必定的转换，参与运算的最小数据类型是int</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">double</span>			<span class="comment">//高</span></span><br><span class="line"><span class="type">double</span></span><br><span class="line"><span class="type">float</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span></span><br><span class="line"><span class="type">long</span>				<span class="comment">//低</span></span><br><span class="line"><span class="type">unsigned</span> [<span class="type">int</span>]		<span class="comment">//整型提升</span></span><br><span class="line"><span class="type">int</span>  &lt;--------------<span class="type">char</span>/u_char/<span class="type">short</span>/u_short</span><br></pre></td></tr></table></figure>

<ul>
<li><p>这种类型转换，由系统隐式进行</p>
</li>
<li><p>类型转换时，不是一次全部转换成最高级，而是依次转换</p>
<p>（正是依次转换，才使得 V1 &#x3D; 1 &#x2F; 3 * pi 得到0）</p>
</li>
<li><p>类型转换不完全如此，这是简易规则</p>
</li>
</ul>
<p><strong>2、自增、自减运算符</strong></p>
<p><strong>前缀</strong>（优先级3，右结合）</p>
<p>++ 变量名		– 变量名		&#x3D;&#x3D;》 先自增、减1，后使用</p>
<p><strong>后缀</strong>（优先级2，左结合）</p>
<p>变量名 ++		变量名 –		&#x3D;&#x3D;》先使用，后自增、减1</p>
<ul>
<li>不能对常量、表达式使用</li>
<li>不主张对同一个变量的多个++–出现在同一个表达式中（不同编译器处理可能不同）</li>
</ul>
<p><strong>3、强制类型转换</strong></p>
<ul>
<li>必须在程序中显式使用</li>
<li>强制类型转换后，原变量的值、类型不变（只是要转换后存在别的变量里）</li>
</ul>
<table>
<thead>
<tr>
<th>（类型名）（表达式）</th>
<th>类型名（表达式）</th>
<th>static_cast&lt;类型名&gt;（表达式）</th>
</tr>
</thead>
<tbody><tr>
<td>(int)(a+b)</td>
<td>int(a+b)</td>
<td>static_cast<int>(a+b)</td>
</tr>
<tr>
<td>(int)a</td>
<td>int(a)</td>
<td>static_cast<int>(a+b)</td>
</tr>
<tr>
<td>C方式</td>
<td>C++方式</td>
<td>C++方式</td>
</tr>
</tbody></table>
<p><strong>4、赋值运算符与赋值表达式</strong></p>
<ul>
<li><p>赋值表达式左边必须是变量名</p>
</li>
<li><p>若赋值表达式左右类型不同，以左值为基准进行转换（会报错或warning）</p>
</li>
<li><p><strong>复合的赋值运算符</strong>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">a += b;			<span class="comment">//a=a+b;</span></span><br><span class="line">a *= b + <span class="number">1</span>;		<span class="comment">//a=a*(b+1);</span></span><br><span class="line"></span><br><span class="line">+=  -=  *=  /=  %=	<span class="comment">//优先级均16</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>赋值表达式的值和变量的值相等</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a=b=c=<span class="number">5</span>;		<span class="comment">//×</span></span><br><span class="line"><span class="type">int</span> a=<span class="number">5</span>,b=<span class="number">5</span>,c=<span class="number">5</span>;	<span class="comment">//√</span></span><br><span class="line"><span class="type">int</span> a,b,c;</span><br><span class="line">a=b=c=<span class="number">5</span>;			<span class="comment">//√</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>赋值表达式的值可以参与其他表达式的运算</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">12</span>;</span><br><span class="line">a+=a-=a*a;		<span class="comment">//得到a=-264</span></span><br><span class="line">       <span class="number">1</span></span><br><span class="line">    <span class="number">2</span></span><br><span class="line"> <span class="number">3</span></span><br><span class="line">(a=<span class="number">3</span>*<span class="number">5</span>)=<span class="number">4</span>*<span class="number">3</span>;	<span class="comment">//√</span></span><br><span class="line">a=<span class="number">3</span>*<span class="number">5</span>=<span class="number">4</span>*<span class="number">3</span>;		<span class="comment">//×</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>5、逗号表达式</strong></p>
<ul>
<li>C++中级别最低的运算符（又称顺序求值运算符）</li>
<li>整个逗号表达式的值为最后一个表达式的值</li>
</ul>
<p><strong>C++中任意类型的表达式均有值</strong></p>
<p>算术表达式</p>
<p>赋值表达式、复合赋值表达式</p>
<p>逗号表达式</p>
<p><strong>表达式类型由最后一个运算决定</strong></p>
<h4 id="六、C-输入输出格式化控制"><a href="#六、C-输入输出格式化控制" class="headerlink" title="六、C++ 输入输出格式化控制"></a>六、C++ 输入输出格式化控制</h4><p>​	<strong>头文件：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>格式控制符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>oct</td>
<td>设置整数为8进制</td>
</tr>
<tr>
<td>dec</td>
<td>设置整数为10进制</td>
</tr>
<tr>
<td>hex</td>
<td>设置整数为16进制</td>
</tr>
<tr>
<td>setbase(n)</td>
<td>设置整数为n进制(n&#x3D;8,10,16)</td>
</tr>
<tr>
<td>setfill(‘c’)</td>
<td>设置填充字符，c可以是字符常量或字符变量</td>
</tr>
<tr>
<td>setprecision(n)</td>
<td>设置实数的精度为n位。在以一般十进制形式输出时，n代表有效数字。在以fixed(固定小数位)形式和scientific(指数)形式输出时，n为小数位数</td>
</tr>
<tr>
<td>setw(n)</td>
<td>设置字段宽度为n</td>
</tr>
<tr>
<td>setiosflags(ios::fixed)</td>
<td>设置浮点数以固定的小数位数显示</td>
</tr>
<tr>
<td>setiosflags(ios::scientific)</td>
<td>设置浮点数以科学计数法（即指数形式）显示</td>
</tr>
<tr>
<td>setiosflags(ios::left)</td>
<td>输出数据左对齐</td>
</tr>
<tr>
<td>setiosflags(ios::right)</td>
<td>输出数据右对齐</td>
</tr>
<tr>
<td>setiosflags(ios::skipws)</td>
<td>忽略前导的空格</td>
</tr>
<tr>
<td>setiosflags(ios::uppercase)</td>
<td>在以科学计数法输出E和十六进制输出字母X时，以大写表示</td>
</tr>
<tr>
<td>setiosflags(ios::showpos)</td>
<td>输出正数时，给出“+”号</td>
</tr>
<tr>
<td>resetiosflags( * )</td>
<td>终止已设置的输出格式状态，括号内为具体内容(本处用 * 替代)</td>
</tr>
</tbody></table>
<blockquote>
<p>（1）只有十进制有负数形式</p>
<p>（2）cin 读入char型时，空格是否有效由ios::skipws 决定</p>
<p>（3）ctrl + C 是结束程序</p>
<p>​		  ctrl + Z 只有在一行的最开始才有效</p>
</blockquote>
<h4 id="七、C-方式输入输出格式化控制"><a href="#七、C-方式输入输出格式化控制" class="headerlink" title="七、C 方式输入输出格式化控制"></a>七、C 方式输入输出格式化控制</h4><p><strong>1、printf(“%d”,a);</strong></p>
<p>printf所用的格式字符的种类：</p>
<table>
<thead>
<tr>
<th>格式字符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>d,</strong> <strong>i</strong></td>
<td>带符号的十进制形式整数(正数不带+)</td>
</tr>
<tr>
<td><strong>o</strong></td>
<td>八进制无符号形式输出整数(不带前导0)</td>
</tr>
<tr>
<td><strong>x, X</strong></td>
<td>十六进制无符号形式输出整数(不带前导0x)</td>
</tr>
<tr>
<td><strong>u</strong></td>
<td>十进制无符号形式输出整数</td>
</tr>
<tr>
<td><strong>c</strong></td>
<td>以字符形式输出(一个字符)</td>
</tr>
<tr>
<td><strong>s</strong></td>
<td>输出字符串</td>
</tr>
<tr>
<td><strong>f</strong></td>
<td>以小数形式输出浮点数</td>
</tr>
<tr>
<td><strong>e, E</strong></td>
<td>以指数形式输出浮点数</td>
</tr>
<tr>
<td><strong>g, G</strong></td>
<td>从f，e中选择宽度较短的形式输出浮点数</td>
</tr>
</tbody></table>
<p>printf所用的附加格式字符的种类：</p>
<table>
<thead>
<tr>
<th>附加格式字符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>字母l  字母h</td>
<td>表示长整型整数，用于d,o,x,u前表示短整型整数，用于d,o,x,u前</td>
</tr>
<tr>
<td>正整数m</td>
<td>表示输出数据的宽度</td>
</tr>
<tr>
<td>正整数.n</td>
<td>对浮点数，表示n位小数对字符串，表示前n个字符</td>
</tr>
<tr>
<td><strong>-</strong></td>
<td>输出左对齐</td>
</tr>
</tbody></table>
<p><strong>2、scanf(“%d”,&amp;a);</strong></p>
<p>&amp;表示取地址</p>
<p>&amp;不能跟表达式&#x2F;常量(理由与&#x3D;、++、–等相同)</p>
<p>scanf所用的格式字符的种类：</p>
<table>
<thead>
<tr>
<th>格式字符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>d,</strong> <strong>i</strong></td>
<td>输入带符号的十进制形式整数</td>
</tr>
<tr>
<td><strong>o</strong></td>
<td>输入八进制无符号形式整数(不带前导0)</td>
</tr>
<tr>
<td><strong>x, X</strong></td>
<td>输入十六进制无符号形式整数(不带前导0x)</td>
</tr>
<tr>
<td><strong>u</strong></td>
<td>输入十进制无符号形式整数</td>
</tr>
<tr>
<td><strong>c</strong></td>
<td>输入单个字符</td>
</tr>
<tr>
<td><strong>s</strong></td>
<td>输入字符串</td>
</tr>
<tr>
<td><strong>f</strong></td>
<td>输入小数&#x2F;指数形式的浮点数</td>
</tr>
<tr>
<td><strong>e,E,g,G</strong></td>
<td>同f</td>
</tr>
</tbody></table>
<p>scanf所用的附加格式字符的种类：</p>
<table>
<thead>
<tr>
<th>附加格式字符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>字母l</strong></td>
<td>输入长整型数，用于d,o,x,u前输入double型数，用于f,e,g前</td>
</tr>
<tr>
<td><strong>h</strong></td>
<td>输入短整型数，用于d,o,x,u前</td>
</tr>
<tr>
<td><strong>正整数n</strong></td>
<td>指定输入数据所占的宽度</td>
</tr>
<tr>
<td>*****</td>
<td>本输入项不赋给相应的变量</td>
</tr>
</tbody></table>
<blockquote>
<p>特别说明：    </p>
<p>VS系列认为scanf函数是不安全的输入，因此缺省禁止使用(编译报error)，如果想继续使用，必须在源程序一开始加定义   </p>
<p>#define _CRT_SECURE_NO_WARNINGS</p>
<p>为了和其它编译器兼容，以及方便后续课程的学习，我们仍然会继续使用scanf</p>
<p>另：加 _CRT_SECURE_NO_WARNINGS 的程序在其它编译器中可正常使用</p>
<p>注：VS系列中C语言用于安全输入的函数是scanf_s，</p>
<p>使用方法同scanf，考虑到兼容性，不建议大家使用scanf_s，有兴    趣可以自行查阅有关资料</p>
</blockquote>
<h4 id="八、常用库函数"><a href="#八、常用库函数" class="headerlink" title="八、常用库函数"></a>八、常用库函数</h4><h4 id="九、字符集与ASCII字符集"><a href="#九、字符集与ASCII字符集" class="headerlink" title="九、字符集与ASCII字符集"></a>九、字符集与ASCII字符集</h4><blockquote>
<p>32-126是可显示字符</p>
<p>其余不可见，是控制字符或功能码</p>
</blockquote>
<table>
<thead>
<tr>
<th>二进制</th>
<th>十进制</th>
<th>十六进制</th>
<th>字符&#x2F;缩写</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>00000000</td>
<td>0</td>
<td>00</td>
<td>NUL (NULL)</td>
<td>空字符</td>
</tr>
<tr>
<td>00000001</td>
<td>1</td>
<td>01</td>
<td>SOH (Start Of Headling)</td>
<td>标题开始</td>
</tr>
<tr>
<td>00000010</td>
<td>2</td>
<td>02</td>
<td>STX (Start Of Text)</td>
<td>正文开始</td>
</tr>
<tr>
<td>00000011</td>
<td>3</td>
<td>03</td>
<td>ETX (End Of Text)</td>
<td>正文结束</td>
</tr>
<tr>
<td>00000100</td>
<td>4</td>
<td>04</td>
<td>EOT (End Of Transmission)</td>
<td>传输结束</td>
</tr>
<tr>
<td>00000101</td>
<td>5</td>
<td>05</td>
<td>ENQ (Enquiry)</td>
<td>请求</td>
</tr>
<tr>
<td>00000110</td>
<td>6</td>
<td>06</td>
<td>ACK (Acknowledge)</td>
<td>回应&#x2F;响应&#x2F;收到通知</td>
</tr>
<tr>
<td>00000111</td>
<td>7</td>
<td>07</td>
<td>BEL (Bell)</td>
<td>响铃</td>
</tr>
<tr>
<td>00001000</td>
<td>8</td>
<td>08</td>
<td>BS (Backspace)</td>
<td>退格</td>
</tr>
<tr>
<td>00001001</td>
<td>9</td>
<td>09</td>
<td>HT (Horizontal Tab)</td>
<td>水平制表符</td>
</tr>
<tr>
<td>00001010</td>
<td>10</td>
<td>0A</td>
<td>LF&#x2F;NL(Line Feed&#x2F;New Line)</td>
<td>换行键</td>
</tr>
<tr>
<td>00001011</td>
<td>11</td>
<td>0B</td>
<td>VT (Vertical Tab)</td>
<td>垂直制表符</td>
</tr>
<tr>
<td>00001100</td>
<td>12</td>
<td>0C</td>
<td>FF&#x2F;NP (Form Feed&#x2F;New Page)</td>
<td>换页键</td>
</tr>
<tr>
<td>00001101</td>
<td>13</td>
<td>0D</td>
<td>CR (Carriage Return)</td>
<td>回车键</td>
</tr>
<tr>
<td>00001110</td>
<td>14</td>
<td>0E</td>
<td>SO (Shift Out)</td>
<td>不用切换</td>
</tr>
<tr>
<td>00001111</td>
<td>15</td>
<td>0F</td>
<td>SI (Shift In)</td>
<td>启用切换</td>
</tr>
<tr>
<td>00010000</td>
<td>16</td>
<td>10</td>
<td>DLE (Data Link Escape)</td>
<td>数据链路转义</td>
</tr>
<tr>
<td>00010001</td>
<td>17</td>
<td>11</td>
<td>DC1&#x2F;XON (Device Control 1&#x2F;Transmission On)</td>
<td>设备控制1&#x2F;传输开始</td>
</tr>
<tr>
<td>00010010</td>
<td>18</td>
<td>12</td>
<td>DC2 (Device Control 2)</td>
<td>设备控制2</td>
</tr>
<tr>
<td>00010011</td>
<td>19</td>
<td>13</td>
<td>DC3&#x2F;XOFF (Device Control 3&#x2F;Transmission Off)</td>
<td>设备控制3&#x2F;传输中断</td>
</tr>
<tr>
<td>00010100</td>
<td>20</td>
<td>14</td>
<td>DC4 (Device Control 4)</td>
<td>设备控制4</td>
</tr>
<tr>
<td>00010101</td>
<td>21</td>
<td>15</td>
<td>NAK (Negative Acknowledge)</td>
<td>无响应&#x2F;非正常响应&#x2F;拒绝接收</td>
</tr>
<tr>
<td>00010110</td>
<td>22</td>
<td>16</td>
<td>SYN (Synchronous Idle)</td>
<td>同步空闲</td>
</tr>
<tr>
<td>00010111</td>
<td>23</td>
<td>17</td>
<td>ETB (End of Transmission Block)</td>
<td>传输块结束&#x2F;块传输终止</td>
</tr>
<tr>
<td>00011000</td>
<td>24</td>
<td>18</td>
<td>CAN (Cancel)</td>
<td>取消</td>
</tr>
<tr>
<td>00011001</td>
<td>25</td>
<td>19</td>
<td>EM (End of Medium)</td>
<td>已到介质末端&#x2F;介质存储已满&#x2F;介质中断</td>
</tr>
<tr>
<td>00011010</td>
<td>26</td>
<td>1A</td>
<td>SUB (Substitute)</td>
<td>替补&#x2F;替换</td>
</tr>
<tr>
<td>00011011</td>
<td>27</td>
<td>1B</td>
<td>ESC (Escape)</td>
<td>逃离&#x2F;取消</td>
</tr>
<tr>
<td>00011100</td>
<td>28</td>
<td>1C</td>
<td>FS (File Separator)</td>
<td>文件分割符</td>
</tr>
<tr>
<td>00011101</td>
<td>29</td>
<td>1D</td>
<td>GS (Group Separator)</td>
<td>组分隔符&#x2F;分组符</td>
</tr>
<tr>
<td>00011110</td>
<td>30</td>
<td>1E</td>
<td>RS (Record Separator)</td>
<td>记录分离符</td>
</tr>
<tr>
<td>00011111</td>
<td>31</td>
<td>1F</td>
<td>US (Unit Separator)</td>
<td>单元分隔符</td>
</tr>
<tr>
<td>00100000</td>
<td>32</td>
<td>20</td>
<td>(Space)</td>
<td>空格</td>
</tr>
<tr>
<td>00100001</td>
<td>33</td>
<td>21</td>
<td>!</td>
<td></td>
</tr>
<tr>
<td>00100010</td>
<td>34</td>
<td>22</td>
<td>“</td>
<td></td>
</tr>
<tr>
<td>00100011</td>
<td>35</td>
<td>23</td>
<td>#</td>
<td></td>
</tr>
<tr>
<td>00100100</td>
<td>36</td>
<td>24</td>
<td>$</td>
<td></td>
</tr>
<tr>
<td>00100101</td>
<td>37</td>
<td>25</td>
<td>%</td>
<td></td>
</tr>
<tr>
<td>00100110</td>
<td>38</td>
<td>26</td>
<td>&amp;</td>
<td></td>
</tr>
<tr>
<td>00100111</td>
<td>39</td>
<td>27</td>
<td>‘</td>
<td></td>
</tr>
<tr>
<td>00101000</td>
<td>40</td>
<td>28</td>
<td>(</td>
<td></td>
</tr>
<tr>
<td>00101001</td>
<td>41</td>
<td>29</td>
<td>)</td>
<td></td>
</tr>
<tr>
<td>00101010</td>
<td>42</td>
<td>2A</td>
<td>*</td>
<td></td>
</tr>
<tr>
<td>00101011</td>
<td>43</td>
<td>2B</td>
<td>+</td>
<td></td>
</tr>
<tr>
<td>00101100</td>
<td>44</td>
<td>2C</td>
<td>,</td>
<td></td>
</tr>
<tr>
<td>00101101</td>
<td>45</td>
<td>2D</td>
<td>-</td>
<td></td>
</tr>
<tr>
<td>00101110</td>
<td>46</td>
<td>2E</td>
<td>.</td>
<td></td>
</tr>
<tr>
<td>00101111</td>
<td>47</td>
<td>2F</td>
<td>&#x2F;</td>
<td></td>
</tr>
<tr>
<td>00110000</td>
<td>48</td>
<td>30</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td>00110001</td>
<td>49</td>
<td>31</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>00110010</td>
<td>50</td>
<td>32</td>
<td>2</td>
<td></td>
</tr>
<tr>
<td>00110011</td>
<td>51</td>
<td>33</td>
<td>3</td>
<td></td>
</tr>
<tr>
<td>00110100</td>
<td>52</td>
<td>34</td>
<td>4</td>
<td></td>
</tr>
<tr>
<td>00110101</td>
<td>53</td>
<td>35</td>
<td>5</td>
<td></td>
</tr>
<tr>
<td>00110110</td>
<td>54</td>
<td>36</td>
<td>6</td>
<td></td>
</tr>
<tr>
<td>00110111</td>
<td>55</td>
<td>37</td>
<td>7</td>
<td></td>
</tr>
<tr>
<td>00111000</td>
<td>56</td>
<td>38</td>
<td>8</td>
<td></td>
</tr>
<tr>
<td>00111001</td>
<td>57</td>
<td>39</td>
<td>9</td>
<td></td>
</tr>
<tr>
<td>00111010</td>
<td>58</td>
<td>3A</td>
<td>:</td>
<td></td>
</tr>
<tr>
<td>00111011</td>
<td>59</td>
<td>3B</td>
<td>;</td>
<td></td>
</tr>
<tr>
<td>00111100</td>
<td>60</td>
<td>3C</td>
<td>&lt;</td>
<td></td>
</tr>
<tr>
<td>00111101</td>
<td>61</td>
<td>3D</td>
<td>&#x3D;</td>
<td></td>
</tr>
<tr>
<td>00111110</td>
<td>62</td>
<td>3E</td>
<td>&gt;</td>
<td></td>
</tr>
<tr>
<td>00111111</td>
<td>63</td>
<td>3F</td>
<td>?</td>
<td></td>
</tr>
<tr>
<td>01000000</td>
<td>64</td>
<td>40</td>
<td>@</td>
<td></td>
</tr>
<tr>
<td>01000001</td>
<td>65</td>
<td>41</td>
<td>A</td>
<td></td>
</tr>
<tr>
<td>01000010</td>
<td>66</td>
<td>42</td>
<td>B</td>
<td></td>
</tr>
<tr>
<td>01000011</td>
<td>67</td>
<td>43</td>
<td>C</td>
<td></td>
</tr>
<tr>
<td>01000100</td>
<td>68</td>
<td>44</td>
<td>D</td>
<td></td>
</tr>
<tr>
<td>01000101</td>
<td>69</td>
<td>45</td>
<td>E</td>
<td></td>
</tr>
<tr>
<td>01000110</td>
<td>70</td>
<td>46</td>
<td>F</td>
<td></td>
</tr>
<tr>
<td>01000111</td>
<td>71</td>
<td>47</td>
<td>G</td>
<td></td>
</tr>
<tr>
<td>01001000</td>
<td>72</td>
<td>48</td>
<td>H</td>
<td></td>
</tr>
<tr>
<td>01001001</td>
<td>73</td>
<td>49</td>
<td>I</td>
<td></td>
</tr>
<tr>
<td>01001010</td>
<td>74</td>
<td>4A</td>
<td>J</td>
<td></td>
</tr>
<tr>
<td>01001011</td>
<td>75</td>
<td>4B</td>
<td>K</td>
<td></td>
</tr>
<tr>
<td>01001100</td>
<td>76</td>
<td>4C</td>
<td>L</td>
<td></td>
</tr>
<tr>
<td>01001101</td>
<td>77</td>
<td>4D</td>
<td>M</td>
<td></td>
</tr>
<tr>
<td>01001110</td>
<td>78</td>
<td>4E</td>
<td>N</td>
<td></td>
</tr>
<tr>
<td>01001111</td>
<td>79</td>
<td>4F</td>
<td>O</td>
<td></td>
</tr>
<tr>
<td>01010000</td>
<td>80</td>
<td>50</td>
<td>P</td>
<td></td>
</tr>
<tr>
<td>01010001</td>
<td>81</td>
<td>51</td>
<td>Q</td>
<td></td>
</tr>
<tr>
<td>01010010</td>
<td>82</td>
<td>52</td>
<td>R</td>
<td></td>
</tr>
<tr>
<td>01010011</td>
<td>83</td>
<td>53</td>
<td>S</td>
<td></td>
</tr>
<tr>
<td>01010100</td>
<td>84</td>
<td>54</td>
<td>T</td>
<td></td>
</tr>
<tr>
<td>01010101</td>
<td>85</td>
<td>55</td>
<td>U</td>
<td></td>
</tr>
<tr>
<td>01010110</td>
<td>86</td>
<td>56</td>
<td>V</td>
<td></td>
</tr>
<tr>
<td>01010111</td>
<td>87</td>
<td>57</td>
<td>W</td>
<td></td>
</tr>
<tr>
<td>01011000</td>
<td>88</td>
<td>58</td>
<td>X</td>
<td></td>
</tr>
<tr>
<td>01011001</td>
<td>89</td>
<td>59</td>
<td>Y</td>
<td></td>
</tr>
<tr>
<td>01011010</td>
<td>90</td>
<td>5A</td>
<td>Z</td>
<td></td>
</tr>
<tr>
<td>01011011</td>
<td>91</td>
<td>5B</td>
<td>[</td>
<td></td>
</tr>
<tr>
<td>01011100</td>
<td>92</td>
<td>5C</td>
<td>\</td>
<td></td>
</tr>
<tr>
<td>01011101</td>
<td>93</td>
<td>5D</td>
<td>]</td>
<td></td>
</tr>
<tr>
<td>01011110</td>
<td>94</td>
<td>5E</td>
<td>^</td>
<td></td>
</tr>
<tr>
<td>01011111</td>
<td>95</td>
<td>5F</td>
<td>_</td>
<td></td>
</tr>
<tr>
<td>01100000</td>
<td>96</td>
<td>60</td>
<td>&#96;</td>
<td></td>
</tr>
<tr>
<td>01100001</td>
<td>97</td>
<td>61</td>
<td>a</td>
<td></td>
</tr>
<tr>
<td>01100010</td>
<td>98</td>
<td>62</td>
<td>b</td>
<td></td>
</tr>
<tr>
<td>01100011</td>
<td>99</td>
<td>63</td>
<td>c</td>
<td></td>
</tr>
<tr>
<td>01100100</td>
<td>100</td>
<td>64</td>
<td>d</td>
<td></td>
</tr>
<tr>
<td>01100101</td>
<td>101</td>
<td>65</td>
<td>e</td>
<td></td>
</tr>
<tr>
<td>01100110</td>
<td>102</td>
<td>66</td>
<td>f</td>
<td></td>
</tr>
<tr>
<td>01100111</td>
<td>103</td>
<td>67</td>
<td>g</td>
<td></td>
</tr>
<tr>
<td>01101000</td>
<td>104</td>
<td>68</td>
<td>h</td>
<td></td>
</tr>
<tr>
<td>01101001</td>
<td>105</td>
<td>69</td>
<td>i</td>
<td></td>
</tr>
<tr>
<td>01101010</td>
<td>106</td>
<td>6A</td>
<td>j</td>
<td></td>
</tr>
<tr>
<td>01101011</td>
<td>107</td>
<td>6B</td>
<td>k</td>
<td></td>
</tr>
<tr>
<td>01101100</td>
<td>108</td>
<td>6C</td>
<td>l</td>
<td></td>
</tr>
<tr>
<td>01101101</td>
<td>109</td>
<td>6D</td>
<td>m</td>
<td></td>
</tr>
<tr>
<td>01101110</td>
<td>110</td>
<td>6E</td>
<td>n</td>
<td></td>
</tr>
<tr>
<td>01101111</td>
<td>111</td>
<td>6F</td>
<td>o</td>
<td></td>
</tr>
<tr>
<td>01110000</td>
<td>112</td>
<td>70</td>
<td>p</td>
<td></td>
</tr>
<tr>
<td>01110001</td>
<td>113</td>
<td>71</td>
<td>q</td>
<td></td>
</tr>
<tr>
<td>01110010</td>
<td>114</td>
<td>72</td>
<td>r</td>
<td></td>
</tr>
<tr>
<td>01110011</td>
<td>115</td>
<td>73</td>
<td>s</td>
<td></td>
</tr>
<tr>
<td>01110100</td>
<td>116</td>
<td>74</td>
<td>t</td>
<td></td>
</tr>
<tr>
<td>01110101</td>
<td>117</td>
<td>75</td>
<td>u</td>
<td></td>
</tr>
<tr>
<td>01110110</td>
<td>118</td>
<td>76</td>
<td>v</td>
<td></td>
</tr>
<tr>
<td>01110111</td>
<td>119</td>
<td>77</td>
<td>w</td>
<td></td>
</tr>
<tr>
<td>01111000</td>
<td>120</td>
<td>78</td>
<td>x</td>
<td></td>
</tr>
<tr>
<td>01111001</td>
<td>121</td>
<td>79</td>
<td>y</td>
<td></td>
</tr>
<tr>
<td>01111010</td>
<td>122</td>
<td>7A</td>
<td>z</td>
<td></td>
</tr>
<tr>
<td>01111011</td>
<td>123</td>
<td>7B</td>
<td>{</td>
<td></td>
</tr>
<tr>
<td>01111100</td>
<td>124</td>
<td>7C</td>
<td>|</td>
<td></td>
</tr>
<tr>
<td>01111101</td>
<td>125</td>
<td>7D</td>
<td>}</td>
<td></td>
</tr>
<tr>
<td>01111110</td>
<td>126</td>
<td>7E</td>
<td>~</td>
<td></td>
</tr>
<tr>
<td>01111111</td>
<td>127</td>
<td>7F</td>
<td>DEL (Delete)</td>
<td>删除</td>
</tr>
</tbody></table>
<h4 id="十、运算符优先级"><a href="#十、运算符优先级" class="headerlink" title="十、运算符优先级"></a>十、运算符优先级</h4><table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>例子</th>
<th>可重载性</th>
</tr>
</thead>
<tbody><tr>
<td><strong>第一级别</strong></td>
<td>—–</td>
<td>—–</td>
<td>—–</td>
</tr>
<tr>
<td>::</td>
<td>作用域解析符</td>
<td>Class::age &#x3D; 2;</td>
<td>不可重载</td>
</tr>
<tr>
<td><strong>第二级别</strong></td>
<td>—–</td>
<td>—–</td>
<td>—–</td>
</tr>
<tr>
<td>()</td>
<td>函数调用</td>
<td>isdigit(‘1’)</td>
<td>可重载</td>
</tr>
<tr>
<td>()</td>
<td>成员初始化</td>
<td>c_tor(int x, int y) : _x(x), _y(y*10){};</td>
<td>可重载</td>
</tr>
<tr>
<td>[]</td>
<td>数组数据获取</td>
<td>array[4] &#x3D; 2;</td>
<td>可重载</td>
</tr>
<tr>
<td>-&gt;</td>
<td>指针型成员调用</td>
<td>ptr-&gt;age &#x3D; 34;</td>
<td>可重载</td>
</tr>
<tr>
<td>.</td>
<td>对象型成员调用</td>
<td>obj.age &#x3D; 34;</td>
<td>不可重载</td>
</tr>
<tr>
<td>++</td>
<td>后自增运算符</td>
<td>for( int i &#x3D; 0; i &lt; 10; i++ ) cout</td>
<td>可重载</td>
</tr>
<tr>
<td>–</td>
<td>后自减运算符</td>
<td>for( int i &#x3D; 10; i &gt; 0; i– ) cout</td>
<td>可重载</td>
</tr>
<tr>
<td>const_cast</td>
<td>特殊属性转换</td>
<td>const_cast(type_from);</td>
<td>不可重载</td>
</tr>
<tr>
<td>dynamic_cast</td>
<td>特殊属性转换</td>
<td>dynamic_cast(type_from);</td>
<td>不可重载</td>
</tr>
<tr>
<td>static_cast</td>
<td>特殊属性转换</td>
<td>static_cast(type_from);</td>
<td>不可重载</td>
</tr>
<tr>
<td>reinterpret_cast</td>
<td>特殊属性转换</td>
<td>reinterpret_cast(type_from);</td>
<td>不可重载</td>
</tr>
<tr>
<td>typeid</td>
<td>对象类型符</td>
<td>cout « typeid(var).name();cout « typeid(type).name();</td>
<td>不可重载</td>
</tr>
<tr>
<td><strong>第三级别</strong>(具有右结合性)</td>
<td>—–</td>
<td>—–</td>
<td>—–</td>
</tr>
<tr>
<td>!</td>
<td>逻辑取反</td>
<td>if( !done ) …</td>
<td>可重载</td>
</tr>
<tr>
<td>not</td>
<td>! 的另一种表达</td>
<td>—–</td>
<td>—–</td>
</tr>
<tr>
<td>~</td>
<td>按位取反</td>
<td>flags &#x3D; ~flags;</td>
<td>可重载</td>
</tr>
<tr>
<td>compl</td>
<td>~的另一种表达</td>
<td>—–</td>
<td>—–</td>
</tr>
<tr>
<td>++</td>
<td>预自增运算符</td>
<td>for( i &#x3D; 0; i &lt; 10; ++i ) cout</td>
<td>可重载</td>
</tr>
<tr>
<td>–</td>
<td>预自减运算符</td>
<td>for( i &#x3D; 10; i &gt; 0; –i ) cout</td>
<td>可重载</td>
</tr>
<tr>
<td>-</td>
<td>负号</td>
<td>int i &#x3D; -1;</td>
<td>可重载</td>
</tr>
<tr>
<td>+</td>
<td>正号</td>
<td>int i &#x3D; +1;</td>
<td>可重载</td>
</tr>
<tr>
<td>*</td>
<td>指针取值</td>
<td>int data &#x3D; *intPtr;</td>
<td>可重载</td>
</tr>
<tr>
<td>&amp;</td>
<td>值取指针</td>
<td>int *intPtr &#x3D; &amp;data;</td>
<td>可重载</td>
</tr>
<tr>
<td>new</td>
<td>动态元素内存分配</td>
<td>long *pVar &#x3D; new long;MyClass *ptr &#x3D; new MyClass(args);</td>
<td>可重载</td>
</tr>
<tr>
<td>new []</td>
<td>动态数组内存分配</td>
<td>long *array &#x3D; new long[n];</td>
<td>可重载</td>
</tr>
<tr>
<td>delete</td>
<td>动态析构元素内存</td>
<td>delete pVar;</td>
<td>可重载</td>
</tr>
<tr>
<td>delete []</td>
<td>动态析构数组内存</td>
<td>delete [] array;</td>
<td>可重载</td>
</tr>
<tr>
<td>(type)</td>
<td>强制类型转换</td>
<td>int i &#x3D; (int) floatNum;</td>
<td>可重载</td>
</tr>
<tr>
<td>sizeof</td>
<td>返回类型内存</td>
<td>int size &#x3D; sizeof floatNum;int size &#x3D; sizeof(float);</td>
<td>不可重载</td>
</tr>
<tr>
<td><strong>第四级别</strong></td>
<td>—–</td>
<td>—–</td>
<td>—–</td>
</tr>
<tr>
<td>-&gt;*</td>
<td>类指针成员引用</td>
<td>ptr-&gt;*var &#x3D; 24;</td>
<td>可重载</td>
</tr>
<tr>
<td>.*</td>
<td>类对象成员引用</td>
<td>obj.*var &#x3D; 24;</td>
<td>不可重载</td>
</tr>
<tr>
<td><strong>第五级别</strong></td>
<td>—–</td>
<td>—–</td>
<td>—–</td>
</tr>
<tr>
<td>*</td>
<td>乘法</td>
<td>int i &#x3D; 2 * 4;</td>
<td>可重载</td>
</tr>
<tr>
<td>&#x2F;</td>
<td>除法</td>
<td>float f &#x3D; 10.0 &#x2F; 3.0;</td>
<td>可重载</td>
</tr>
<tr>
<td>%</td>
<td>取余数(模运算)</td>
<td>int rem &#x3D; 4 % 3;</td>
<td>可重载</td>
</tr>
<tr>
<td><strong>第六级别</strong></td>
<td>—–</td>
<td>—–</td>
<td>—–</td>
</tr>
<tr>
<td>+</td>
<td>加法</td>
<td>int i &#x3D; 2 + 3;</td>
<td>可重载</td>
</tr>
<tr>
<td>-</td>
<td>减法</td>
<td>int i &#x3D; 5 - 1;</td>
<td>可重载</td>
</tr>
<tr>
<td><strong>第七级别</strong></td>
<td>—–</td>
<td>—–</td>
<td>—–</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>位左移</td>
<td>int flags &#x3D; 33</td>
<td>可重载</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>位右移</td>
<td>int flags &#x3D; 33 &gt;&gt; 1;</td>
<td>可重载</td>
</tr>
<tr>
<td><strong>第八级别</strong></td>
<td>—–</td>
<td>—–</td>
<td>—–</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
<td>if( i &lt; 42 ) …</td>
<td>可重载</td>
</tr>
<tr>
<td>&lt;&#x3D;</td>
<td>小于等于</td>
<td>if( i</td>
<td>可重载</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
<td>if( i &gt; 42 ) …</td>
<td>可重载</td>
</tr>
<tr>
<td>&gt;&#x3D;</td>
<td>大于等于</td>
<td>if( i &gt;&#x3D; 42 ) …</td>
<td>可重载</td>
</tr>
<tr>
<td><strong>第九级别</strong></td>
<td>—–</td>
<td>—–</td>
<td>—–</td>
</tr>
<tr>
<td>&#x3D;&#x3D;</td>
<td>恒等于</td>
<td>if( i &#x3D;&#x3D; 42 ) …</td>
<td>可重载</td>
</tr>
<tr>
<td>eq</td>
<td>&#x3D;&#x3D; 的另一种表达</td>
<td>—–</td>
<td>—–</td>
</tr>
<tr>
<td>!&#x3D;</td>
<td>不等于</td>
<td>if( i !&#x3D; 42 ) …</td>
<td>可重载</td>
</tr>
<tr>
<td>not_eq</td>
<td>!&#x3D;的另一种表达</td>
<td>—–</td>
<td>—–</td>
</tr>
<tr>
<td><strong>第十级别</strong></td>
<td>—–</td>
<td>—–</td>
<td>—–</td>
</tr>
<tr>
<td>&amp;</td>
<td>位且运算</td>
<td>flags &#x3D; flags &amp; 42;</td>
<td>可重载</td>
</tr>
<tr>
<td>bitand</td>
<td>&amp;的另一种表达</td>
<td>—–</td>
<td>—–</td>
</tr>
<tr>
<td><strong>第十一级别</strong></td>
<td>—–</td>
<td>—–</td>
<td>—–</td>
</tr>
<tr>
<td>^</td>
<td>位异或运算</td>
<td>flags &#x3D; flags ^ 42;</td>
<td>可重载</td>
</tr>
<tr>
<td>xor</td>
<td>^的另一种表达</td>
<td>—–</td>
<td>—–</td>
</tr>
<tr>
<td><strong>第十二级别</strong></td>
<td>—–</td>
<td>—–</td>
<td>—–</td>
</tr>
<tr>
<td>|</td>
<td>位或运算</td>
<td>flags &#x3D; flags | 42;</td>
<td>可重载</td>
</tr>
<tr>
<td>bitor</td>
<td>|的另一种表达</td>
<td>—–</td>
<td>—–</td>
</tr>
<tr>
<td><strong>第十三级别</strong></td>
<td>—–</td>
<td>—–</td>
<td>—–</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>逻辑且运算</td>
<td>if( conditionA &amp;&amp; conditionB ) …</td>
<td>可重载</td>
</tr>
<tr>
<td>and</td>
<td>&amp;&amp;的另一种表达</td>
<td>—–</td>
<td>—–</td>
</tr>
<tr>
<td><strong>第十四级别</strong></td>
<td>—–</td>
<td>—–</td>
<td>—–</td>
</tr>
<tr>
<td>||</td>
<td>逻辑或运算</td>
<td>if( conditionA || conditionB ) …</td>
<td>可重载</td>
</tr>
<tr>
<td>or</td>
<td>||的另一种表达</td>
<td>—–</td>
<td>—–</td>
</tr>
<tr>
<td><strong>第十五级别</strong>(具有右结合性)</td>
<td>—–</td>
<td>—–</td>
<td>—–</td>
</tr>
<tr>
<td>? :</td>
<td>条件运算符</td>
<td>int i &#x3D; (a &gt; b) ? a : b;</td>
<td>不可重载</td>
</tr>
<tr>
<td><strong>第十六级别</strong>(具有右结合性)</td>
<td>—–</td>
<td>—–</td>
<td>—–</td>
</tr>
<tr>
<td>&#x3D;</td>
<td>赋值</td>
<td>int a &#x3D; b;</td>
<td>可重载</td>
</tr>
<tr>
<td>+&#x3D;</td>
<td>加赋值运算</td>
<td>a +&#x3D; 3;</td>
<td>可重载</td>
</tr>
<tr>
<td>-&#x3D;</td>
<td>减赋值运算</td>
<td>b -&#x3D; 4;</td>
<td>可重载</td>
</tr>
<tr>
<td>*&#x3D;</td>
<td>乘赋值运算</td>
<td>a *&#x3D; 5;</td>
<td>可重载</td>
</tr>
<tr>
<td>&#x2F;&#x3D;</td>
<td>除赋值运算</td>
<td>a &#x2F;&#x3D; 2;</td>
<td>可重载</td>
</tr>
<tr>
<td>%&#x3D;</td>
<td>模赋值运算</td>
<td>a %&#x3D; 3;</td>
<td>可重载</td>
</tr>
<tr>
<td>&amp;&#x3D;</td>
<td>位且赋值运算</td>
<td>flags &amp;&#x3D; new_flags;</td>
<td>可重载</td>
</tr>
<tr>
<td>and_eq</td>
<td>&amp;&#x3D; 的另一种表达</td>
<td>—–</td>
<td>—–</td>
</tr>
<tr>
<td>^&#x3D;</td>
<td>位异或赋值运算</td>
<td>flags ^&#x3D; new_flags;</td>
<td>可重载</td>
</tr>
<tr>
<td>xor_eq</td>
<td>^&#x3D;的另一种表达</td>
<td>—–</td>
<td>—–</td>
</tr>
<tr>
<td>|&#x3D;</td>
<td>位或赋值运算</td>
<td>flags |&#x3D; new_flags;</td>
<td>可重载</td>
</tr>
<tr>
<td>or_eq</td>
<td>|&#x3D;的另一种表达</td>
<td>—–</td>
<td>—–</td>
</tr>
<tr>
<td>&lt;&lt;&#x3D;</td>
<td>位左移赋值运算</td>
<td>flags &lt;&lt;&#x3D;2;</td>
<td>可重载</td>
</tr>
<tr>
<td>&gt;&gt;&#x3D;</td>
<td>位右移赋值运算</td>
<td>flags &gt;&gt;&#x3D; 2;</td>
<td>可重载</td>
</tr>
<tr>
<td><strong>第十七级别</strong></td>
<td>—–</td>
<td>—–</td>
<td>—–</td>
</tr>
<tr>
<td>throw</td>
<td>异常抛出</td>
<td>throw EClass(“Message”);</td>
<td>不可重载</td>
</tr>
<tr>
<td><strong>第十八级别</strong></td>
<td>—–</td>
<td>—–</td>
<td>—–</td>
</tr>
<tr>
<td>,</td>
<td>逗号分隔符</td>
<td>for( i &#x3D; 0, j &#x3D; 0; i &lt; 10; i++, j++ ) …</td>
<td>可重载</td>
</tr>
</tbody></table>
<h4 id="十一、常用的字符串处理函数"><a href="#十一、常用的字符串处理函数" class="headerlink" title="十一、常用的字符串处理函数"></a>十一、常用的字符串处理函数</h4><p>★ 常用字符串处理函数</p>
<p>① strlen (const char s[]);</p>
<p>② strcat (char dst[], const char src[]);</p>
<p>③ strncat(char dst[], const char src[], const unsigned int len);</p>
<p>④ strcpy (char dst[], const char src[]);</p>
<p>⑤ strncpy(char dst[], const char src[], const unsigned int len);</p>
<p>⑥ strcmp (const char s1[], const char s2[]);</p>
<p>⑦ strncmp(const char s1[], const char s2[], const unsigned int len);   </p>
<p>● 更多的字符串处理函数通过作业完成并理解  </p>
<p> ● 教材&#x2F;参考资料中，很多形式是 const char *s，暂时忽略，待学习指针后再进一步理解  </p>
<p> ● 先不要考虑这些函数的返回值，待学习指针后再进一步理解</p>
<p><strong>加头文件</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS <span class="comment">//若全是只读操作，不需要加_CRT_SECURE_NO_WARNINGS</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br></pre></td></tr></table></figure>



<p>1.strlen(const char s[])   </p>
<p>功    能：求字符串的长度   </p>
<p>输入参数：存放字符串的字符数组   </p>
<p>返 回 值：整型值表示的长度   </p>
<p>注意事项：返回第一个’\0’前的字符数量,不含’\0’</p>
<p>2.strcat(char dst[], const char src[])   </p>
<p>功    能：将字符串src连接到字符串dst的尾部(含尾零)   </p>
<p>输入参数：存放字符串dst的字符数组dst</p>
<p>​                   存放字符串src的字符数组src(只读)   </p>
<p>返 回 值：改变后的字符数组dst   </p>
<p>注意事项：字符数组dst要有足够的空间(两串总长+1)</p>
<p>3.strncat(char dst[], const char src[], const unsigned int n)   </p>
<p>功    能：将字符串src的前n个字符连接到字符串dst的尾部   </p>
<p>输入参数：存放字符串dst的字符数组dst             </p>
<p>​				   存放字符串src的字符数组src(只读)             </p>
<p>​				   要复制的长度n(只读，如果n超过src长度，则只连接src个)   </p>
<p>返 回 值：改变后的字符数组dst  </p>
<p> 注意事项：字符数组dst要有足够的空间(原dst长度+n+1)</p>
<p>4.strcpy(char dst[], const char src[])   </p>
<p>功    能：将字符串src复制到字符串dst中,覆盖原dst串   </p>
<p>输入参数：存放字符串dst的字符数组dst</p>
<p>​                   存放字符串src的字符数组src(只读)   </p>
<p>返 回 值：改变后的字符数组dst   </p>
<p>注意事项：字符数组dst要有足够的空间(串src长+1)</p>
<p>5.strncpy(char dst[], const char src[], unsigned int n)   </p>
<p>功    能：将字符串src的前n个复制到字符串dst中,覆盖原dst串   </p>
<p>输入参数：存放字符串dst的字符数组dst</p>
<p>​                   存放字符串src的字符数组src(只读) </p>
<p>​                   要复制的长度n(只读，如果n超过src长度，则只复制src个)   </p>
<p>返 回 值：改变后的字符数组dst   </p>
<p>注意事项：字符数组dst要有足够的空间(min(串src长,n)+1)</p>
<p>6.strcmp(const char s1[], const char s2[])   </p>
<p>功    能：比较字符串s1和字符串s2的大小   </p>
<p>输入参数：存放字符串s1的字符数组s1(只读) </p>
<p>​                   存放字符串s2的字符数组s2(只读)   </p>
<p>返 回 值：整型值(0:相等  &gt;0:串1大  &lt;0:串1小)</p>
<p>7.strncmp(const char s1[], const char s2[], const unsigned int n)   </p>
<p>功    能：比较字符串s1和字符串s2的前n个字符的大小   </p>
<p>输入参数：存放字符串s1的字符数组s1(只读)</p>
<p>​                   存放字符串s2的字符数组s2(只读) </p>
<p>​                   要比较的长度n(只读)   </p>
<p>返 回 值：整型值(0:相等  &gt;0:串1大  &lt;0:串1小)</p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>《Django》入门 Notes（下）</title>
    <url>/butterflyblog/2023/06/03/%E3%80%8ADjango%E3%80%8B%E5%85%A5%E9%97%A8%20Notes%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
    <content><![CDATA[<h1 id="《Django》入门-Notes（下）"><a href="#《Django》入门-Notes（下）" class="headerlink" title="《Django》入门 Notes（下）"></a>《Django》入门 Notes（下）</h1><p>@Seymour0314 来源官方文档<code>https://docs.djangoproject.com/zh-hans/4.2/intro/</code></p>
<blockquote>
<p>本文是Django 后端技术初级入门教程。</p>
<p>编程语言：Python</p>
</blockquote>
<h2 id="第-6-部分"><a href="#第-6-部分" class="headerlink" title="第 6 部分"></a>第 6 部分</h2><blockquote>
<ul>
<li><p>本教程从 教程第 5 部分结束的地方开始。</p>
<p>我们已经建立了一个经过测试的网络投票应用程序，现在我们将添加一个样式表和一个图像。</p>
</li>
<li><p>除了服务端生成的 HTML 以外，网络应用通常需要一些额外的文件——比如图片，脚本和样式表——来帮助渲染网络页面。</p>
<p>在 Django 中，我们把这些文件统称为“静态文件”。</p>
</li>
<li><p>对于小项目来说，这个问题没什么大不了的，因为你可以把这些静态文件随便放在哪，只要服务程序能够找到它们就行。然而在大项目——特别是由好几个应用组成的大项目——中，处理不同应用所需要的静态文件的工作就显得有点麻烦了。</p>
</li>
<li><p>这就是 <code>django.contrib.staticfiles</code> 存在的意义：</p>
<p>它将各个应用的静态文件（和一些你指明的目录里的文件）统一收集起来，</p>
<p>这样一来，在生产环境中，这些文件就会集中在一个便于分发的地方。</p>
</li>
</ul>
</blockquote>
<h3 id="6-1-自定义-应用-的界面和风格"><a href="#6-1-自定义-应用-的界面和风格" class="headerlink" title="6.1 自定义 应用 的界面和风格"></a>6.1 自定义 <em>应用</em> 的界面和风格</h3><ul>
<li><p>首先，在你的 <code>polls</code> 目录下创建一个名为 <code>static</code> 的目录。</p>
<blockquote>
<ul>
<li><p>Django 将在该目录下查找静态文件，这种方式和 Diango 在 <code>polls/templates/</code> 目录下查找 template 的方式类似。</p>
</li>
<li><p>Django 的 <code>STATICFILES_FINDERS</code> 设置包含了一系列的查找器，它们知道去哪里找到 static 文件。</p>
<ul>
<li><p><code>AppDirectoriesFinder</code> 是默认查找器中的一个，</p>
<p>它会在每个 <code>INSTALLED_APPS</code> 中指定的应用的子文件中寻找名称为 <code>static</code> 的特定文件夹，</p>
<p>就像我们在 <code>polls</code> 中刚创建的那个一样。管理后台采用相同的目录结构管理它的静态文件。</p>
</li>
</ul>
</li>
</ul>
</blockquote>
</li>
<li><p>在你刚创建的 <code>static</code> 文件夹中创建一个名为 <code>polls</code> 的文件夹，再在 <code>polls</code> 文件夹中创建一个名为 <code>style.css</code> 的文件。</p>
<blockquote>
<p>换句话说，你的样式表路径应是 <code>polls/static/polls/style.css</code>。</p>
<p>因为 <code>AppDirectoriesFinder</code> 的存在，</p>
<p>你可以在 Django 中以 <code>polls/style.css</code> 的形式引用此文件，类似你引用模板路径的方式。</p>
<blockquote>
<ul>
<li>静态文件命名空间</li>
</ul>
<p>虽然我们 <em>可以</em> 像管理模板文件一样，把 static 文件直接放入 <code>polls/static</code> （而不是创建另一个名为 <code>polls</code> 的子文件夹），不过这实际上是一个很蠢的做法。Django 只会使用第一个找到的静态文件。如果你在 <em>其它</em> 应用中有一个相同名字的静态文件，Django 将无法区分它们。我们需要指引 Django 选择正确的静态文件，而最好的方式就是把它们放入各自的 <em>命名空间</em> 。也就是把这些静态文件放入 <em>另一个</em> 与应用名相同的目录中。</p>
</blockquote>
</blockquote>
</li>
<li><p>将以下代码放入样式表：</p>
<p><code>polls/static/polls/style.css</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>下一步，在 对应的的文件头添加以下内容：</p>
<p><code>polls/templates/polls/index.html</code> </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% load static %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &#x27;polls/style.css&#x27; %&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>&#123;% static %&#125;</code> 模板标签会生成静态文件的绝对路径。</p>
<p>这就是你开发所需要做的所有事情了。</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512101159792.png" alt="image-20230512101159792" style="zoom:50%;" /> 
</blockquote>
</li>
<li><p>启动服务器(如果它正在运行中，重新启动一次):</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; py manage.py runserver</span><br></pre></td></tr></table></figure>

<p>重新载入 <code>http://localhost:8000/polls/</code> ，</p>
<p>你会发现有问题的链接是绿色的 （这是 Django 自己的问题标注方式），这意味着你追加的样式表起作用了。</p>
<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512101240072.png" alt="image-20230512101240072" style="zoom:80%;" /></blockquote>
</li>
</ul>
<h3 id="6-2-添加一个背景图"><a href="#6-2-添加一个背景图" class="headerlink" title="6.2 添加一个背景图"></a>6.2 添加一个背景图</h3><blockquote>
<p>接下来，我们将为图像创建一个子目录。</p>
</blockquote>
<ul>
<li><p>在 <code>polls/static/polls/</code> 目录中创建 <code>images</code> 子目录。 </p>
<blockquote>
<p>在此目录中，添加您想用作背景的任何图像文件。 </p>
</blockquote>
<p>出于本教程的目的，我们使用了一个名为“background.png”的文件，</p>
<p>它的完整路径为“polls&#x2F;static&#x2F;polls&#x2F;images&#x2F;background.png”。</p>
<blockquote>
<p>注意：我这里测试使用的是jpg格式！</p>
</blockquote>
</li>
<li><p>然后，在样式表中添加对图像的引用：</p>
<p><code>polls/static/polls/style.css</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: white <span class="built_in">url</span>(<span class="string">&quot;images/background.png&quot;</span>) no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>浏览器重载 <code>http://localhost:8000/polls/</code>，你将在屏幕的左上角见到这张背景图。</p>
<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512102107329.png" alt="image-20230512102107329" style="zoom:67%;" /> 
</blockquote>
<blockquote>
<p>警告</p>
<p><code>&#123;% static %&#125;</code> 模板标签在静态文件（例如样式表）中是不可用的，因为它们不是由 Django 生成的。</p>
<p>你应该始终使用 <strong>相对路径</strong> 在你的静态文件之间相互引用，</p>
<p>因为这样你可以更改 <code>STATIC_URL</code>（由 <code>static</code> 模板标签使用来生成 URL），而无需修改大量的静态文件。</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>这些只是 <strong>基础</strong> 。</p>
<p>更多关于设置和框架的资料，参考 <a href="https://docs.djangoproject.com/zh-hans/4.2/howto/static-files/">静态文件解惑</a> 和 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/contrib/staticfiles/">静态文件指南</a>。</p>
<p><a href="https://docs.djangoproject.com/zh-hans/4.2/howto/static-files/deployment/">部署静态文件</a> 介绍了如何在真实服务器上使用静态文件。</p>
<p>当你熟悉静态文件后，阅读 此教程的第 7 部分 来学习如何自定义 Django 自动生成后台网页的过程。</p>
</blockquote>
<h2 id="第-7-部分"><a href="#第-7-部分" class="headerlink" title="第 7 部分"></a>第 7 部分</h2><blockquote>
<p>本教程从 教程第 6 部分 结束的地方开始。</p>
<p>我们继续修改在线投票应用，这次我们专注于自定义我们在 教程第 2 部分初见过的 Django 自动生成后台的过程。</p>
</blockquote>
<h3 id="7-1-自定义后台表单"><a href="#7-1-自定义后台表单" class="headerlink" title="7.1 自定义后台表单"></a>7.1 自定义后台表单</h3><blockquote>
<p>通过 <code>admin.site.register(Question)</code> 注册 <code>Question</code> 模型，Django 能够构建一个默认的表单用于展示。</p>
<p>通常来说，你期望能自定义表单的外观和工作方式。你可以在注册模型时将这些设置告诉 Django。</p>
</blockquote>
<ul>
<li><p>让我们通过重排列表单上的字段来看看它是怎么工作的。</p>
<p>用以下内容替换 <code>admin.site.register(Question)</code>：</p>
<p><code>polls/admin.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QuestionAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    fields = [<span class="string">&quot;pub_date&quot;</span>, <span class="string">&quot;question_text&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">admin.site.register(Question, QuestionAdmin)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>更改对比：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512102642172.png" alt="image-20230512102642172" style="zoom:50%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512103023119.png" alt="image-20230512103023119" style="zoom:50%;" /> </p>
</blockquote>
</li>
<li><p>你需要遵循以下流程：</p>
<p>创建一个模型后台类，</p>
<p>接着将其作为第二个参数传给 <code>admin.site.register()</code> ——在你需要修改模型的后台管理选项时这么做。</p>
<p>以上修改使得 “Publication date” 字段显示在 “Question” 字段之前：</p>
<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512102844334.png" alt="image-20230512102844334" style="zoom: 43%;" /> 
</blockquote>
<p>这在只有两个字段时显得没啥卵用，</p>
<p>但对于拥有数十个字段的表单来说，为表单选择一个直观的排序方法就显得你的针很细了。</p>
<p>说到拥有数十个字段的表单，你可能更期望将表单分为几个字段集：</p>
<p><code>polls/admin.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QuestionAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    fieldsets = [</span><br><span class="line">        (<span class="literal">None</span>, &#123;<span class="string">&quot;fields&quot;</span>: [<span class="string">&quot;question_text&quot;</span>]&#125;),</span><br><span class="line">        (<span class="string">&quot;Date information&quot;</span>, &#123;<span class="string">&quot;fields&quot;</span>: [<span class="string">&quot;pub_date&quot;</span>]&#125;),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">admin.site.register(Question, QuestionAdmin)</span><br></pre></td></tr></table></figure>

<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512103111825.png" alt="image-20230512103111825" style="zoom:50%;" /> 
</blockquote>
<p><code>fieldsets</code>元组中的第一个元素是字段集的标题。以下是我们的表单现在的样子：</p>
<blockquote>
<p>效果：</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512103234752.png" alt="image-20230512103234752" style="zoom: 43%;" /></blockquote>
</li>
</ul>
<h3 id="7-2-添加关联的对象"><a href="#7-2-添加关联的对象" class="headerlink" title="7.2 添加关联的对象"></a>7.2 添加关联的对象</h3><ul>
<li><p>好了，现在我们有了投票的后台页。不过，一个 <code>Question</code> 有多个 <code>Choice</code>，但后台页却没有显示多个选项。</p>
<p>有两个方法可以解决这个问题。</p>
</li>
<li><p>（方法一）第一个就是仿照我们向后台注册 <code>Question</code> 一样注册 <code>Choice</code> ：</p>
<p><code>polls/admin.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Choice, Question</span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">admin.site.register(Choice)</span><br></pre></td></tr></table></figure>

<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512103532211.png" alt="image-20230512103532211" style="zoom:50%;" /> 
</blockquote>
<p>现在 “Choices” 在 Django 后台页中是一个可用的选项了。</p>
<p>“添加选项”的表单看起来像这样：</p>
<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512103605727.png" alt="image-20230512103605727" style="zoom:50%;" /> 

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512103628352.png" alt="image-20230512103628352" style="zoom:43%;" /> 
</blockquote>
<p>在这个表单中，”Question” 字段是一个包含数据库中所有投票的选择框。</p>
<p>Django 知道要将 <code>ForeignKey</code> 在后台中以选择框 <code>&lt;select&gt;</code> 的形式展示。</p>
<p>此时，我们只有一个投票。</p>
<blockquote>
<p>还请注意“问题”旁边的“添加另一个问题”链接。</p>
<p>每个与另一个具有<code>ForeignKey</code>关系的对象都可以免费获得此链接。</p>
<p>当你点击“添加另一个问题”时，你会看到一个带有“添加问题”表单的弹出窗口。如果你在该窗口中添加问题并点击“保存”，Django会将问题保存到数据库中，并将其动态添加为你正在查看的“添加选项”表单上的选定选项。</p>
</blockquote>
<p>不过，这是一种很低效地添加“选项”的方法。更好的办法是在你创建“投票”对象时直接添加好几个选项。让我们实现它。</p>
</li>
<li><p>（方法二）移除调用 <code>register()</code> 注册 <code>Choice</code> 模型的代码。</p>
<p>随后，像这样修改 <code>Question</code> 的注册代码：</p>
<p><code>polls/admin.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Choice, Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChoiceInline</span>(admin.StackedInline):</span><br><span class="line">    model = Choice</span><br><span class="line">    extra = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QuestionAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    fieldsets = [</span><br><span class="line">        (<span class="literal">None</span>, &#123;<span class="string">&quot;fields&quot;</span>: [<span class="string">&quot;question_text&quot;</span>]&#125;),</span><br><span class="line">        (<span class="string">&quot;Date information&quot;</span>, &#123;<span class="string">&quot;fields&quot;</span>: [<span class="string">&quot;pub_date&quot;</span>], <span class="string">&quot;classes&quot;</span>: [<span class="string">&quot;collapse&quot;</span>]&#125;),</span><br><span class="line">    ]</span><br><span class="line">    inlines = [ChoiceInline]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">admin.site.register(Question, QuestionAdmin)</span><br></pre></td></tr></table></figure>

<p>这会告诉 Django：“<code>Choice</code> 对象要在 <code>Question</code> 后台页面编辑。默认提供 3 个足够的选项字段。”</p>
<p>加载“添加投票”页面来看看它长啥样：</p>
<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512104313357.png" alt="image-20230512104313357" style="zoom:43%;" /> 
</blockquote>
<p>它看起来像这样：</p>
<p>有三个关联的选项插槽——由 <code>extra</code> 定义，且每次你返回任意已创建的对象的“修改”页面时，你会见到三个新的插槽。</p>
<p>在三个插槽的末端，你会看到一个“添加新选项”的按钮。</p>
<p>如果你单击它，一个新的插槽会被添加。</p>
<p>如果你想移除已有的插槽，可以点击插槽右上角的X。以下图片展示了一个已添加的插槽：</p>
<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512104421724.png" alt="image-20230512104421724" style="zoom:50%;" /> 
</blockquote>
</li>
<li><p>不过，仍然有点小问题。</p>
<p>它占据了大量的屏幕区域来显示所有关联的 <code>Choice</code> 对象的字段。</p>
<p>对于这个问题，Django 提供了一种表格式的单行显示关联对象的方法。</p>
<p>要使用它，只需按如下形式修改 <code>ChoiceInline</code> 申明：</p>
<p><code>polls/admin.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ChoiceInline</span>(admin.TabularInline):</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>通过 <code>TabularInline</code> （替代 <code>StackedInline</code> ），关联对象以一种表格式的方式展示，显得更加紧凑：</p>
<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512104611002.png" alt="image-20230512104611002" style="zoom: 43%;" /> 
</blockquote>
<p>请注意，有一个额外的“删除？”列，允许删除使用“添加另一个选项”按钮添加的行和已保存的行。</p>
</li>
</ul>
<h3 id="7-3-自定义后台更改列表"><a href="#7-3-自定义后台更改列表" class="headerlink" title="7.3 自定义后台更改列表"></a>7.3 自定义后台更改列表</h3><ul>
<li><p>现在投票的后台页看起来很不错，让我们对“更改列表”页面进行一些调整——改成一个能展示系统中所有投票的页面。</p>
<p>以下是它此时的外观：</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512180544903.png" alt="image-20230512180544903" style="zoom: 67%;" /> 

<p>默认情况下，Django 显示每个对象的 <code>str()</code> 返回的值。但有时如果我们能够显示单个字段，它会更有帮助。</p>
</li>
<li><p>为此，使用 <code>list_display</code>后台选项，它是一个包含要显示的字段名的元组，在更改列表页中以列的形式展示这个对象：</p>
<p>另外，让我们把 教程第 2 部分中的 <code>was_published_recently()</code> 方法也加上：</p>
<p><code>polls/admin.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">QuestionAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    list_display = [<span class="string">&quot;question_text&quot;</span>, <span class="string">&quot;pub_date&quot;</span>, <span class="string">&quot;was_published_recently&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>现在修改投票的列表页看起来像这样：</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512180954199.png" alt="image-20230512180954199" style="zoom: 67%;" />

<p>你可以点击列标题来对这些行进行排序——除了 <code>was_published_recently</code> 这个列，因为没有实现排序方法。</p>
<p>顺便看下这个列的标题 <code>was_published_recently</code>，默认就是方法名（用空格替换下划线），该列的每行都以字符串形式展示出处。</p>
</li>
<li><p>你可以通过在该方法上（在 <code>polls/models.py</code> 中）使用 <code>display()</code>装饰器来改进，如下图所示：</p>
<p><code>polls/models.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Question</span>(models.Model):</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"><span class="meta">    @admin.display(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="meta">        boolean=<span class="literal">True</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">        ordering=<span class="string">&quot;pub_date&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">        description=<span class="string">&quot;Published recently?&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">    </span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">was_published_recently</span>(<span class="params">self</span>):</span><br><span class="line">        now = timezone.now()</span><br><span class="line">        <span class="keyword">return</span> now - datetime.timedelta(days=<span class="number">1</span>) &lt;= self.pub_date &lt;= now</span><br></pre></td></tr></table></figure>

<blockquote>
<p>更多关于可通过装饰器设置的属性的信息，请参见 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/contrib/admin/#django.contrib.admin.ModelAdmin.list_display"><code>list_display</code></a>。</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512181647755.png" alt="image-20230512181647755" style="zoom:50%;" /> 
</blockquote>
</li>
<li><p>再次编辑文件 <code>polls/admin.py</code>，优化 <code>Question</code> 变更页：过滤器，使用 <code>list_filter</code>。</p>
<p>将以下代码添加至 <code>QuestionAdmin</code>：</p>
<p><code>polls/admin.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_filter = [<span class="string">&quot;pub_date&quot;</span>]</span><br></pre></td></tr></table></figure>

<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512181427536.png" alt="image-20230512181427536" style="zoom:50%;" /> 
</blockquote>
<p>这样做添加了一个“过滤器”侧边栏，允许人们以 <code>pub_date</code> 字段来过滤列表：</p>
<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512181720442.png" alt="image-20230512181720442" style="zoom: 50%;" /> 
</blockquote>
<p>展示的过滤器类型取决你你要过滤的字段的类型。</p>
<p>因为 <code>pub_date</code> 是类 <code>DateTimeField</code>，Django 知道要提供哪个过滤器：“任意时间”，“今天”，“过去7天”，“这个月”和“今年”。</p>
</li>
<li><p>这已经弄的很好了。让我们再扩充些功能:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">search_fields = [<span class="string">&quot;question_text&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>在列表的顶部增加一个搜索框。当输入待搜项时，Django 将搜索 <code>question_text</code> 字段。</p>
<p>你可以使用任意多的字段——由于后台使用 <code>LIKE</code> 来查询数据，将待搜索的字段数限制为一个不会出问题大小，会便于数据库进行查询操作。</p>
<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512182208186.png" alt="image-20230512182208186" style="zoom:50%;" /> 
</blockquote>
</li>
<li><p>现在是给你的修改列表页增加分页功能的好时机。</p>
<p>默认每页显示 100 项。</p>
<p><a href="https://docs.djangoproject.com/zh-hans/4.2/ref/contrib/admin/#django.contrib.admin.ModelAdmin.list_per_page"><code>变更页分页</code></a>, <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/contrib/admin/#django.contrib.admin.ModelAdmin.search_fields"><code>搜索框</code></a>, <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/contrib/admin/#django.contrib.admin.ModelAdmin.list_filter"><code>过滤器</code></a>, <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/contrib/admin/#django.contrib.admin.ModelAdmin.date_hierarchy"><code>日期层次结构</code></a>, 和 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/contrib/admin/#django.contrib.admin.ModelAdmin.list_display"><code>列标题排序</code></a> 均以你期望的方式合作运行。</p>
</li>
</ul>
<h3 id="7-4-自定义后台界面和风格"><a href="#7-4-自定义后台界面和风格" class="headerlink" title="7.4 自定义后台界面和风格"></a>7.4 自定义后台界面和风格</h3><blockquote>
<p>在每个后台页顶部显示“Django 管理员”显得很滑稽。这只是一串占位文本。</p>
<p>不过，你可以通过 Django 的模板系统来修改。</p>
<p>Django 的后台由自己驱动，且它的交互接口采用 Django 自己的模板系统。</p>
</blockquote>
<h4 id="自定义你的-工程的-模板"><a href="#自定义你的-工程的-模板" class="headerlink" title="自定义你的 工程的 模板"></a>自定义你的 <em>工程的</em> 模板</h4><ul>
<li><p>在你的工程目录（指包含 <code>manage.py</code> 的那个文件夹）内创建一个名为 <code>templates</code> 的目录。</p>
<blockquote>
<p>模板可放在你系统中任何 Django 能找到的位置。（谁启动了 Django，Django 就以他的用户身份运行。）</p>
<p>不过，把你的模板放在工程内会带来很大便利，推荐你这样做。</p>
</blockquote>
</li>
<li><p>打开你的设置文件（<code>mysite/settings.py</code>，牢记），在 <code>TEMPLATES</code>设置中添加 <code>DIRS</code>选项：</p>
<p><code>mysite/settings.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;BACKEND&quot;</span>: <span class="string">&quot;django.template.backends.django.DjangoTemplates&quot;</span>,</span><br><span class="line">        <span class="string">&quot;DIRS&quot;</span>: [BASE_DIR / <span class="string">&quot;templates&quot;</span>],</span><br><span class="line">        <span class="string">&quot;APP_DIRS&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&quot;OPTIONS&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;context_processors&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;django.template.context_processors.debug&quot;</span>,</span><br><span class="line">                <span class="string">&quot;django.template.context_processors.request&quot;</span>,</span><br><span class="line">                <span class="string">&quot;django.contrib.auth.context_processors.auth&quot;</span>,</span><br><span class="line">                <span class="string">&quot;django.contrib.messages.context_processors.messages&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://docs.djangoproject.com/zh-hans/4.2/ref/settings/#std-setting-TEMPLATES-DIRS"><code>DIRS</code></a> 是一个包含多个系统目录的文件列表，用于在载入 Django 模板时使用，是一个待搜索路径。</p>
<blockquote>
<p>组织模板</p>
<p>就像静态文件一样，我们 <em>可以</em> 把所有的模板文件放在一个大模板目录内，这样它也能工作的很好。</p>
<p>但是，属于特定应用的模板文件最好放在应用所属的模板目录（例如 <code>polls/templates</code>），而不是工程的模板目录（<code>templates</code>）。我们会在 <a href="https://docs.djangoproject.com/zh-hans/4.2/intro/reusable-apps/">创建可复用的应用教程</a> 中讨论 <em>为什么</em> 我们要这样做。</p>
</blockquote>
<blockquote>
<p>Django 的源文件在哪里？</p>
<p>如果你不知道 Django 源码在你系统的哪个位置，运行以下命令：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">...\&gt; py -c <span class="string">&quot;import django; print(django.__path__)&quot;</span></span><br></pre></td></tr></table></figure>
</blockquote>
</blockquote>
</li>
<li><p>接着，用你网页站点的名字编辑替换文件内的 <code>&#123;&#123; site_header|default:_('Django administration') &#125;&#125;</code> （包含大括号）。</p>
<p>完成后，你应该看到如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% block branding %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;site-name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;admin:index&#x27; %&#125;&quot;</span>&gt;</span>Polls Administration<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>我们会用这个方法来教你复写模板。</p>
<p>在一个实际工程中，你可能更期望使用 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/contrib/admin/#django.contrib.admin.AdminSite.site_header"><code>django.contrib.admin.AdminSite.site_header</code></a> 来进行简单的定制。</p>
<p>这个模板文件包含很多类似 <code>&#123;% block branding %&#125;</code> 和 <code>&#123;&#123; title &#125;&#125;</code> 的文本。</p>
<p> &#96;</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>《Django》入门 Notes（上）</title>
    <url>/butterflyblog/2023/06/01/%E3%80%8ADjango%E3%80%8B%E5%85%A5%E9%97%A8%20Notes%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
    <content><![CDATA[<h1 id="《Django》入门-Notes（上）"><a href="#《Django》入门-Notes（上）" class="headerlink" title="《Django》入门 Notes（上）"></a>《Django》入门 Notes（上）</h1><p>@Seymour0314 来源官方文档<code>https://docs.djangoproject.com/zh-hans/4.2/intro/</code></p>
<blockquote>
<p>本文是Django 后端技术初级入门教程。</p>
<p>编程语言：Python</p>
</blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230510110254656.png" alt="image-20230510110254656" style="zoom: 50%;" />





<h2 id="初识-Django"><a href="#初识-Django" class="headerlink" title="初识 Django"></a>初识 Django</h2><blockquote>
<p>Django 最初被设计用于具有快速开发需求的新闻类站点，目的是要实现简单快捷的网站开发。以下内容简要介绍了如何使用 Django 实现一个数据库驱动的网络应用。</p>
</blockquote>
<blockquote>
<p>从哪里获得帮助：</p>
<p>如果你在阅读本教程的过程中有任何疑问，可以前往 FAQ 的 <a href="https://docs.djangoproject.com/zh-hans/4.2/faq/help/">获取帮助</a> 的版块。</p>
</blockquote>
<blockquote>
<p>官方文档：<a href="https://docs.djangoproject.com/zh-hans/4.2/topics/">https://docs.djangoproject.com/zh-hans/4.2/topics/</a></p>
</blockquote>
<h2 id="快速安装指南"><a href="#快速安装指南" class="headerlink" title="快速安装指南"></a>快速安装指南</h2><h3 id="在-Windows-上安装-Django"><a href="#在-Windows-上安装-Django" class="headerlink" title="在 Windows 上安装 Django"></a>在 Windows 上安装 Django</h3><h5 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h5><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511140356777.png" alt="image-20230511140356777" style="zoom:80%;" /> 

<ul>
<li>Django 是一个 Python Web 框架，因此需要在您的机器上安装 Python。</li>
</ul>
<blockquote>
<p>Python官方下载地址 <a href="https://www.python.org/downloads/">https://www.python.org/downloads/</a></p>
<p>查看版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; py --version</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="配置一个虚拟环境"><a href="#配置一个虚拟环境" class="headerlink" title="配置一个虚拟环境"></a>配置一个虚拟环境</h5><ul>
<li><p>最佳实践是为你创建的每一个Django项目创建一个独立的环境。</p>
<p>在Python生态系统中有许多可以用来管理环境和包的可选工具，一些在 <a href="https://packaging.python.org/guides/tool-recommendations/">Python documentation</a> 被推荐过。我们将会在这份指南中使用Python本身自带的 <a href="https://docs.python.org/3/tutorial/venv.html">venv</a> 来管理环境。</p>
</li>
</ul>
<blockquote>
<p>在当前文件夹下创建虚拟环境：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在 project-name 文件夹下创建一个虚拟环境（若project-name文件夹不存在，则会新建）</span></span><br><span class="line">...\&gt; py -m venv project-name</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">激活环境</span></span><br><span class="line">...\&gt; project-name\Scripts\activate.bat</span><br></pre></td></tr></table></figure>

<p>每次你打开新的命令行窗口，你需要再次激活环境。</p>
</blockquote>
<h5 id="安装-Django"><a href="#安装-Django" class="headerlink" title="安装 Django"></a>安装 Django</h5><ul>
<li>Django 可以轻松地在你的<strong>虚拟环境</strong>中使用 <code>pip</code> 安装。</li>
</ul>
<blockquote>
<p>确保虚拟环境已经激活，输入下面命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; py -m pip install Django</span><br></pre></td></tr></table></figure>

<p>这将下载并安装最新的 Django 发布版本。</p>
<p>安装完成后，你可以在命令提示符运行 <code>django-admin --version</code> 验证你安装的 Django。</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511142702003.png" alt="image-20230511142702003" style="zoom:67%;" />

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511143558371.png" alt="image-20230511143558371" style="zoom: 67%;" />

<blockquote>
<p>非虚拟环境查看版本号：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; py -m django --version</span><br></pre></td></tr></table></figure>
</blockquote>
</blockquote>
<h5 id="安装-Apache-和-mod-wsgi"><a href="#安装-Apache-和-mod-wsgi" class="headerlink" title="安装 Apache 和 mod_wsgi"></a>安装 Apache 和 <code>mod_wsgi</code></h5><ul>
<li><p>如果您只是想试验 Django，请跳到下一部分；</p>
<p>Django 包含一个可用于测试的轻量级 Web 服务器，</p>
<p>因此在准备好在生产环境中部署 Django 之前，您不需要设置 Apache。</p>
</li>
</ul>
<h5 id="运行你的数据库"><a href="#运行你的数据库" class="headerlink" title="运行你的数据库"></a>运行你的数据库</h5><ul>
<li><p>如果你打算使用 Django 的数据库 API 功能，你需要确保一个数据库服务器正在运行。</p>
<p>Django 支持许多不同的数据库服务器，官方支持 <a href="https://www.postgresql.org/">PostgreSQL</a>、<a href="https://mariadb.org/">MariaDB</a>、<a href="https://www.mysql.com/">MySQL</a>、<a href="https://www.oracle.com/">Oracle</a> 和 <a href="https://www.sqlite.org/">SQLite</a>。</p>
</li>
</ul>
<blockquote>
<p>如果你正在开发一个小项目或不打算在生产环境中部署的东西，SQLite 通常是最好的选择，因为它不需要运行一个单独的服务器。然而，SQLite 与其他数据库有许多不同之处，所以如果你正在开发一些实质性的东西，建议使用你计划在生产中使用的同一数据库进行开发。</p>
<p>除了官方支持的数据库，还有 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/databases/#third-party-notes">第三方提供的后端</a> 允许你在 Django 中使用其他数据库。</p>
</blockquote>
<ul>
<li><p>除了数据库后端，你还要确保安装了 Python 数据库绑定。</p>
<ul>
<li><p>如果你正在使用 MySQL 或 MariaDB，则需要一个像 <code>mysqlclient</code> 一样的 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/databases/#mysql-db-api-drivers">DB API 驱动</a>。 </p>
<p>详细信息参见 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/databases/#mysql-notes">MySQL 后端注意事项</a>。</p>
</li>
<li><p>如果你正在使用 SQLite，则可能需要阅读 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/databases/#sqlite-notes">SQLite 后端笔记</a> 。</p>
</li>
</ul>
</li>
<li><p>操作数据库</p>
<ul>
<li><p>如果你打算使用 Django 的 <code>manage.py migrate</code> 命令为你的模型自动创建数据库表（首先安装 Django 并创建项目后），</p>
<p>你需要确保 Django 有权限在你使用的数据库中创建和修改表；</p>
</li>
<li><p>如果你打算手动创建表，你可以授予 Django <code>SELECT</code>、<code>INSERT</code>、<code>UPDATE</code> 和 <code>DELETE</code> 权限。</p>
<p>创建具有这些权限的数据库用户后，你将在项目的配置文件中指定详细信息，详细信息参见 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/settings/#std-setting-DATABASES"><code>DATABASES</code></a>。</p>
</li>
<li><p>如果你正在使用 Django 的 <a href="https://docs.djangoproject.com/zh-hans/4.2/topics/testing/">测试框架</a> 来测试数据库查询，Django 将需要创建测试数据库的权限。</p>
</li>
</ul>
</li>
</ul>
<h2 id="编写你的第一个-Django-应用"><a href="#编写你的第一个-Django-应用" class="headerlink" title="编写你的第一个 Django 应用"></a>编写你的第一个 Django 应用</h2><blockquote>
<p>操作前记得激活环境</p>
</blockquote>
<h4 id="0-0-激活环境"><a href="#0-0-激活环境" class="headerlink" title="0.0 激活环境"></a>0.0 激活环境</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">激活环境</span></span><br><span class="line">...\&gt; project-name\Scripts\activate.bat</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如若激活后，仍然报错说没有<code>Django</code>模块</p>
<p>那么：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; py -m pip install Django</span><br></pre></td></tr></table></figure>

<p>安装好，查看<code>django-admin --version</code>是否正常输出版本号。</p>
</blockquote>
<h2 id="第-1-部分"><a href="#第-1-部分" class="headerlink" title="第 1 部分"></a>第 1 部分</h2><blockquote>
<p>让我们通过示例来学习。</p>
<p>通过这个教程，我们将带着你创建一个基本的投票应用程序。</p>
<p>它将由两部分组成：</p>
<ul>
<li>一个让人们查看和投票的公共站点。</li>
<li>一个让你能添加、修改和删除投票的管理站点。</li>
</ul>
<blockquote>
<p>本教程是为Django 4.2 编写的，它支持 Python 3.8 及以后的版本。</p>
<p>我的版本号是：</p>
<ul>
<li>Django 4.2.1</li>
<li>Python 3.11.1</li>
</ul>
</blockquote>
</blockquote>
<h3 id="1-1-创建项目"><a href="#1-1-创建项目" class="headerlink" title="1.1 创建项目"></a>1.1 创建项目</h3><ul>
<li><p>如果这是你第一次使用 Django 的话，你需要一些初始化设置。</p>
<blockquote>
<p>也就是说，你需要用一些自动生成的代码配置一个 Django project —— 即一个 Django 项目实例需要的设置项集合，包括数据库配置、Django 配置和应用程序配置。</p>
</blockquote>
</li>
<li><p>打开命令行，<code>cd</code> 到一个你想放置你代码的目录，然后运行以下命令：</p>
<blockquote>
<p>我们可以放在与前面<code>project</code>文件夹的并行目录下。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; django-admin startproject mysite</span><br></pre></td></tr></table></figure>

<p>这行代码将会在当前目录下创建一个 <code>mysite</code> 目录。</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511143733355.png" alt="image-20230511143733355" style="zoom: 67%;" />

<blockquote>
<p>mysite结构：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysite/</span><br><span class="line">    manage.py</span><br><span class="line">    mysite/</span><br><span class="line">        __init__.py</span><br><span class="line">        settings.py</span><br><span class="line">        urls.py</span><br><span class="line">        asgi.py</span><br><span class="line">        wsgi.py</span><br></pre></td></tr></table></figure>

<p>这些目录和文件的用处是：</p>
<ul>
<li><p>最外层的 <code>mysite/</code> 根目录只是你项目的容器， 根目录名称对 Django 没有影响，你可以将它重命名为任何你喜欢的名称。</p>
</li>
<li><p><code>manage.py</code>: 一个让你用各种方式管理 Django 项目的命令行工具。</p>
<blockquote>
<p>你可以阅读 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/django-admin/">django-admin 和 manage.py</a> 获取所有 <code>manage.py</code> 的细节。</p>
</blockquote>
</li>
<li><p>里面一层的 <code>mysite/</code> 目录包含你的项目，它是一个纯 Python 包。</p>
<blockquote>
<p>它的名字就是当你引用它内部任何东西时需要用到的 Python 包名。 (比如 <code>mysite.urls</code>).</p>
</blockquote>
</li>
<li><p><code>mysite/__init__.py</code>：一个空文件，告诉 Python 这个目录应该被认为是一个 Python 包。</p>
<blockquote>
<p>如果你是 Python 初学者，阅读官方文档中的 <a href="https://docs.python.org/3/tutorial/modules.html#tut-packages">更多关于包的知识</a>。</p>
</blockquote>
</li>
<li><p><code>mysite/settings.py</code>：Django 项目的配置文件。</p>
<blockquote>
<p>如果你想知道这个文件是如何工作的，请查看 <a href="https://docs.djangoproject.com/zh-hans/4.2/topics/settings/">Django 配置</a> 了解细节。</p>
</blockquote>
</li>
<li><p><code>mysite/urls.py</code>：Django 项目的 URL 声明，就像你网站的“目录”。</p>
<blockquote>
<p>阅读 <a href="https://docs.djangoproject.com/zh-hans/4.2/topics/http/urls/">URL调度器</a> 文档来获取更多关于 URL 的内容。</p>
</blockquote>
</li>
<li><p><code>mysite/asgi.py</code>：作为你的项目的运行在 ASGI 兼容的 Web 服务器上的入口。</p>
<blockquote>
<p>阅读 <a href="https://docs.djangoproject.com/zh-hans/4.2/howto/deployment/asgi/">如何使用 ASGI 来部署</a> 了解更多细节。</p>
</blockquote>
</li>
<li><p><code>mysite/wsgi.py</code>：作为你的项目的运行在 WSGI 兼容的Web服务器上的入口。</p>
<blockquote>
<p>阅读 <a href="https://docs.djangoproject.com/zh-hans/4.2/howto/deployment/wsgi/">如何使用 WSGI 进行部署</a> 了解更多细节。</p>
</blockquote>
</li>
</ul>
</blockquote>
</li>
</ul>
<h3 id="1-2-用于开发的简易服务器"><a href="#1-2-用于开发的简易服务器" class="headerlink" title="1.2 用于开发的简易服务器"></a>1.2 用于开发的简易服务器</h3><ul>
<li><p>让我们来确认一下你的 Django 项目是否真的创建成功了。</p>
<p>如果你的当前目录不是外层的 <code>mysite</code> 目录的话，请切换到此目录，然后运行下面的命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">记得先<span class="built_in">cd</span> mysite</span></span><br><span class="line">...\&gt; py manage.py runserver</span><br></pre></td></tr></table></figure>

<p>你应该会看到如下输出：</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511144922199.png" alt="image-20230511144922199" style="zoom: 50%;" />

<blockquote>
<p>忽略有关未应用最新数据库迁移的警告，稍后我们处理数据库。</p>
</blockquote>
</li>
<li><p>你已经启动了 Django 开发服务器，这是一个用纯 Python 编写的轻量级网络服务器。</p>
<blockquote>
<p>我们在 Django 中包含了这个服务器，所以你可以快速开发，而不需要处理配置生产服务器的问题</p>
<p> 比如 Apache – 直到你准备好用于生产。</p>
<blockquote>
<p>但是，<strong>千万不要</strong> 将这个服务器用于和生产环境相关的任何地方。这个服务器只是为了开发而设计的。</p>
<p>（我们在网络框架方面是专家，在网络服务器方面并不是。）</p>
</blockquote>
</blockquote>
</li>
<li><p>服务器现在正在运行，通过浏览器访问 <code>http://127.0.0.1:8000/ </code>。</p>
<p>你将看到一个“祝贺”页面，有一只火箭正在发射。你成功了！</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511145011477.png" alt="image-20230511145011477" style="zoom:50%;" /></li>
</ul>
<blockquote>
<p>一些问题：</p>
<ul>
<li><p>更换端口</p>
<p>默认情况下，<code>runserver</code> 命令会将服务器设置为监听本机内部 IP 的 8000 端口。</p>
<p>如果你想更换服务器的监听端口，请使用命令行参数。</p>
<p>举个例子，下面的命令会使服务器监听 8080 端口：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; py manage.py runserver 8080</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果你想要修改服务器监听的IP，在端口之前输入新的。</p>
<p>比如，为了监听所有服务器的公开IP（这你运行 Vagrant 或想要向网络上的其它电脑展示你的成果时很有用），</p>
<p>使用：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; py manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure>

<p>关于这个简易服务器的完整信息可以在 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/django-admin/#django-admin-runserver">runserver</a> 文档中找到。</p>
</li>
<li><p>会自动重新加载的服务器 <code>runserver</code></p>
<p>用于开发的服务器在需要的情况下会对每一次的访问请求重新载入一遍 Python 代码。</p>
<p>所以你不需要为了让修改的代码生效而频繁的重新启动服务器。</p>
<blockquote>
<p>然而，一些动作，比如添加新文件，将不会触发自动重新加载，这时你得自己手动重启服务器。</p>
</blockquote>
</li>
</ul>
</blockquote>
<h3 id="1-3-创建投票应用"><a href="#1-3-创建投票应用" class="headerlink" title="1.3 创建投票应用"></a>1.3 创建投票应用</h3><blockquote>
<p>现在你的开发环境——这个“项目” ——已经配置好了，你可以开始干活了。</p>
</blockquote>
<ul>
<li><p>在 Django 中，每一个应用都是一个 Python 包，并且遵循着相同的约定。</p>
<p>Django 自带一个工具，可以帮你生成应用的基础目录结构，这样你就能专心写代码，而不是创建目录了。</p>
<blockquote>
<ul>
<li>项目和应用有什么区别？<ul>
<li>应用是一个专门做某件事的网络应用程序——比如博客系统，或者公共记录的数据库，或者小型的投票程序。</li>
<li>项目则是一个网站使用的配置和应用的集合。项目可以包含很多个应用。应用可以被很多个项目使用。</li>
</ul>
</li>
</ul>
</blockquote>
</li>
<li><p>你的应用可以存放在任何 Python 路径 中定义的路径。</p>
<p>在这个教程中，我们将在你的 <code>manage.py</code> 同级目录下创建投票应用。</p>
<blockquote>
<p>这样它就可以作为顶级模块导入，而不是 <code>mysite</code> 的子模块。</p>
</blockquote>
<p>请确定你现在处于 <code>manage.py</code> 所在的目录（即外层的mysite目录）下，然后运行这行命令来创建一个应用：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个名叫polls 的应用</span></span><br><span class="line">...\&gt; py manage.py startapp polls</span><br></pre></td></tr></table></figure>

<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511150105443.png" alt="image-20230511150105443" style="zoom: 67%;" />

<p>polls 文件的目录结构：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">polls/</span><br><span class="line">    __init__.py</span><br><span class="line">    admin.py</span><br><span class="line">    apps.py</span><br><span class="line">    migrations/</span><br><span class="line">        __init__.py</span><br><span class="line">    models.py</span><br><span class="line">    tests.py</span><br><span class="line">    views.py</span><br></pre></td></tr></table></figure></blockquote>
</li>
</ul>
<h3 id="1-4-编写第一个视图"><a href="#1-4-编写第一个视图" class="headerlink" title="1.4 编写第一个视图"></a>1.4 编写第一个视图</h3><blockquote>
<p>让我们开始编写第一个视图吧。</p>
</blockquote>
<ul>
<li><p>打开 <code>polls/views.py</code>，把下面这些 Python 代码输入进去：</p>
<p><code>polls/views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Hello, world. You&#x27;re at the polls index.&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>这是 Django 中最简单的视图。</p>
<p>如果想看见效果，我们需要将一个 URL 映射到它——这就是我们需要 URLconf 的原因了。</p>
</li>
<li><p>就在<code>polls</code>目录下，新建一个<code>urls.py</code>文件：</p>
<p><code>polls/urls.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;&quot;</span>, views.index, name=<span class="string">&quot;index&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>下一步是要在根 URLconf 文件中指定我们创建的 <code>polls.urls</code> 模块。</p>
<p>在 <code>mysite/mysite/urls.py</code> 文件的 <code>urlpatterns</code> 列表里插入一个 <code>include()</code>， 如下：</p>
<blockquote>
<p>注意：改了两处：</p>
<ul>
<li>import include</li>
<li>path(…)</li>
</ul>
</blockquote>
<p><code>mysite/mysite/urls.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;polls/&quot;</span>, include(<span class="string">&quot;polls.urls&quot;</span>)),</span><br><span class="line">    path(<span class="string">&quot;admin/&quot;</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><p>函数 <code>include()</code>允许引用其它 URLconfs。</p>
<p>每当 Django 遇到 <code>include()</code> 时，</p>
<p>它会截断与此项匹配的 URL 的部分，并将剩余的字符串发送到 URLconf 以供进一步处理。</p>
</li>
</ul>
<blockquote>
<p>我们设计<code>include()</code>的理念是使其可以即插即用。</p>
<p>因为投票应用有它自己的 URLconf( <code>polls/urls.py</code> )，他们能够被放在 “&#x2F;polls&#x2F;“ ， “&#x2F;fun_polls&#x2F;“ ，”&#x2F;content&#x2F;polls&#x2F;“，或者其他任何路径下，这个应用都能够正常工作。</p>
</blockquote>
<ul>
<li><p>何时使用 <code>include()</code></p>
<p>当包括其它 URL 模式时你应该总是使用 <code>include()</code> ， <code>admin.site.urls</code> 是唯一例外。</p>
</li>
</ul>
</blockquote>
</li>
<li><p>你现在把 <code>index</code> 视图添加进了 URLconf。通过以下命令验证是否正常工作：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; py manage.py runserver</span><br></pre></td></tr></table></figure>

<p>用你的浏览器访问 <code>http://localhost:8000/polls/</code>，</p>
<p>你应该能够看见 “<em>Hello, world. You’re at the polls index.</em>“ ，这是你在 <code>index</code> 视图中定义的。</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511152225834.png" alt="image-20230511152225834" style="zoom: 67%;" />

<blockquote>
<p>没有找到页面?（你可能掉了<code>/polls/</code>）</p>
<p>如果你在这里得到了一个错误页面，</p>
<p>检查一下你是不是正访问着<code>http://localhost:8000/polls/</code></p>
<p> 而不应该是 <code>http://localhost:8000/</code>。</p>
</blockquote>
</li>
</ul>
<h4 id="关于-path-函数"><a href="#关于-path-函数" class="headerlink" title="关于 path 函数"></a>关于 path 函数</h4><ul>
<li><p>函数 <code>path()</code>具有四个参数，两个必须参数：<code>route</code> 和 <code>view</code>，两个可选参数：<code>kwargs</code> 和 <code>name</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path(route,view,[kwargs],[name])</span><br></pre></td></tr></table></figure>

<ul>
<li><code>route</code></li>
</ul>
<p>  一个匹配 URL 的准则（类似正则表达式）</p>
<blockquote>
<p>当 Django 响应一个请求时，它会从 <code>urlpatterns</code> 的第一项开始，按顺序依次匹配列表中的项，直到找到匹配的项。</p>
<blockquote>
<p>这些准则不会匹配 GET 和 POST 参数或域名。例如，URLconf 在处理请求 <code>https://www.example.com/myapp/</code> 时，它会尝试匹配 <code>myapp/</code> 。处理请求 <code>https://www.example.com/myapp/?page=3</code> 时，也只会尝试匹配 <code>myapp/</code>。</p>
</blockquote>
</blockquote>
<ul>
<li><p><code>view</code></p>
<p>调用视图</p>
<blockquote>
<p>当 Django 找到了一个匹配的准则，就会调用这个特定的视图函数，</p>
<p>并传入一个 <code>HttpRequest</code>对象作为第一个参数，被“捕获”的参数以关键字参数的形式传入。</p>
<p>稍后，我们会给出一个例子。</p>
</blockquote>
</li>
<li><p><code>kwargs</code></p>
</li>
</ul>
<blockquote>
<p>任意个关键字参数可以作为一个字典传递给目标视图函数。本教程中不会使用这一特性。</p>
</blockquote>
<ul>
<li><p><code>name</code></p>
<blockquote>
<p>为你的 URL 取名能使你在 Django 的任意地方唯一地引用它，尤其是在模板中。这个有用的特性允许你只改一个文件就能全局地修改某个 URL 模式。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="第-2-部分"><a href="#第-2-部分" class="headerlink" title="第 2 部分"></a>第 2 部分</h2><blockquote>
<p>本教程从 教程1结束的地方开始。我们将设置数据库，创建第一个模型，并快速介绍 Django 自动生成的后台界面。</p>
</blockquote>
<h3 id="2-1-数据库配置"><a href="#2-1-数据库配置" class="headerlink" title="2.1 数据库配置"></a>2.1 数据库配置</h3><p>现在，打开 <code>mysite/settings.py</code> 。这是个包含了 Django 项目设置的 Python 模块。</p>
<blockquote>
<ul>
<li><p>通常，这个配置文件使用 SQLite 作为默认数据库。</p>
<p>如果你不熟悉数据库，或者只是想尝试下 Django，这是最简单的选择。</p>
<p>Python 内置 SQLite，所以你无需安装额外东西来使用它。</p>
<p>当你开始一个真正的项目时，你可能更倾向使用一个更具扩展性的数据库，例如 PostgreSQL，避免中途切换数据库这个令人头疼的问题。</p>
</li>
<li><p>如果你想使用其他数据库，你需要安装合适的 <a href="https://docs.djangoproject.com/zh-hans/4.2/topics/install/#database-installation">database bindings</a> ，然后改变设置文件中 <code>DATABASES</code> <code>&#39;default&#39;</code> 项目中的一些键值：</p>
<ul>
<li><code>ENGINE</code> – 可选值有 <code>&#39;django.db.backends.sqlite3&#39;</code>，<code>&#39;django.db.backends.postgresql&#39;</code>，<code>&#39;django.db.backends.mysql&#39;</code>，或 <code>&#39;django.db.backends.oracle&#39;</code>。其它 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/databases/#third-party-notes">可用后端</a>。</li>
<li><code>NAME</code> – 数据库的名称。如果你使用 SQLite，数据库将是你电脑上的一个文件，在这种情况下，<code>NAME</code>应该是此文件完整的绝对路径，包括文件名。默认值 <code>BASE_DIR / &#39;db.sqlite3&#39;</code> 将把数据库文件储存在项目的根目录。</li>
</ul>
<p>如果你不使用 SQLite，则必须添加一些额外设置，比如 <code>USER</code> 、 <code>PASSWORD</code>、 <code>HOST</code>等等。想了解更多数据库设置方面的内容，请看文档：<code>DATABASES</code>。</p>
<blockquote>
<p>SQLite 以外的其它数据库</p>
<p>如果你使用了 SQLite 以外的数据库，请确认在使用前已经创建了数据库。你可以通过在你的数据库交互式命令行中使用 “<code>CREATE DATABASE database_name;</code>“ 命令来完成这件事。</p>
<p>另外，还要确保该数据库用户中提供 <code>mysite/settings.py</code> 具有 “create database” 权限。这使得自动创建的 test database 能被以后的教程使用。</p>
<p>如果你使用 SQLite，那么你不需要在使用前做任何事——数据库会在需要的时候自动创建。</p>
</blockquote>
</li>
</ul>
</blockquote>
<ul>
<li><p>编辑 <code>mysite/settings.py</code> 文件前，先设置 <code>TIME_ZONE</code>为你自己时区。</p>
<blockquote>
<p>中华人民共和国：<code>PRC</code></p>
<p>People’s Republic of China</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511160142502.png" alt="image-20230511160142502" style="zoom:67%;" /> 
</blockquote>
</li>
<li><p>此外，关注一下文件头部的 <code>INSTALLED_APPS</code> 设置项。</p>
<blockquote>
<p>这里包括了会在你项目中启用的所有 Django 应用。应用能在多个项目中使用，你也可以打包并且发布应用，让别人使用它们。</p>
<p>通常， <code>INSTALLED_APPS</code></p>
<ul>
<li><code>django.contrib.admin</code> – 管理员站点， 你很快就会使用它。</li>
<li><code>django.contrib.auth</code>– 认证授权系统。</li>
<li><code>django.contrib.contenttypes</code> – 内容类型框架。</li>
<li><code>django.contrib.sessions</code> – 会话框架。</li>
<li><code>django.contrib.messages</code>– 消息框架。</li>
<li><code>django.contrib.staticfiles</code> – 管理静态文件的框架。</li>
</ul>
<p>这些应用被默认启用是为了给常规项目提供方便。</p>
</blockquote>
<p>默认开启的某些应用需要至少一个数据表，所以，在使用他们之前需要在数据库中创建一些表。请执行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; py manage.py migrate</span><br></pre></td></tr></table></figure>

<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511161637443.png" alt="image-20230511161637443" style="zoom:67%;" /> 

<p>这个 <code>migrate</code>命令查看 <code>INSTALLED_APPS</code> 配置，并根据 <code>mysite/settings.py</code> 文件中的数据库配置和随应用提供的数据库迁移文件（我们将在后面介绍这些），创建任何必要的数据库表。</p>
<p>你会看到它应用的每一个迁移都有一个消息。</p>
<p>如果你有兴趣，运行你的数据库的命令行客户端，输入 <code>\dt</code> （PostgreSQL）， <code>SHOW TABLES;</code> （MariaDB，MySQL）， <code>.tables</code> （SQLite）或 <code>SELECT TABLE_NAME FROM USER_TABLES;</code> （Oracle）来显示 Django 创建的表。</p>
<blockquote>
<p>写给极简主义者</p>
<p>就像之前说的，为了方便大多数项目，我们默认激活了一些应用，但并不是每个人都需要它们。如果你不需要某个或某些应用，你可以在运行 <code>migrate</code>前毫无顾虑地从 <code>INSTALLED_APPS</code> 里注释或者删除掉它们。 <code>migrate</code> 命令只会为在 <code>INSTALLED_APPS</code>里声明了的应用进行数据库迁移。</p>
</blockquote>
</blockquote>
</li>
</ul>
<h3 id="2-2-创建模型"><a href="#2-2-创建模型" class="headerlink" title="2.2 创建模型"></a>2.2 创建模型</h3><blockquote>
<p>在 Django 里写一个数据库驱动的 Web 应用的第一步是定义模型</p>
<p>也就是数据库结构设计和附加的其它元数据。</p>
<blockquote>
<p>设计哲学</p>
<p>一个模型就是单个定义你的数据的信息源。模型中包含了不可缺少的数据区域和你存储数据的行为。Django 遵循 <a href="https://docs.djangoproject.com/zh-hans/4.2/misc/design-philosophies/#dry">DRY 原则</a>。目的就是定义你的数据模型要在一位置上，而且自动从该位置推导一些事情。</p>
<p>来介绍一下迁移 - 举个例子，不像 Ruby On Rails，Django 的迁移代码是由你的模型文件自动生成的，它本质上是个历史记录，Django 可以用它来进行数据库的滚动更新，通过这种方式使其能够和当前的模型匹配。</p>
</blockquote>
</blockquote>
<ul>
<li><p>在这个投票应用中，需要创建两个模型：问题 <code>Question</code> 和选项 <code>Choice</code>。</p>
<ul>
<li><code>Question</code> 模型包括问题描述和发布时间。</li>
<li><code>Choice</code> 模型有两个字段，选项描述和当前得票数。</li>
</ul>
<p>每个选项属于一个问题。</p>
<p>这些概念可以通过一个 Python 类来描述。按照下面的例子来编辑 <code>polls/models.py</code> 文件：</p>
<p><code>polls/models.py</code> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Question</span>(models.Model):</span><br><span class="line">    question_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    pub_date = models.DateTimeField(<span class="string">&quot;date published&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Choice</span>(models.Model):</span><br><span class="line">    question = models.ForeignKey(Question, on_delete=models.CASCADE)</span><br><span class="line">    choice_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    votes = models.IntegerField(default=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>代码解释：</p>
<ul>
<li><p>每个模型被表示为 <code>django.db.models.Model</code> 类的子类。每个模型有许多类变量，它们都表示模型里的一个数据库字段。</p>
<blockquote>
<p>每个字段都是 <code>Field</code> 类的实例 - 比如，字符字段被表示为 <code>CharField</code>，日期时间字段被表示为 <code>DateTimeField</code>。这将告诉 Django 每个字段要处理的数据类型。</p>
</blockquote>
</li>
<li><p>每个 <code>Field</code> 类实例变量的名字（例如 <code>question_text</code> 或 <code>pub_date</code> ）也是字段名，所以最好使用对机器友好的格式。你将会在 Python 代码里使用它们，而数据库会将它们作为列名。</p>
<blockquote>
<p>你可以使用可选的选项来为 <code>Field</code> 定义一个人类可读的名字。这个功能在很多 Django 内部组成部分中都被使用了，而且作为文档的一部分。如果某个字段没有提供此名称，Django 将会使用对机器友好的名称，也就是变量名。</p>
<p>在上面的例子中，我们只为 <code>Question.pub_date</code> 定义了对人类友好的名字。对于模型内的其它字段，它们的机器友好名也会被作为人类友好名使用。</p>
</blockquote>
</li>
<li><p>定义某些 <code>Field</code>类实例需要参数。</p>
<blockquote>
<p>例如 <code>CharField</code> 需要一个 <code>max_length</code> 参数。这个参数的用处不止于用来定义数据库结构，也用于验证数据，我们稍后将会看到这方面的内容。</p>
</blockquote>
</li>
<li><p><code>Field</code>也能够接收多个可选参数；在上面的例子中：我们将 <code>votes</code> 的 <code>default</code> 也就是默认值，设为0。</p>
</li>
<li><p>注意在最后，我们使用 <code>ForeignKey</code>定义了一个关系。</p>
<blockquote>
<p>这将告诉 Django，每个 <code>Choice</code> 对象都关联到一个 <code>Question</code> 对象。Django 支持所有常用的数据库关系：多对一、多对多和一对一。</p>
</blockquote>
</li>
</ul>
</blockquote>
</li>
</ul>
<h3 id="2-3-激活模型"><a href="#2-3-激活模型" class="headerlink" title="2.3 激活模型"></a>2.3 激活模型</h3><blockquote>
<p>上面的一小段用于创建模型的代码给了 Django 很多信息，通过这些信息，Django 可以：</p>
<ul>
<li>为这个应用创建数据库 schema（生成 <code>CREATE TABLE</code> 语句）。</li>
<li>创建可以与 <code>Question</code> 和 <code>Choice</code> 对象进行交互的 Python 数据库 API。</li>
</ul>
<p>但是首先得把 <code>polls</code> 应用安装到我们的项目里。</p>
<blockquote>
<p>设计哲学</p>
<p>Django 应用是“可插拔”的。你可以在多个项目中使用同一个应用。除此之外，你还可以发布自己的应用，因为它们并不会被绑定到当前安装的 Django 上。</p>
</blockquote>
</blockquote>
<ul>
<li><p>为了在我们的工程中包含这个应用，我们需要在配置类 <code>INSTALLED_APPS</code> 中添加设置。</p>
<blockquote>
<p>因为 <code>PollsConfig</code> 类写在文件 <code>polls/apps.py</code> 中，所以它的点式路径是 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;polls.apps.PollsConfig&#x27;</span></span><br></pre></td></tr></table></figure>

<p>在文件 <code>mysite/settings.py</code> 中 <code>INSTALLED_APPS</code>子项添加点式路径后，它看起来像这样：</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511163554111.png" alt="image-20230511163554111" style="zoom:67%;" /> 
</blockquote>
</li>
<li><p>现在你的 Django 项目会包含 <code>polls</code> 应用。接着运行下面的命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; py manage.py makemigrations polls</span><br></pre></td></tr></table></figure>

<blockquote>
<p>你将会看到类似于下面这样的输出：</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511163706521.png" alt="image-20230511163706521" style="zoom: 67%;" /> 

<ul>
<li><p>通过运行 <code>makemigrations</code> 命令，Django 会检测你对模型文件的修改（在这种情况下，你已经取得了新的），并且把修改的部分储存为一次 <em>迁移</em>。</p>
<blockquote>
<ul>
<li><p><strong>迁移</strong>是 Django 对于模型定义（也就是你的数据库结构）的变化的储存形式</p>
<p>它们其实也只是一些你磁盘上的文件。如果你想的话，你可以阅读一下你模型的迁移数据，它被储存在 <code>polls/migrations/0001_initial.py</code> 里。别担心，你不需要每次都阅读迁移文件，但是它们被设计成人类可读的形式，这是为了便于你手动调整 Django 的修改方式。</p>
</li>
</ul>
</blockquote>
</li>
</ul>
</blockquote>
</li>
<li><p>Django 有一个自动执行数据库迁移并同步管理你的数据库结构的命令 ，这个命令是 <code>migrate</code>。</p>
<blockquote>
<p>我们马上就会接触它 - 但是首先，让我们看看迁移命令会执行哪些 SQL 语句。</p>
<p><code>sqlmigrate</code> 命令接收一个迁移的名称，然后返回对应的 SQL：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; py manage.py sqlmigrate polls 0001</span><br></pre></td></tr></table></figure>

<p>你将会看到类似下面这样的输出：</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511164322675.png" alt="image-20230511164322675" style="zoom: 67%;" />

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">BEGIN;</span><br><span class="line">--</span><br><span class="line">-- Create model Question</span><br><span class="line">--</span><br><span class="line">CREATE TABLE &quot;polls_question&quot; (</span><br><span class="line">    &quot;id&quot; bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,</span><br><span class="line">    &quot;question_text&quot; varchar(200) NOT NULL,</span><br><span class="line">    &quot;pub_date&quot; timestamp with time zone NOT NULL</span><br><span class="line">);</span><br><span class="line">--</span><br><span class="line">-- Create model Choice</span><br><span class="line">--</span><br><span class="line">CREATE TABLE &quot;polls_choice&quot; (</span><br><span class="line">    &quot;id&quot; bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,</span><br><span class="line">    &quot;choice_text&quot; varchar(200) NOT NULL,</span><br><span class="line">    &quot;votes&quot; integer NOT NULL,</span><br><span class="line">    &quot;question_id&quot; bigint NOT NULL</span><br><span class="line">);</span><br><span class="line">ALTER TABLE &quot;polls_choice&quot;</span><br><span class="line">  ADD CONSTRAINT &quot;polls_choice_question_id_c5b4b260_fk_polls_question_id&quot;</span><br><span class="line">    FOREIGN KEY (&quot;question_id&quot;)</span><br><span class="line">    REFERENCES &quot;polls_question&quot; (&quot;id&quot;)</span><br><span class="line">    DEFERRABLE INITIALLY DEFERRED;</span><br><span class="line">CREATE INDEX &quot;polls_choice_question_id_c5b4b260&quot; ON &quot;polls_choice&quot; (&quot;question_id&quot;);</span><br><span class="line"></span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure>

<p>请注意以下几点：</p>
<ul>
<li>输出的内容和你使用的数据库有关，上面的输出示例使用的是 PostgreSQL。</li>
<li>数据库的表名是由应用名(<code>polls</code>)和模型名的小写形式( <code>question</code> 和 <code>choice</code>)连接而来。（如果需要，你可以自定义此行为。）</li>
<li>主键(IDs)会被自动创建。(当然，你也可以自定义。)</li>
<li>默认的，Django 会在外键字段名后追加字符串 <code>&quot;_id&quot;</code> 。（同样，这也可以自定义。）</li>
<li>外键关系由 <code>FOREIGN KEY</code> 生成。你不用关心 <code>DEFERRABLE</code> 部分，它只是告诉 PostgreSQL，请在事务全都执行完之后再创建外键关系。</li>
<li>它是为你正在使用的数据库定制的，因此特定于数据库的字段类型，例如“auto_increment”（MySQL）、“bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY”（PostgreSQL）或“integer primary key autoincrement” &#96;&#96; (SQLite) 会自动为您处理。 字段名称的引用也是如此——例如，使用双引号或单引号。</li>
<li>这个 <code>sqlmigrate</code>命令并没有真正在你的数据库中的执行迁移 - 相反，它只是把命令输出到屏幕上，让你看看 Django 认为需要执行哪些 SQL 语句。这在你想看看 Django 到底准备做什么，或者当你是数据库管理员，需要写脚本来批量处理数据库时会很有用。</li>
</ul>
<p>如果你感兴趣，你也可以试试运行 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python manage.py check</span><br></pre></td></tr></table></figure>

<p>这个命令帮助你检查项目中的问题，并且在检查过程中不会对数据库进行任何操作。</p>
</blockquote>
</li>
<li><p>现在，再次运行 <code>migrate</code> 命令，在数据库里创建新定义的模型的数据表：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; py manage.py migrate</span><br></pre></td></tr></table></figure>

<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511164953600.png" alt="image-20230511164953600" style="zoom:67%;" /> 

<p>这个 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/django-admin/#django-admin-migrate"><code>migrate</code></a> 命令选中所有还没有执行过的迁移（Django 通过在数据库中创建一个特殊的表 <code>django_migrations</code> 来跟踪执行过哪些迁移）并应用在数据库上 - 也就是将你对模型的更改同步到数据库结构上。</p>
<blockquote>
<p>迁移是非常强大的功能，它能让你在开发过程中持续的改变数据库结构而不需要重新删除和创建表 - 它专注于使数据库平滑升级而不会丢失数据。</p>
</blockquote>
<p>我们会在后面的教程中更加深入的学习这部分内容，</p>
<p>现在，你只需要记住，&#x3D;&#x3D;改变模型需要这三步&#x3D;&#x3D;：</p>
<ul>
<li>编辑 <code>models.py</code> 文件，改变模型。</li>
<li>运行 <code>python manage.py makemigrations</code> 为模型的改变生成迁移文件。</li>
<li>运行 <code>python manage.py migrate</code>来应用数据库迁移。</li>
</ul>
<blockquote>
<p>数据库迁移被分解成生成和应用两个命令是为了让你能够在代码控制系统上提交迁移数据并使其能在多个应用里使用；这不仅仅会让开发更加简单，也给别的开发者和生产环境中的使用带来方便。</p>
<p>通过阅读文档 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/django-admin/">Django 后台文档</a> ，你可以获得关于 <code>manage.py</code> 工具的更多信息。</p>
</blockquote>
</blockquote>
</li>
</ul>
<h3 id="2-4-初试-API"><a href="#2-4-初试-API" class="headerlink" title="2.4 初试 API"></a>2.4 初试 API</h3><blockquote>
<p>现在让我们进入交互式 Python 命令行，尝试一下 Django 为你创建的各种 API。</p>
</blockquote>
<ul>
<li><p>通过以下命令打开 Python 命令行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; py manage.py shell</span><br></pre></td></tr></table></figure>

<blockquote>
<p>我们使用这个命令而不是简单的使用“python”是因为 <code>manage.py</code> 会设置 <code>DJANGO_SETTINGS_MODULE</code>环境变量，</p>
<p>这个变量会让 Django 根据 <code>mysite/settings.py</code> 文件来设置 Python 包的导入路径。</p>
</blockquote>
<p>进入Shell交互命令行，能做什么？</p>
<ul>
<li>操作models （Django 已经为你创建了对应的API ）</li>
</ul>
<blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from polls.models import Choice, Question  <span class="comment"># Import the model classes we just wrote.</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">No questions are <span class="keyword">in</span> the system yet.</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Question.objects.all()</span></span><br><span class="line">&lt;QuerySet []&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Create a new Question.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Support <span class="keyword">for</span> time zones is enabled <span class="keyword">in</span> the default settings file, so</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Django expects a datetime with tzinfo <span class="keyword">for</span> pub_date. Use timezone.now()</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">instead of datetime.datetime.now() and it will <span class="keyword">do</span> the right thing.</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from django.utils import timezone</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; q = Question(question_text=<span class="string">&quot;What&#x27;s new?&quot;</span>, pub_date=timezone.now())</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Save the object into the database. You have to call save() explicitly.</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; q.save()</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Now it has an ID.</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; q.id</span></span><br><span class="line">1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Access model field values via Python attributes.</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; q.question_text</span></span><br><span class="line">&quot;What&#x27;s new?&quot;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; q.pub_date</span></span><br><span class="line">datetime.datetime(2012, 2, 26, 13, 0, 0, 775217, tzinfo=datetime.timezone.utc)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Change values by changing the attributes, <span class="keyword">then</span> calling save().</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; q.question_text = <span class="string">&quot;What&#x27;s up?&quot;</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; q.save()</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">objects.all() displays all the questions <span class="keyword">in</span> the database.</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Question.objects.all()</span></span><br><span class="line">&lt;QuerySet [&lt;Question: Question object (1)&gt;]&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>添加<code>str</code>方法</p>
<blockquote>
<p><code>&lt;Question: Question object (1)&gt;</code> 对于我们了解这个对象的细节没什么帮助。</p>
<p>让我们通过编辑 <code>Question</code> 模型的代码（位于 <code>polls/models.py</code> 中）来修复这个问题。</p>
<p>给 <code>Question</code> 和 <code>Choice</code> 增加 <code>__str__()</code>方法。</p>
<p><code>polls/models.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Question</span>(models.Model):</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.question_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Choice</span>(models.Model):</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.choice_text</span><br></pre></td></tr></table></figure>

<p>给模型增加 <code>__str__()</code>方法是很重要的，这不仅仅能给你在命令行里使用带来方便，Django 自动生成的 admin 里也使用这个方法来表示对象。</p>
<p>让我们再为此模型添加一个自定义方法：</p>
<p><code>polls/models.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Question</span>(models.Model):</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">was_published_recently</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.pub_date &gt;= timezone.now() - datetime.timedelta(days=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511185059293.png" alt="image-20230511185059293" style="zoom:67%;" /> 

<ul>
<li><p>新加入的 <code>import datetime</code> 和 <code>from django.utils import timezone</code> </p>
<p>分别导入了 Python 的标准 <a href="https://docs.python.org/3/library/datetime.html#module-datetime"><code>datetime</code></a> 模块和 Django 中和时区相关的 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/utils/#module-django.utils.timezone"><code>django.utils.timezone</code></a> 工具模块。</p>
<blockquote>
<p>如果你不太熟悉 Python 中的时区处理，看看 <a href="https://docs.djangoproject.com/zh-hans/4.2/topics/i18n/timezones/">时区支持文档</a> 吧。</p>
</blockquote>
</li>
</ul>
</blockquote>
</li>
<li><p>再次操作Shell</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from polls.models import Choice, Question</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Make sure our __str__() addition worked.</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Question.objects.all()</span></span><br><span class="line">&lt;QuerySet [&lt;Question: What&#x27;s up?&gt;]&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Django provides a rich database lookup API that<span class="string">&#x27;s entirely driven by</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">keyword arguments.</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="string">&gt;&gt; Question.objects.filter(id=1)</span></span></span><br><span class="line">&lt;QuerySet [&lt;Question: What&#x27;s up?&gt;]&gt;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="string">&gt;&gt; Question.objects.filter(question_text__startswith=&quot;What&quot;)</span></span></span><br><span class="line">&lt;QuerySet [&lt;Question: What&#x27;s up?&gt;]&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Get the question that was published this year.</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="string">&gt;&gt; from django.utils import timezone</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="string">&gt;&gt; current_year = timezone.now().year</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="string">&gt;&gt; Question.objects.get(pub_date__year=current_year)</span></span></span><br><span class="line">&lt;Question: What&#x27;s up?&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Request an ID that doesn&#x27;</span>t exist, this will raise an exception.</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Question.objects.get(<span class="built_in">id</span>=2)</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">    ...</span><br><span class="line">DoesNotExist: Question matching query does not exist.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Lookup by a primary key is the most common <span class="keyword">case</span>, so Django provides a</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">shortcut <span class="keyword">for</span> primary-key exact lookups.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The following is identical to Question.objects.get(<span class="built_in">id</span>=1).</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Question.objects.get(pk=1)</span></span><br><span class="line">&lt;Question: What&#x27;s up?&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Make sure our custom method worked.</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; q = Question.objects.get(pk=1)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; q.was_published_recently()</span></span><br><span class="line">True</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Give the Question a couple of Choices. The create call constructs a new</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Choice object, does the INSERT statement, adds the choice to the <span class="built_in">set</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">of available choices and returns the new Choice object. Django creates</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">a <span class="built_in">set</span> to hold the <span class="string">&quot;other side&quot;</span> of a ForeignKey relation</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(e.g. a question<span class="string">&#x27;s choice) which can be accessed via the API.</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="string">&gt;&gt; q = Question.objects.get(pk=1)</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Display any choices from the related object set -- none so far.</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="string">&gt;&gt; q.choice_set.all()</span></span></span><br><span class="line">&lt;QuerySet []&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Create three choices.</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="string">&gt;&gt; q.choice_set.create(choice_text=&quot;Not much&quot;, votes=0)</span></span></span><br><span class="line">&lt;Choice: Not much&gt;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="string">&gt;&gt; q.choice_set.create(choice_text=&quot;The sky&quot;, votes=0)</span></span></span><br><span class="line">&lt;Choice: The sky&gt;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="string">&gt;&gt; c = q.choice_set.create(choice_text=&quot;Just hacking again&quot;, votes=0)</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Choice objects have API access to their related Question objects.</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="string">&gt;&gt; c.question</span></span></span><br><span class="line">&lt;Question: What&#x27;s up?&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">And vice versa: Question objects get access to Choice objects.</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="string">&gt;&gt; q.choice_set.all()</span></span></span><br><span class="line">&lt;QuerySet [&lt;Choice: Not much&gt;, &lt;Choice: The sky&gt;, &lt;Choice: Just hacking again&gt;]&gt;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="string">&gt;&gt; q.choice_set.count()</span></span></span><br><span class="line">3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">The API automatically follows relationships as far as you need.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Use double underscores(双下划线) to separate relationships.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">This works as many levels deep as you want; there&#x27;</span>s no <span class="built_in">limit</span>.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Find all Choices <span class="keyword">for</span> any question whose pub_date is <span class="keyword">in</span> this year</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(reusing the <span class="string">&#x27;current_year&#x27;</span> variable we created above).</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Choice.objects.filter(question__pub_date__year=current_year)</span></span><br><span class="line">&lt;QuerySet [&lt;Choice: Not much&gt;, &lt;Choice: The sky&gt;, &lt;Choice: Just hacking again&gt;]&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Let<span class="string">&#x27;s delete one of the choices. Use delete() for that.</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="string">&gt;&gt; c = q.choice_set.filter(choice_text__startswith=&quot;Just hacking&quot;)</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="string">&gt;&gt; c.delete()</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><p>阅读 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/models/relations/">访问关系对象</a> 文档可以获取关于数据库关系的更多内容。</p>
</li>
<li><p>想知道关于双下划线的更多用法，参见 <a href="https://docs.djangoproject.com/zh-hans/4.2/topics/db/queries/#field-lookups-intro">查找字段</a> 文档。</p>
</li>
<li><p>数据库 API 的所有细节可以在 <a href="https://docs.djangoproject.com/zh-hans/4.2/topics/db/queries/">数据库 API 参考</a> 文档中找到。</p>
</li>
</ul>
</blockquote>
</li>
</ul>
<h3 id="2-5-介绍-Django-管理页面"><a href="#2-5-介绍-Django-管理页面" class="headerlink" title="2.5 介绍 Django 管理页面"></a>2.5 介绍 Django 管理页面</h3><blockquote>
<p>设计哲学</p>
<p>为你的员工或客户生成一个用户添加，修改和删除内容的后台是一项缺乏创造性和乏味的工作。因此，Django 全自动地根据模型创建后台界面。</p>
<p>Django 产生于一个公众页面和内容发布者页面完全分离的新闻类站点的开发过程中。站点管理人员使用管理系统来添加新闻、事件和体育时讯等，这些添加的内容被显示在公众页面上。Django 通过为站点管理人员创建统一的内容编辑界面解决了这个问题。</p>
<p>管理界面不是为了网站的访问者，而是为管理者准备的。</p>
</blockquote>
<h4 id="创建一个管理员账号"><a href="#创建一个管理员账号" class="headerlink" title="创建一个管理员账号"></a>创建一个管理员账号</h4><ul>
<li><p>首先，我们得创建一个能登录管理页面的用户。请运行下面的命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; py manage.py createsuperuser</span><br></pre></td></tr></table></figure>

<p>键入你想要使用的用户名，然后按下回车键：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Username: admin</span><br></pre></td></tr></table></figure>

<p>然后提示你输入想要使用的邮件地址：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Email address: admin@example.com</span><br></pre></td></tr></table></figure>

<p>最后一步是输入密码。你会被要求输入两次密码，第二次的目的是为了确认第一次输入的确实是你想要的密码。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Password: **********</span><br><span class="line">Password (again): *********</span><br><span class="line">Superuser created successfully.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>我的密码使用是：admin0314</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511192431718.png" alt="image-20230511192431718" style="zoom:80%;" /></blockquote>
</li>
</ul>
<h4 id="启动开发服务器"><a href="#启动开发服务器" class="headerlink" title="启动开发服务器"></a>启动开发服务器</h4><ul>
<li><p>Django 的管理界面默认就是启用的。让我们启动开发服务器，看看它到底是什么样的。</p>
<p>如果开发服务器未启动，用以下命令启动它：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; py manage.py runserver</span><br></pre></td></tr></table></figure>
</li>
<li><p>现在，打开浏览器，转到你本地域名的 “&#x2F;admin&#x2F;” 目录， </p>
<p>比如 <code>http://127.0.0.1:8000/admin/ </code>。你应该会看见管理员登录界面：</p>
<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511192719714.png" alt="image-20230511192719714" style="zoom: 50%;" /> 

<blockquote>
<p>因为 <a href="https://docs.djangoproject.com/zh-hans/4.2/topics/i18n/translation/">翻译</a> 功能默认是开启的，如果你设置了 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/settings/#std-setting-LANGUAGE_CODE"><code>LANGUAGE_CODE</code></a>，登录界面将显示你设置的语言（如果 Django 有相应的翻译）。</p>
</blockquote>
</blockquote>
</li>
</ul>
<h4 id="进入管理站点页面"><a href="#进入管理站点页面" class="headerlink" title="进入管理站点页面"></a>进入管理站点页面</h4><ul>
<li><p>现在，试着使用你在上一步中创建的超级用户来登录。然后你将会看到 Django 管理页面的索引页：</p>
<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511192844441.png" alt="image-20230511192844441" style="zoom: 50%;" /> 
</blockquote>
<p>你将会看到几种可编辑的内容：组和用户。</p>
<p>它们是由 <code>django.contrib.auth</code>提供的，这是 Django 开发的认证框架。</p>
</li>
</ul>
<h4 id="向管理页面中加入投票应用"><a href="#向管理页面中加入投票应用" class="headerlink" title="向管理页面中加入投票应用"></a>向管理页面中加入投票应用</h4><blockquote>
<p>但是我们的投票应用在哪呢？它没在索引页面里显示。</p>
<p>只需要再做一件事：</p>
<p>我们得告诉管理，问题 <code>Question</code> 对象需要一个后台接口。</p>
</blockquote>
<ul>
<li><p>打开 <code>polls/admin.py</code> 文件，把它编辑成下面这样</p>
<p><code>polls/admin.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line">admin.site.register(Question)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="体验便捷的管理功能"><a href="#体验便捷的管理功能" class="headerlink" title="体验便捷的管理功能"></a>体验便捷的管理功能</h4><ul>
<li><p>现在我们向管理页面注册了问题 <code>Question</code> 类。</p>
<p>Django 知道它应该被显示在索引页里：</p>
<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511193227553.png" alt="image-20230511193227553" style="zoom:67%;" /> 
</blockquote>
</li>
<li><p>点击 “Questions” 。</p>
<blockquote>
<p>现在看到是问题 “Questions” 对象的列表 “change list” 。</p>
<p>这个界面会显示所有数据库里的问题 Question 对象，你可以选择一个来修改。</p>
<p>这里现在有我们在上一部分中创建的 “What’s up?” 问题。</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511193405499.png" alt="image-20230511193405499" style="zoom: 43%;" /> 
</blockquote>
</li>
<li><p>点击 “What’s up?” 来编辑这个问题（Question）对象：</p>
<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511193459916.png" alt="image-20230511193459916" style="zoom:43%;" /> 

<blockquote>
<p>注意事项：</p>
<ul>
<li>这个表单是从问题 <code>Question</code> 模型中自动生成的</li>
<li>不同的字段类型（日期时间字段 <code>DateTimeField</code> 、字符字段 <code>CharField</code>）会生成对应的 HTML 输入控件。每个类型的字段都知道它们该如何在管理页面里显示自己。</li>
<li>每个日期时间字段 <code>DateTimeField</code>都有 JavaScript 写的快捷按钮。日期有转到今天（Today）的快捷按钮和一个弹出式日历界面。时间有设为现在（Now）的快捷按钮和一个列出常用时间的方便的弹出式列表。</li>
</ul>
<p>页面的底部提供了几个选项：</p>
<ul>
<li>保存（Save） - 保存改变，然后返回对象列表。</li>
<li>保存并继续编辑（Save and continue editing） - 保存改变，然后重新载入当前对象的修改界面。</li>
<li>保存并新增（Save and add another） - 保存改变，然后添加一个新的空对象并载入修改界面。</li>
<li>删除（Delete） - 显示一个确认删除页面。</li>
</ul>
<p>如果显示的 “发布日期(Date Published)” 和你在 教程 1 里创建它们的时间不一致，这意味着你可能没有正确的设置 <code>TIME_ZONE</code>。改变设置，然后重新载入页面看看是否显示了正确的值。</p>
</blockquote>
</blockquote>
</li>
<li><p>编辑一下</p>
<p>通过点击 “今天(Today)” 和 “现在(Now)” 按钮改变 “发布日期(Date Published)”。</p>
<p>然后点击 “保存并继续编辑(Save and add another)”按钮。</p>
<p>然后点击右上角的 “历史(History)”按钮。</p>
<p>你会看到一个列出了所有通过 Django 管理页面对当前对象进行的改变的页面，其中列出了时间戳和进行修改操作的用户名：</p>
<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511193953423.png" alt="image-20230511193953423" style="zoom: 80%;" /> 
</blockquote>
</li>
<li><p>当你熟悉了数据库 API 之后，你就可以开始阅读 教程第 3 部分，</p>
<p>下一部分我们将会学习如何为投票应用添加更多视图。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>《Cisco计网实验》速查助记</title>
    <url>/butterflyblog/2023/08/12/%E3%80%8ACisco%E8%AE%A1%E7%BD%91%E5%AE%9E%E9%AA%8C%E3%80%8B%E9%80%9F%E6%9F%A5%E5%8A%A9%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="《Cisco计网实验》速查助记"><a href="#《Cisco计网实验》速查助记" class="headerlink" title="《Cisco计网实验》速查助记"></a>《Cisco计网实验》速查助记</h1><h2 id="【速查助记】"><a href="#【速查助记】" class="headerlink" title="【速查助记】"></a>【速查助记】</h2><h3 id="1-查看配置"><a href="#1-查看配置" class="headerlink" title="1. 查看配置"></a>1. 查看配置</h3><ul>
<li><p>查看信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show running-config			查看配置信息</span><br><span class="line">show ip route				查看路由信息</span><br><span class="line">show ip protocols			查看路由协议信息</span><br><span class="line">show vlan					查看vlan信息</span><br><span class="line">show int vlan 1				查看vlan 1 详细信息</span><br><span class="line">show ip nat translations	查看NAT转换情况</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-配置IP"><a href="#2-配置IP" class="headerlink" title="2. 配置IP"></a>2. 配置IP</h3><ul>
<li><p>交换机的 ip 设置是设置在vlan里的（创建vlan，划分vlan端口，设置vlan的IP，开启）</p>
<p>所以说，一般来说，交换机（二层、三层交换机）都是需要划分vlan的（默认全在vlan 1 内）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vlan 10</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">int fa 0/1</span><br><span class="line">switchport access vlan 10</span><br><span class="line">exit</span><br><span class="line">int vlan 10</span><br><span class="line">ip address 192.168.1.1 255.255.255.0</span><br><span class="line">no shutdown</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>
</li>
<li><p>路由器的 ip 设置是设置在端口上的（进入端口，设置端口的IP，开启）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int fa 1/0</span><br><span class="line">ip address 192.168.2.1 255.255.255.0</span><br><span class="line">no shutdown</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>
</li>
<li><p>ip设置之后，都必须开启<code>no shutdown</code></p>
</li>
</ul>
<h3 id="3-配置路由"><a href="#3-配置路由" class="headerlink" title="3. 配置路由"></a>3. 配置路由</h3><ul>
<li><p>三层交换机需要自行开启路由模块<code>ip routing</code></p>
</li>
<li><p>静态路由</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip route 172.16.4.0 255.255.255.0 172.16.3.2	网段 掩码 下一跳</span><br><span class="line">ip route 0.0.0.0 0.0.0.0 172.16.3.1		设置默认路由</span><br></pre></td></tr></table></figure>
</li>
<li><p>动态路由</p>
<p>配置RIP协议直连网段，只需要写网段IP，但要改版本号为2；</p>
<p>配置OSPF协议直连网段，需要网段IP、反掩码、骨干区域。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">router rip</span><br><span class="line">verson 2</span><br><span class="line">network 192.168.2.0</span><br><span class="line"></span><br><span class="line">router ospf</span><br><span class="line">network 192.168.2.0 0.0.0.255 area 0</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-防火墙-ACL"><a href="#4-防火墙-ACL" class="headerlink" title="4. 防火墙 ACL"></a>4. 防火墙 ACL</h3><ul>
<li><p>访问控制列表</p>
<ul>
<li>标准</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip access-list standard 1		这里1的意思是编号，可以为1-99</span><br><span class="line">permit 172.16.1.0 0.0.0.255 	注意要用反掩码</span><br><span class="line">deny 172.16.2.0 0.0.0.255</span><br><span class="line"></span><br><span class="line">int fa 0/0</span><br><span class="line">ip access-group 1 out</span><br></pre></td></tr></table></figure>

<ul>
<li>扩展</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">access-list 访问控制列表号 &#123;deny/permit&#125; 协议类型 源网络地址 [通配符掩码(反掩码)] 目的网络地址 [通配符掩码] [运算符 端口号]</span><br><span class="line"></span><br><span class="line">access-list 100 permit tcp any host 172.16.4.2 eq 80 </span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-内外网-NAT"><a href="#5-内外网-NAT" class="headerlink" title="5. 内外网 NAT"></a>5. 内外网 NAT</h3><ul>
<li><p>网络地址转换NAT</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">配置静态NAT</span><br><span class="line">ip nat inside 		指定内部端口（int下）</span><br><span class="line">ip nat outside 		指定外部端口（int下）</span><br><span class="line">ip nat inside source static 192.168.1.2 222.0.1.2	配置静态网络地址映射（config下）</span><br></pre></td></tr></table></figure>
</li>
<li><p>网络端口地址转换NAPT</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip nat inside 		指定内部端口（int下）</span><br><span class="line">ip nat outside 		指定外部端口（int下）</span><br><span class="line">access-list 1 permit 192.168.1.0 0.0.0.255 			创建访问列表（config下）</span><br><span class="line">ip nat pool mypool 200.0.1.3 200.0.1.3 netmask 255.255.255.0 	创建IP地址池（config下）</span><br><span class="line">ip nat inside source list 1 pool mypool overload 	配置NAPT：从访问列表映射到IP地址池（config下）</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="6-碎碎念"><a href="#6-碎碎念" class="headerlink" title="6. 碎碎念"></a>6. 碎碎念</h3><ul>
<li><p>连线</p>
<ul>
<li>与交换机连线：直连线 Copper Straight-Through</li>
<li>与路由器连线：交叉线 Copper Cross-Over</li>
<li>路由器之间：串口线 Serial DCE</li>
<li>串口线的 DCE 端需要设置时钟频率<code>clock rate 64000</code></li>
</ul>
</li>
<li><p>两个地方会用反掩码，而不是掩码</p>
<ol>
<li>动态路由协议OSPF协议直连网段设置</li>
<li>访问控制列表ACL配置IP设置</li>
</ol>
</li>
<li><p>计算机网络实验无非就是两件事</p>
<ul>
<li>配置 IP：主机IP、服务器IP、端口IP</li>
<li>配置 路由：直连网段（自动）、静态路由（含默认路由）、动态路由（RIP&#x2F;OSPF）</li>
</ul>
<p>做完上面两个内容，就能ping通了。</p>
<p>另外，就是配置 访问控制列表ACL、网络地址转换NAT。</p>
</li>
<li><p>忘记命令，记住一些重要简称</p>
<p>善用 tab 补全键，善用 ? 进行提示</p>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计网实验</tag>
      </tags>
  </entry>
  <entry>
    <title>《汇编语言》Notes</title>
    <url>/butterflyblog/2023/09/05/%E3%80%8AAssembly%20Language%E3%80%8BNotes/</url>
    <content><![CDATA[<h1 id="《汇编语言》Notes"><a href="#《汇编语言》Notes" class="headerlink" title="《汇编语言》Notes"></a>《汇编语言》Notes</h1><blockquote>
<p>知识来源：同济大学汇编教学课件</p>
<p>2023.9.5@Seymour0314</p>
</blockquote>
<h2 id="前言：重点跳转"><a href="#前言：重点跳转" class="headerlink" title="前言：重点跳转"></a>前言：重点跳转</h2><blockquote>
<ul>
<li><p>基本指令</p>
<h5 id="3-3-MOV指令、PUSH指令、POP指令、LEA指令等"><a href="#3-3-MOV指令、PUSH指令、POP指令、LEA指令等" class="headerlink" title="3.3 MOV指令、PUSH指令、POP指令、LEA指令等"></a><a href="#jump_move">3.3 MOV指令、PUSH指令、POP指令、LEA指令等</a></h5></li>
<li><p>DOS功能调用</p>
<h5 id="3-13-DOS系统功能调用"><a href="#3-13-DOS系统功能调用" class="headerlink" title="3.13 DOS系统功能调用"></a><a href="#jump_dos">3.13 DOS系统功能调用</a></h5></li>
<li><p>基础知识</p>
<h5 id="4-2-常数、变量和标号"><a href="#4-2-常数、变量和标号" class="headerlink" title="4.2 常数、变量和标号"></a><a href="#%E5%B8%B8%E6%95%B0%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E6%A0%87%E5%8F%B7">4.2 常数、变量和标号</a></h5></li>
<li><p>更多指令</p>
<h5 id="4-9-算术运算指令"><a href="#4-9-算术运算指令" class="headerlink" title="4.9 算术运算指令"></a><a href="#jump_count">4.9 算术运算指令</a></h5><h5 id="4-10-逻辑运算指令"><a href="#4-10-逻辑运算指令" class="headerlink" title="4.10 逻辑运算指令"></a><a href="#jump_logic">4.10 逻辑运算指令</a></h5><h5 id="5-1-转移指令"><a href="#5-1-转移指令" class="headerlink" title="5.1 转移指令"></a><a href="#jump_jmp">5.1 转移指令</a></h5><h5 id="5-2-循环指令"><a href="#5-2-循环指令" class="headerlink" title="5.2 循环指令"></a><a href="#jump_loop">5.2 循环指令</a></h5></li>
<li><p>模板使用</p>
<h5 id="一、模板"><a href="#一、模板" class="headerlink" title="一、模板"></a><a href="#jump_temp">一、模板</a></h5></li>
</ul>
</blockquote>
<h2 id="第一课-基础知识"><a href="#第一课-基础知识" class="headerlink" title="第一课 基础知识"></a>第一课 基础知识</h2><h3 id="1-1-信息单位与数据类型"><a href="#1-1-信息单位与数据类型" class="headerlink" title="1.1 信息单位与数据类型"></a>1.1 信息单位与数据类型</h3><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230903202323153.png" alt="image-20230903202323153" style="zoom:50%;" /> 



<h3 id="1-2-进制转换"><a href="#1-2-进制转换" class="headerlink" title="1.2 进制转换"></a>1.2 进制转换</h3><ul>
<li>进制<ul>
<li>十六进制 Hexadecimal，简写H</li>
<li>十进制 Decimal，简写D</li>
<li>八进制 Octonary，简写Q</li>
<li>二进制 Binary，简写B</li>
</ul>
</li>
</ul>
<h4 id="（1）X进制-转-十进制"><a href="#（1）X进制-转-十进制" class="headerlink" title="（1）X进制 转 十进制"></a>（1）X进制 转 十进制</h4><ul>
<li>位权法</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230903201906663.png" alt="image-20230903201906663" style="zoom: 50%;" /> 

<h4 id="（2）十进制-转换-X进制"><a href="#（2）十进制-转换-X进制" class="headerlink" title="（2）十进制 转换 X进制"></a>（2）十进制 转换 X进制</h4><ul>
<li>整数部分：除X取余，逆序排列</li>
<li>小数部分：乘X取整，顺序排列</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230903202121187.png" alt="image-20230903202121187" style="zoom:50%;" />  

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230903202104467.png" alt="image-20230903202104467" style="zoom: 50%;" /> 



<h3 id="1-3-编码"><a href="#1-3-编码" class="headerlink" title="1.3 编码"></a>1.3 编码</h3><ul>
<li>编码<ul>
<li>数值类型编码<ul>
<li>无符号数<ul>
<li>本身就是数值</li>
</ul>
</li>
<li>补码（有符号数）<ul>
<li>正数：最高位0，本身就是数值</li>
<li>负数：最高位1，取反加1得到的是其绝对值。</li>
</ul>
</li>
</ul>
</li>
<li>非数值类型编码<ul>
<li>ASCII码</li>
<li>Unicode编码</li>
<li>…</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="1-4-溢出"><a href="#1-4-溢出" class="headerlink" title="1.4 溢出"></a>1.4 溢出</h3><ul>
<li><p>人为理解：</p>
<ul>
<li>超出表示范围即是溢出。</li>
</ul>
</li>
<li><p>汇编体现：</p>
<ul>
<li>无符号数：CF位置1，溢出。</li>
<li>有符号数（补码）：OF位置1，溢出。</li>
</ul>
</li>
<li><p>最值：</p>
<ul>
<li>无符号数：</li>
</ul>
<table>
<thead>
<tr>
<th>位数</th>
<th>最小</th>
<th>对应十进制</th>
<th>最大</th>
<th>对应十进制</th>
</tr>
</thead>
<tbody><tr>
<td>8bit</td>
<td>0000 0000 B</td>
<td>0 D</td>
<td>1111 1111 B</td>
<td>255 D</td>
</tr>
<tr>
<td>16bit</td>
<td>0000 0000 0000 0000 B</td>
<td>0 D</td>
<td>1111 1111 1111 1111 B</td>
<td>65535D</td>
</tr>
</tbody></table>
<ul>
<li>有符号数（补码）：</li>
</ul>
<table>
<thead>
<tr>
<th>位数</th>
<th>最小</th>
<th>对应十进制</th>
<th>最大</th>
<th>对应十进制</th>
</tr>
</thead>
<tbody><tr>
<td>8bit</td>
<td>1000 0000 B</td>
<td>-128 D</td>
<td>0111 1111 B</td>
<td>+127 D</td>
</tr>
<tr>
<td>16bit</td>
<td>1000 0000 0000 0000 B</td>
<td>-32768 D</td>
<td>0111 1111 1111 1111 B</td>
<td>+32767 D</td>
</tr>
</tbody></table>
<blockquote>
<ul>
<li>补码范围<ul>
<li>1B（8bit）：-128 ~ +127</li>
<li>2B（16bit）：-32768 ~ +32767</li>
<li>4B（32bit）：-2147483648 ~ +2147483647</li>
<li>8B（64bit）：-2^32^ ~ 2^32^-1</li>
</ul>
</li>
</ul>
</blockquote>
</li>
<li><p>特点</p>
<ul>
<li><p>对于二进制数，保持位数不变计算（8bit计算后仍然取8bit），</p>
<p>那么，<code>取反加一</code> 和 <code>减一取反</code> 效果一样。</p>
</li>
<li><p>正数x求补，得到对应的负数-x；</p>
<p>负数-x求补，得到对应的正数x。</p>
<blockquote>
<p>求补是取反加一。</p>
</blockquote>
</li>
<li><p>无符号数 和 补码数，使用相同的加减法运算规则，</p>
<p>其中补码的符号位参与运算，结果正确。</p>
</li>
<li><p>无符号数 和 补码数，使用不同的溢出判断方法。</p>
</li>
</ul>
</li>
<li><p>分析溢出</p>
<ul>
<li>无符号数<ul>
<li>相加时，两数的最高位的数都是 1，则会溢出；</li>
<li>相减时，被减数更小，会溢出。</li>
</ul>
</li>
<li>有符号数<ul>
<li>相加时，若两个数是相同符号位，计算结果的符号位却变化了，则是溢出；</li>
<li>相减时，若两个数是不同符号位，计算结果的符号位与被减数不同，则是溢出。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="1-5-字符表示"><a href="#1-5-字符表示" class="headerlink" title="1.5 字符表示"></a>1.5 字符表示</h3><ul>
<li><p>采用非数值类编码的一种——ASCII码</p>
</li>
<li><p>8bit信息，其中7bit编码，最高位0。</p>
<p>能表示出128个字符。</p>
</li>
<li><p>常用ASCII码</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>十进制</th>
<th>十六进制</th>
<th>字符</th>
<th>十进制</th>
<th>十六进制</th>
</tr>
</thead>
<tbody><tr>
<td><code> </code></td>
<td>32 D</td>
<td>20 H</td>
<td><code>CR回车</code></td>
<td>13 D</td>
<td>0D H</td>
</tr>
<tr>
<td><code>0</code></td>
<td>48 D</td>
<td>30 H</td>
<td><code>LF换行</code></td>
<td>10 D</td>
<td>0A H</td>
</tr>
<tr>
<td><code>A</code></td>
<td>65 D</td>
<td>41 H</td>
<td><code>Tab</code></td>
<td>9 D</td>
<td>09 H</td>
</tr>
<tr>
<td><code>a</code></td>
<td>97 D</td>
<td>61 H</td>
<td><code>BS退格</code></td>
<td>8 D</td>
<td>08 H</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="1-6-基本逻辑运算"><a href="#1-6-基本逻辑运算" class="headerlink" title="1.6 基本逻辑运算"></a>1.6 基本逻辑运算</h3><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230903205019789.png" alt="image-20230903205019789" style="zoom:50%;" /> 



<h3 id="1-7-BCD码"><a href="#1-7-BCD码" class="headerlink" title="1.7 BCD码"></a>1.7 BCD码</h3><ul>
<li><p>压缩BCD码</p>
<p>每一位用4位二进制表示，一个字节表示两位十进制数</p>
</li>
<li><p>非压缩BCD码</p>
<p>用1个字节表示一位十进制数，高四位总是0000，低4位的0000到1001表示0到9</p>
</li>
</ul>
<h2 id="第二课-x86微机系统的组成"><a href="#第二课-x86微机系统的组成" class="headerlink" title="第二课 x86微机系统的组成"></a>第二课 x86微机系统的组成</h2><h3 id="2-1-x86寄存器组"><a href="#2-1-x86寄存器组" class="headerlink" title="2.1 x86寄存器组"></a>2.1 x86寄存器组</h3><ul>
<li><p>寄存器</p>
<p>用以临时存放指令执行所产生的中间结果存储单元</p>
</li>
<li><p>x86基本寄存器</p>
</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230903205223350.png" alt="image-20230903205223350" style="zoom:50%;" /> 



<h3 id="2-2-通用寄存器（数据寄存器）"><a href="#2-2-通用寄存器（数据寄存器）" class="headerlink" title="2.2 通用寄存器（数据寄存器）"></a>2.2 通用寄存器（数据寄存器）</h3><ul>
<li><p>用于算术运算、逻辑运算和数据的传送</p>
</li>
<li><p>虽然是通用寄存器，但各自又有专用用途</p>
<p>(1)  A。</p>
<p>作为累加器使用，是算术运算所使用的主要寄存器。8位、16位和32位累加器分别对应AL, AX和EAX。</p>
<p>(2)  B。</p>
<p>基址寄存器， 16位和32位基址寄存器分别对应BX,EBX。</p>
<p>(3)  C。</p>
<p>计数器。8位、16位和32位计数器分别对应CL，CX和ECX。</p>
<p>(4)  D。</p>
<p>数据寄存器。 8位、16位和32位数据寄存器分别对应DL, DX和EDX。</p>
</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230903205320087.png" alt="image-20230903205320087" style="zoom: 50%;" /> 



<h3 id="2-3-指针寄存器"><a href="#2-3-指针寄存器" class="headerlink" title="2.3 指针寄存器"></a>2.3 指针寄存器</h3><ul>
<li><p>指针寄存器(Pointer Register):ESP和EBP</p>
</li>
<li><p>指针寄存器</p>
<ul>
<li><p>SP&#x2F;ESP</p>
<p>堆栈指针。</p>
<p>专门用以访问堆栈上数据的寄存器。32位模式下使用ESP，16位模式下使用SP，其内容始终指向堆栈栈顶。从这一点上看，ESP&#x2F;SP是专用的。</p>
</li>
<li><p>BP&#x2F;EBP</p>
<p>基址指针。</p>
<p>可以用来存放数据，但更经常、更重要的用途是作为堆栈区的一个基地址，以便访问堆栈中的数据。</p>
</li>
</ul>
</li>
</ul>
<h3 id="2-4-变址寄存器"><a href="#2-4-变址寄存器" class="headerlink" title="2.4 变址寄存器"></a>2.4 变址寄存器</h3><ul>
<li><p>变址寄存器(Index Register)包括ESI和EDI，其对应的16位寄存器分别是SI和DI。</p>
</li>
<li><p>变址寄存器</p>
<ul>
<li><p>SI&#x2F;ESI</p>
<p>源变址寄存器，对应的16位寄存器是SI, 32位的是ESI。</p>
<p>可以存放数据，也可作为指针，存放内存单元地址。</p>
</li>
<li><p>DI&#x2F;EDI</p>
<p>目的变址寄存器，对应的16位寄存器是DI, 32位的是EDI。</p>
<p>可以存放数据，也可作为指针，存放内存单元地址。</p>
</li>
</ul>
</li>
</ul>
<h3 id="2-5-控制寄存器"><a href="#2-5-控制寄存器" class="headerlink" title="2.5 控制寄存器"></a>2.5 控制寄存器</h3><ul>
<li><p>控制寄存器(Control Register)包括EIP和EFLAGS</p>
</li>
<li><p>控制寄存器</p>
<ul>
<li><p>IP&#x2F;EIP</p>
<p>用于指示待执行指令的位置。</p>
<ul>
<li>32位模式下是EIP，16位模式下是IP。</li>
<li>运行期间，CPU自动修改(E)IP，程序不直接修改(E)IP，随着指令的执行，(E)IP相应地变动。</li>
</ul>
</li>
<li><p>FLAGS&#x2F;EFLAGS</p>
<p>一条指令执行后，CPU所处的状态</p>
<ul>
<li>16位模式下是FLAGS </li>
<li>主要有：运算结果标志、状态控制标志和系统状态标志等寄存器。</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230903205830268.png" alt="image-20230903205830268" style="zoom: 50%;" /> 

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230903205956709.png" alt="image-20230903205956709" style="zoom: 67%;" /></li>
</ul>
</li>
</ul>
<blockquote>
<p>记住：</p>
<ul>
<li>Overflow Flag（OF）：位序11，补码溢出。</li>
<li>Carry Flag（CF）：位序0，进位、借位（无符号数溢出）。</li>
<li>Sign Flag（SF）：位序7，符号位。</li>
<li>Zero Flag（ZF）：位序6，零位。</li>
</ul>
</blockquote>
<h3 id="2-6-段寄存器"><a href="#2-6-段寄存器" class="headerlink" title="2.6 段寄存器"></a>2.6 段寄存器</h3><ul>
<li>一个连续单元的内存区域为段，段寄存器是用于存放指示该段首地址的相关内容</li>
<li>16位CPU有四个段寄存器：CS, DS, SS和ES，32位CPU又增加了两个：FS和GS<ul>
<li>CS(Code Segment)，指示代码段</li>
<li>DS(Data Segment)，指示数据段</li>
<li>SS(Stack Segment)，指示堆栈段</li>
<li>ES(Extra Segment), FS, GS，指示附加段</li>
</ul>
</li>
</ul>
<h3 id="2-7-内存储器"><a href="#2-7-内存储器" class="headerlink" title="2.7 内存储器"></a>2.7 内存储器</h3><ul>
<li><p>用途：存放执行的指令、所处理的数据</p>
</li>
<li><p>基本单位：字节(Byte)(8bit)</p>
</li>
<li><p>地址：每个字节单元的一个唯一编号</p>
<ul>
<li>寻址空间受限于地址总线宽度</li>
<li>20-bit地址总线，可访问00000h～FFFFFh，共2^20^字节(1MB)</li>
<li>32-bit，可访问00000000h～FFFFFFFFh，共2^32^字节(4GB)</li>
<li>指令访问地址范围受字长限制</li>
</ul>
<blockquote>
<p>注意区分 寻址编号、字节、比特。</p>
<p>这里说的寻址空间到FFFFFH，那就是2^20^的单位，而寻址空间的单位是B，所以说是2^20^字节。</p>
<p>也就是说，这里算寻址空间，你不要多此一举的算1B&#x3D;8bit！</p>
</blockquote>
</li>
<li><p>内存单元与数据存放格式</p>
<p>存储单元：连续若干个字节存储空间</p>
<p>类型：</p>
<ul>
<li>字节单元</li>
<li>2字节单元，又叫做字(Word)单元</li>
<li>4字节单元，又叫双字(DWord)单元</li>
<li>8字节单元，又叫四字(QWord)单元</li>
</ul>
<p>标识：以内存块的起始地址来标识</p>
<p>存放格式：低位存入低单元，高位存入高单元(<strong>小端格式</strong>，Intel格式)</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230903211135204.png" alt="image-20230903211135204" style="zoom:50%;" /> 
</li>
<li><p>示例</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230903211215198.png" alt="image-20230903211215198" style="zoom:50%;" /></li>
</ul>
<h3 id="2-8-内存与分段"><a href="#2-8-内存与分段" class="headerlink" title="2.8 内存与分段"></a>2.8 内存与分段</h3><ul>
<li><p>内存的分段使用</p>
<ul>
<li>内存段：连续若干字节的内存区域</li>
<li>基地址由段寄存器来确定</li>
<li>地址形式为：段 : 偏移地址</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230903211314155.png" alt="image-20230903211314155" style="zoom: 50%;" /> 
</li>
<li><p>矛盾</p>
<ul>
<li><p>20-bit地址线：寻址空间：00000h~FFFFFh</p>
</li>
<li><p>16-bit字长能表示范围：0000h ~ FFFFh</p>
</li>
<li><p>解决办法：</p>
<p>16位段地址和16位偏移地址，合成20位物理地址</p>
<p>规则: 20位地址＝段地址×16+偏移地址</p>
<blockquote>
<p>CPU 可以用不同的段地址和偏移地址形成同一个物理地址</p>
</blockquote>
</li>
<li><p>示例：</p>
<p>段地址：1000h，偏移地址：1234h</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230903211613512.png" alt="image-20230903211613512" style="zoom:80%;" /></li>
</ul>
</li>
</ul>
<h3 id="2-9-栈及操作"><a href="#2-9-栈及操作" class="headerlink" title="2.9 栈及操作"></a>2.9 栈及操作</h3><ul>
<li><p>由连续若干个内存单元组成的、按FILO原则进行存取的数据结构</p>
<ul>
<li>栈底	堆栈中最先存入数据的单元栈顶</li>
<li>堆栈中最后存入数据的单元</li>
<li>进栈(PUSH)	将数据存入堆栈</li>
<li>出栈(POP)	从堆栈取出数据</li>
</ul>
</li>
<li><p>栈底固定不变，栈顶随进栈和出栈操作而变化，由堆栈指针(Stack Pointer, SP) 指示</p>
</li>
<li><p>x86堆栈</p>
<ul>
<li>基地址：寄存器SS专用于确定堆栈区的基地址</li>
<li>栈顶：(E)SP专门用于指示栈顶的位置，即总是指向最近进栈的数据位置。</li>
<li>栈底：栈底固定为栈区的最高地址单元。执行PUSH操作后，(E)SP向低地址方向移动，执行POP操作后，(E)SP要向高地址方向移动</li>
<li><strong>栈单元基本单位是字(2字节)</strong><ul>
<li>16位CPU，只能以2字节为单位进行进栈和出栈操作</li>
<li>32位CPU，存取单位默认是4字节，但也可以是2字节</li>
</ul>
</li>
</ul>
</li>
<li><p>说明</p>
<ul>
<li>栈操作主要指令是PUSH和POP指令</li>
<li>与(E)SP密切相关，不宜将(E)SP用作数据寄存器</li>
</ul>
</li>
</ul>
<h2 id="第三课-寻址方式及指令"><a href="#第三课-寻址方式及指令" class="headerlink" title="第三课 寻址方式及指令"></a>第三课 寻址方式及指令</h2><h3 id="3-1-指令系统概述"><a href="#3-1-指令系统概述" class="headerlink" title="3.1 指令系统概述"></a>3.1 指令系统概述</h3><ul>
<li><p>机器指令：</p>
<p>用二进制编码表示的指令，由操作码和操作数两部分组成</p>
</li>
<li><p>汇编指令：</p>
<p>用指令助记符和符号地址表示的指令</p>
</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230903212249659.png" alt="image-20230903212249659" style="zoom:50%;" /> 



<h3 id="3-2-操作数寻址方式"><a href="#3-2-操作数寻址方式" class="headerlink" title="3.2 操作数寻址方式"></a>3.2 操作数寻址方式</h3><ul>
<li><p>三种操作数</p>
<ul>
<li>立即操作数，对应立即寻址方式</li>
<li>寄存器操作数，对应的是寄存器寻址方式</li>
<li>内存操作数，对应的内存操作数寻址方式</li>
</ul>
</li>
<li><p>寻址方式</p>
<ul>
<li><p>立即寻址  如<code>1A2Bh</code></p>
</li>
<li><p>寄存器寻址  如<code>AX</code></p>
</li>
<li><p>内存操作数寻址  </p>
<ul>
<li><p>直接寻址  如<code>[59A8h]</code></p>
</li>
<li><p>寄存器间接寻址  如<code>[BX]</code></p>
</li>
<li><p>寄存器相对寻址  如<code>4[BX]</code></p>
</li>
<li><p>基址变址寻址 如 <code>[BX][SI]</code></p>
<ul>
<li>基址：BX和BP，32-bit通用寄存器</li>
<li>变址：SI和DI，32-bit通用寄存器(ESP除外)</li>
</ul>
<blockquote>
<p>注意这里，不能交换位置！！！</p>
</blockquote>
</li>
<li><p>相对基址变址寻址  如<code>100[BX][DI]</code></p>
</li>
</ul>
<blockquote>
<p>以上内存操作数寻址方式，都是默认使用段寄存器DS。</p>
<p>但是以BP&#x2F;EBP寻址，默认用段寄存器SS。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="3-3-MOV指令"><a href="#3-3-MOV指令" class="headerlink" title="3.3 MOV指令"></a>3.3 <span id="jump_move">MOV指令</span></h3><ul>
<li><p>格式：MOV 目的操作数，源操作数</p>
</li>
<li><p>功能：源操作数传送到目的储存单元(reg,seg,mem)</p>
</li>
<li><p>操作数的寻址方式：</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230903213407946.png" alt="image-20230903213407946" style="zoom: 50%;" /> 

<blockquote>
<p>重点：</p>
<ul>
<li>imm不能做目的操作数</li>
<li>CS不能用作目的操作数</li>
<li>类型必须一致且明确</li>
</ul>
<blockquote>
<p>seg是段地址，mem是具体内存地址，不一样！</p>
</blockquote>
</blockquote>
</li>
<li><p>说明</p>
<ul>
<li>一般情况下，指令源、目的操作数类型要一致</li>
<li>立即数要在目的操作数类型值范围内</li>
<li>类型均不明确时，须用Ptr指定操作数类型<ul>
<li>Byte Ptr		指定字节类型(8位数据)</li>
<li>Word Ptr		指定2字节(字)类型(16位数据)</li>
<li>DWord Ptr	指定4字节(双字)类型(32位数据)</li>
<li>FWord Ptr	指定6字节类型(48位数据)</li>
<li>QWord Ptr 	指定8字节(四字)类型(64位数据)</li>
<li>TByte Ptr		指定10字节类型(80位数据)</li>
</ul>
</li>
</ul>
</li>
<li><p>示例</p>
</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230903213530216.png" alt="image-20230903213530216" style="zoom:50%;" /> 



<h3 id="3-4-XCHG指令"><a href="#3-4-XCHG指令" class="headerlink" title="3.4 XCHG指令"></a>3.4 XCHG指令</h3><ul>
<li><p>格式：XCHG 操作数1，操作数2</p>
</li>
<li><p>功能：数据交换，操作数1与操作数2单元的内容互相交换</p>
<p>由于两操作数即是源操作数，又是目的操作数，故它们的位置顺序无关紧要</p>
</li>
<li><p>操作数的寻址方式：</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230903213731391.png" alt="image-20230903213731391" style="zoom:50%;" /> 

<blockquote>
<p>重点：</p>
<ul>
<li>不能有imm</li>
<li>源操作数必须是reg</li>
<li>类型必须一致且明确</li>
</ul>
</blockquote>
</li>
<li><p>示例</p>
</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230903213822325.png" alt="image-20230903213822325" style="zoom:50%;" /> 



<h3 id="3-5-PUSH指令"><a href="#3-5-PUSH指令" class="headerlink" title="3.5 PUSH指令"></a>3.5 PUSH指令</h3><ul>
<li><p>格式：PUSH 源操作数</p>
</li>
<li><p>功能：数据进栈</p>
<ul>
<li>源操作数为16位，(E)SP内容减2</li>
<li>源操作数为32位，(E)SP中内容减4</li>
</ul>
<blockquote>
<p>注意，栈操作单位只能是16&#x2F;32位。8086CPU只能是<strong>16位</strong>。</p>
<p>即，不可 PUSH AL，只能PUSH AX。</p>
</blockquote>
</li>
<li><p>操作数的寻址方式：</p>
</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230903214216809.png" alt="image-20230903214216809" style="zoom: 50%;" /> 

<ul>
<li>示例</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230903214257432.png" alt="image-20230903214257432" style="zoom: 50%;" /> 



<h3 id="3-6-POP指令"><a href="#3-6-POP指令" class="headerlink" title="3.6 POP指令"></a>3.6 POP指令</h3><ul>
<li><p>格式：POP 目的操作数</p>
</li>
<li><p>功能：从栈中弹出数据到目的操作数所确定的单元中</p>
<ul>
<li>操作数为16位，(E)SP向高地址端调整2字节</li>
<li>操作数为32位，(E)SP向高地址端调整4字节</li>
</ul>
<blockquote>
<p>注意，栈操作单位只能是16&#x2F;32位。8086CPU只能是<strong>16位</strong>。</p>
<p>即，不可 POP AL，只能POP AX。</p>
</blockquote>
</li>
<li><p>操作数寻址方式：</p>
</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230903214456667.png" alt="image-20230903214456667" style="zoom:50%;" /> 

<ul>
<li>示例</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230903214518927.png" alt="image-20230903214518927" style="zoom:50%;" /> 

<ul>
<li>使用实例</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用PUSH和POP指令，将字(16位)单元[1000h]内容和字单元[2000h]内容分别放入EAX低16位和高16位。</span><br><span class="line">解：先将两个16位数按存放顺序要求进栈，再从栈弹出一个32位数到EAX</span><br><span class="line">PUSH	Word Ptr[2000h]</span><br><span class="line">PUSH	Word Ptr[1000h]</span><br><span class="line">POP		EAX</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230903214743932.png" alt="image-20230903214743932" style="zoom:50%;" /> 



<h3 id="3-7-XLAT指令"><a href="#3-7-XLAT指令" class="headerlink" title="3.7 XLAT指令"></a>3.7 XLAT指令</h3><ul>
<li><p>格式：XLAT</p>
</li>
<li><p>功能：查表换码。</p>
<p>将以(E)BX基址，以AL内容为位移量的字节单元内容传送给AL。</p>
<p>这条指令使用隐含操作数。在指令执行前约定：必须已经建立一个字节表，表首地址已经放入基址寄存器(E)BX；查找项的位移量已经放入AL</p>
</li>
<li><p>实例</p>
</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230903214910464.png" alt="image-20230903214910464" style="zoom:50%;" /> 



<h3 id="3-8-地址传送指令LEA"><a href="#3-8-地址传送指令LEA" class="headerlink" title="3.8 地址传送指令LEA"></a>3.8 地址传送指令LEA</h3><ul>
<li>格式：LEA 寄存器，源内存操作数</li>
<li>功能：有效地址送寄存器。将内存操作数的偏移地址(EA)传送至目的寄存器中。</li>
<li>操作数的寻址方式：</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230903215004437.png" alt="image-20230903215004437" style="zoom:50%;" /> 

<ul>
<li><p>若是16位寄存器则只装入EA的低16位</p>
</li>
<li><p>实例</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) LEA	AX, [EBX][ESI]</span><br><span class="line">(2) MOV	AX, [EBX][ESI]</span><br><span class="line">解：</span><br><span class="line">指令(1)取源操作数的EA，并存入AX，</span><br><span class="line">指令(2)取EA所对应的字字单元内容AX。</span><br></pre></td></tr></table></figure>



<h3 id="3-9-地址传送指令2"><a href="#3-9-地址传送指令2" class="headerlink" title="3.9 地址传送指令2"></a>3.9 地址传送指令2</h3><ul>
<li><p>格式：LDS&#x2F;LSS&#x2F;LES&#x2F;LFS&#x2F;LGS 目的寄存器，源内存操作数</p>
</li>
<li><p>功能：</p>
<p>将源内存操作数中的低2&#x2F;4字节内容 存入 目的寄存器</p>
<p>高2字节内容 存入 段寄存器DS&#x2F;SS&#x2F;ES&#x2F;FS&#x2F;GS</p>
</li>
<li><p>操作数的寻址方式：</p>
</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230903215343729.png" alt="image-20230903215343729" style="zoom:50%;" /> 

<ul>
<li>示例</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230903215437424.png" alt="image-20230903215437424" style="zoom:50%;" /> 



<h3 id="3-10-标志位传送指令"><a href="#3-10-标志位传送指令" class="headerlink" title="3.10 标志位传送指令"></a>3.10 标志位传送指令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1)  LAHF指令</span><br><span class="line">格式：LAHF</span><br><span class="line">功能：将FLAGS的低8位送至AH</span><br><span class="line">2)  SAHF指令</span><br><span class="line">格式：SAHF。</span><br><span class="line">功能：将AH内容送至标志寄存器低8位</span><br><span class="line">3)  PUSHF/PUSHFD指令</span><br><span class="line">格式：PUSHF/PUSHFD。</span><br><span class="line">功能：16/32位标志寄存器FLAGS/EFLAGS内容进栈</span><br><span class="line">4)  POPF/POPFD指令</span><br><span class="line">格式：POPF/POPFD。</span><br><span class="line">功能：从栈弹出16/32位数据FLAGS/EFLAGS </span><br></pre></td></tr></table></figure>



<h3 id="3-11-扩展指令"><a href="#3-11-扩展指令" class="headerlink" title="3.11 扩展指令"></a>3.11 扩展指令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CBW</span><br><span class="line">字节扩展到字，符号位填充，不影响真值</span><br><span class="line">AL扩展，AH填充，存在AX</span><br><span class="line"></span><br><span class="line">CWD </span><br><span class="line">字扩展到双字，符号位填充，不影响真值</span><br><span class="line">AX扩展，DX填充，存在DX:AX</span><br><span class="line"></span><br><span class="line">CWDE</span><br><span class="line">字扩展到双字，符号位填充，不影响真值</span><br><span class="line">AX扩展，EAX填充，存在EAX</span><br></pre></td></tr></table></figure>



<h3 id="3-12-输入输出指令"><a href="#3-12-输入输出指令" class="headerlink" title="3.12 输入输出指令"></a>3.12 输入输出指令</h3><ul>
<li>IN、OUT指令专门用来读写I&#x2F;O端口</li>
<li>只能使用累加器(AL&#x2F;AX&#x2F;EAX)来接收、发送数据</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1)  IN指令</span><br><span class="line">格式：IN 累加器，端口地址。</span><br><span class="line">功能：1/2/4字节端口数据AL/AX/EAX</span><br><span class="line">端口地址范围：0000h~FFFFh。</span><br><span class="line">imm8形式，指令中的端口范围：00h～FFh</span><br><span class="line">DX存放端口，指令中的端口：0000h~FFFFh</span><br><span class="line">和内存操作数不同的是，IN指令的源操作数据是来自I/O端口 </span><br><span class="line"></span><br><span class="line">2)  OUT指令</span><br><span class="line">格式：OUT 端口地址，累加器。</span><br><span class="line">功能：AL/AX/EAX内容1/2/4字节端口</span><br><span class="line">imm8形式，指令中的端口范围：00h～FFh</span><br><span class="line">DX存放端口，指令中的端口：0000h~FFFFh</span><br><span class="line">和内存操作数不同的是，OUT指令的目的操作数据将传送到I/O端口中去 </span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230903215802562.png" alt="image-20230903215802562" style="zoom:50%;" /> 



<h3 id="3-13-DOS系统功能调用-1"><a href="#3-13-DOS系统功能调用-1" class="headerlink" title="3.13 DOS系统功能调用"></a>3.13 <span id="jump_dos">DOS系统功能调用</span></h3><ul>
<li>介绍</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) 01h。输入一个字符，有回显。</span><br><span class="line">入口：AH＝01h</span><br><span class="line">出口：AL＝输入字符的ASCII码</span><br><span class="line"></span><br><span class="line">(2) 02h。输出一个字符。</span><br><span class="line">入口：AH＝02h</span><br><span class="line">	 DL＝待输出字符的ASCII码</span><br><span class="line">出口：无</span><br><span class="line"></span><br><span class="line">(3) 08h。输入一个字符，无回显。</span><br><span class="line">入口：AH＝08h</span><br><span class="line">出口：AL＝输入字符的ASCII码</span><br><span class="line"></span><br><span class="line">(4) 09h。输出一个字符串。</span><br><span class="line">入口：AH＝09h</span><br><span class="line">	DS:DX＝字符串地址(以&#x27;$&#x27;作为结束标志)</span><br><span class="line">出口：无 </span><br><span class="line"></span><br><span class="line">(5) 0Ah。读入字符串(以回车结束，有回显)</span><br><span class="line">入口：AH＝0Ah</span><br><span class="line">	 DS:DX＝输入缓冲区地址(字节0允许字符数)</span><br><span class="line">出口：输入缓冲区字节1:字符数,字节2:字符串</span><br><span class="line"></span><br><span class="line">(6) 0Bh。检查是否有字符可读。</span><br><span class="line">入口：AH＝0Bh</span><br><span class="line">出口：AL＝00h,无；FFh,有</span><br><span class="line"></span><br><span class="line">(7) 4Ch。终止程序的执行，返回DOS。</span><br><span class="line">入口：AH＝4Ch</span><br><span class="line">	 AL＝返回的代码</span><br><span class="line">出口：无</span><br></pre></td></tr></table></figure>



<h3 id="3-14-汇编使用"><a href="#3-14-汇编使用" class="headerlink" title="3.14 汇编使用"></a>3.14 汇编使用</h3><ul>
<li>前置操作</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MOUNT C: D:\MASM</span><br><span class="line">PATH=%PATH%;D:\Work</span><br><span class="line">C:</span><br><span class="line">DIR</span><br></pre></td></tr></table></figure>

<ul>
<li>以编写的001.ASM为例介绍</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TYPE 001.ASM	查看类型信息</span><br><span class="line">MASM 001.ASM	汇编</span><br><span class="line">LINK 001.OBJ	连接</span><br><span class="line">DEBUG 001.EXE	调试</span><br><span class="line">001.EXE			运行</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230903233053074.png" alt="image-20230903233053074" style="zoom:50%;" /> 

<blockquote>
<p>汇编ASM文件的文件名字不能过长，否则无法打开。</p>
</blockquote>
<ul>
<li>DEBUG操作</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看和修改寄存器内容的命令 R</span><br><span class="line">显示内存单元内容的命令 D</span><br><span class="line">输入汇编指令的命令 A</span><br><span class="line">反汇编命令 U</span><br><span class="line">执行命令 G</span><br><span class="line">追踪（单步执行）命令 T</span><br><span class="line">执行命令 P</span><br><span class="line">退出 DEBUG 命令 Q</span><br></pre></td></tr></table></figure>





<h2 id="第四课-源程序结构、运算指令"><a href="#第四课-源程序结构、运算指令" class="headerlink" title="第四课 源程序结构、运算指令"></a>第四课 源程序结构、运算指令</h2><h3 id="4-1-源程序结构"><a href="#4-1-源程序结构" class="headerlink" title="4.1 源程序结构"></a>4.1 源程序结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_STACK    SEGMENT  STACK  &#x27;STACK&#x27;</span><br><span class="line">	DB 1000H DUP(?)</span><br><span class="line">TOS	DW ?</span><br><span class="line">_STACK    ENDS</span><br><span class="line"></span><br><span class="line">_DATA    SEGMENT</span><br><span class="line">a	DW	10H</span><br><span class="line">b	DW	20H</span><br><span class="line">x	DW	?</span><br><span class="line">_DATA    ENDS</span><br><span class="line"></span><br><span class="line">_TEXT    SEGMENT</span><br><span class="line">	ASSUME  CS: _TEXT, DS: _DATA</span><br><span class="line">START: </span><br><span class="line">	MOV	AX, _DATA	; 设置数据段、堆栈 start</span><br><span class="line">	MOV	DS, AX</span><br><span class="line">	CLI</span><br><span class="line">	MOV	AX, _STACK</span><br><span class="line">	MOV	SS, AX</span><br><span class="line">	MOV	SP, OFFSET TOS</span><br><span class="line">	STI		; 设置数据段、堆栈 end</span><br><span class="line">	</span><br><span class="line">	; 比较ab大小</span><br><span class="line">	MOV	AX, a</span><br><span class="line">	CMP	AX, b	; 注意这里仍然是a</span><br><span class="line">	JG	loc1</span><br><span class="line">	MOV	AX, b</span><br><span class="line"></span><br><span class="line">loc1:</span><br><span class="line">	MOV	x, AX</span><br><span class="line"></span><br><span class="line">	MOV	AX, 4C00H  ; 退出</span><br><span class="line">	INT	21H</span><br><span class="line">_TEXT    ENDS</span><br><span class="line">	END START</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230903233146848.png" alt="image-20230903233146848" style="zoom:50%;" /> 



<h3 id="4-2-常数、变量和标号-1"><a href="#4-2-常数、变量和标号-1" class="headerlink" title="4.2 常数、变量和标号"></a>4.2 <span id="jump_var">常数、变量和标号</span></h3><ul>
<li><p>相关内容</p>
<ul>
<li>与数据相关的常量与变量</li>
<li>与转移地址相关的标号与过程</li>
</ul>
</li>
<li><p>标识符</p>
<p>标号名、变量名、过程名、段名等称为标识符</p>
<ul>
<li><p>组成标识符字符：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">字母(A～Z, a～z)、数字(0～9)及?、.、@、$和_(下画线)</span><br></pre></td></tr></table></figure>
</li>
<li><p>数字不能作首字符，’.’只能作为标识符的首字符。</p>
</li>
<li><p>标识符的长度没有严格限制，一般不应超过31字符</p>
</li>
<li><p>保留字不能作为标识符使用。</p>
</li>
</ul>
</li>
</ul>
<h4 id="（1）常数"><a href="#（1）常数" class="headerlink" title="（1）常数"></a>（1）常数</h4><ul>
<li><p>常量是数的本身，不对应任何存储单元(寄存器或内存单元)，</p>
<p>其数值在汇编期间已能够完全确定，且在程序运行期间也不会发生变化。</p>
</li>
<li><p>常量一般可分为：</p>
<ul>
<li><p>数值常数</p>
<ul>
<li><p>整数常数</p>
<p>各种进制均可，如： 255D，0B8h，1100B，144Q</p>
<blockquote>
<p>为区别于标识符，字母开头的十六进制数前须加0</p>
<p>通常常数默认为十进制，此时后面D或d可省略</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">可以用伪指令RADIX改变默认的数制，其格式为：</span><br><span class="line">.RADIX  用十进制形式表示的基数 </span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>实数常数</p>
<p>实数其实就是带小数点的数，有两种形式表示：</p>
<p>（1）带小数点的十进制数形式，例如： -1.414</p>
<p>（2）指数形式，例如： 4.56E-2, -1.732E+10</p>
<p>实常数以浮点格式存放。</p>
</li>
</ul>
</li>
<li><p>字符串常数</p>
<p>字符串常数是用<code>‘(单撇号)</code>或<code>&quot;(双撇号)</code>括起来的单个字符或多个字符</p>
<p>(1）对于ASCII字符来说，其数值是字符对应的ASCII码的值</p>
<ul>
<li>‘d’对应的是64h</li>
<li>‘AB’对应的是41h, 42h</li>
</ul>
<p>（2）对于汉字来说，其数值是汉字的内码</p>
<ul>
<li>‘你好!’，对应是：0C4h, 0E3h 0Bah, 0C3h, 21h</li>
</ul>
</li>
</ul>
</li>
<li><p>使用</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) 作为立即数出现在指令中</span><br><span class="line">MOV	AX, 1234h</span><br><span class="line">SUB	AL, &#x27;0&#x27;</span><br><span class="line">AND	EAX, 7FFFFFFFh</span><br><span class="line"></span><br><span class="line">(2) 作为内存操作数的位移量(地址编号)</span><br><span class="line">MOV	AX, [1000h]</span><br><span class="line">ADD	100h[BX], AL</span><br><span class="line">TEST	EAX, [1000h+EBX+EDX*4]</span><br><span class="line"></span><br><span class="line">(3) 为数据定义预置初始值</span><br><span class="line">Variable	DW	1234h</span><br><span class="line">Str		DB	&quot;Hello, World!&quot;, 13, 10, &#x27;$&#x27;</span><br><span class="line">x			DQ	4.756E3 </span><br></pre></td></tr></table></figure>



<h4 id="（2）变量"><a href="#（2）变量" class="headerlink" title="（2）变量"></a>（2）变量</h4><ul>
<li><p>变量是存放数据的内存单元名称</p>
<ul>
<li>变量名是符号地址</li>
<li>具有类型属性：字节、字、双字…</li>
</ul>
</li>
<li><p>定义格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[变量名]  数据定义伪指令  初值表  [;注释] </span><br><span class="line"></span><br><span class="line">DB、DW、DD、DF、DQ、DT</span><br><span class="line">1B、2B、4B、6B、8B、10B类型</span><br></pre></td></tr></table></figure>

<ul>
<li><p>分配一个或多个指定类型的内存单元，并可用变量表示该内存单元</p>
</li>
<li><p>如果有变量名，那么它仅代表所定义的数据存储区的第一个单元地址</p>
</li>
</ul>
</li>
<li><p>定义的形式——初值表</p>
<ol>
<li><p>常数或常数表达式</p>
</li>
<li><p>“?”形式：内容不确定。一般情况下，程序在汇编时以0填充。</p>
</li>
<li><p>符号地址及地址表达式：符号地址对应的地址编号，是无符号整型常数。</p>
</li>
<li><p>可用DUP把某项重复n次：其格式为 <code>n  DUP(数据项) </code></p>
</li>
</ol>
</li>
<li><p>属性</p>
<ul>
<li><p>地址属性</p>
<ul>
<li><p>段地址可由<strong>运算符SEG</strong>返回</p>
</li>
<li><p>偏移地址可由<strong>运算符OFFSET</strong>返回</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MOV AX,SEG Msg	;将Msg的段地址送到AX</span><br><span class="line">MOV BX,OFFSET Msg	;将Msg的偏移地址送到BX</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：当需要存取某一变量时，必须先将该段的段地址放到相应的段寄存器(如DS、ES等) </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MOV	AX, _DATA</span><br><span class="line">MOV	DS, AX</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>类型属性</p>
<p>伪指令DB, DW, DD, DF, DQ, DT可定义1, 2, 4, 6, 8, 10字节类型</p>
<p>可以指定数据类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Byte Ptr	指定数据或变量为字节类型(8位)</span><br><span class="line">Word Ptr	指定数据或变量为2字节(字)类型(16位)</span><br><span class="line">DWord Ptr	指定数据或变量为4字节(双字)类型(32位)</span><br><span class="line">FWord Ptr	指定数据或变量为6字节类型(48位)</span><br><span class="line">QWord Ptr 	指定数据或变量为8字节(四字)类型(64位)</span><br><span class="line">TByte Ptr	指定数据或变量为10字节类型(80位)</span><br></pre></td></tr></table></figure>

<p>变量名对应的是内存单元地址，是无符号符号整常数，</p>
<p>加、减一个整常数就是地址编号加、减一个整常数，</p>
<p>仍然对应一个内存单元地址，其类型与原变量相同。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">L	DD	1234A1B2h, 87654321h</span><br><span class="line">L是4字节类型单元，L+1对应的也是4字节类型单元，其内容是211234A1h</span><br><span class="line">L+1可以写成L[1]，注意，L[1]是L的偏移地址加1而不是加1×4</span><br></pre></td></tr></table></figure>

<p>每种数据类型的类型值就是其占用的字节数，可用<strong>运算符TYPE</strong>将它分离出来</p>
</li>
</ul>
</li>
<li><p>示例1</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Msg		DB	 	&quot;Hello&quot;     	;定义变量,分配5个1B空间,置初值</span><br><span class="line">		DB		13, 10, &#x27;$&#x27;   	;分配3个B空间,置初值</span><br><span class="line">Cnt		DW		5*20, -2    	;定义变量,分配2个2B空间,置初值</span><br><span class="line">S1		DB		?, ?, ?, ?     	;定义变量,分配4个1B空间,未置初值</span><br><span class="line">		DD		123456h,? 		;分配2个4B空间</span><br><span class="line"></span><br><span class="line">取’H‘：</span><br><span class="line">MOV AL, Msg</span><br><span class="line">取’e’：</span><br><span class="line">MOV AL, Msg+1</span><br></pre></td></tr></table></figure>

<ul>
<li>示例2</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Msg		DB		&quot;Hello&quot;</span><br><span class="line">		DB		13, 10, &quot;$&quot;</span><br><span class="line">Cnt		DW		5*20, -2</span><br><span class="line">L		DD		1234A1B2h, 87654321h</span><br><span class="line">F		DQ		1.5</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230903234937787.png" alt="image-20230903234937787" style="zoom:50%;" /> 

<ul>
<li>示例3</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Msg	DB	&quot;Hello&quot; 13, 10, &quot;$&quot;</span><br><span class="line">p1	DW	Msg, Msg+5</span><br><span class="line">p2	DD	Msg, Msg+5</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230903235205880.png" alt="image-20230903235205880" style="zoom:50%;" /> 

<ul>
<li>示例4</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s1	DB	&quot;你好&quot;, 2 DUP(&#x27;!&#x27;), 2 DUP (&#x27;A&#x27;, &#x27;B&#x27;), 3 DUP(1, 2, 2 DUP(&#x27;$&#x27;))</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230903235425341.png" alt="image-20230903235425341" style="zoom:50%;" /> 

<ul>
<li>示例5</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Variable	DW	100 DUP(0)</span><br><span class="line">用变量名表示的内存操作数寻址为</span><br><span class="line">直接寻址：			 MOV	AX, Variable</span><br><span class="line">寄存器相对寻址：	   MOV	  AX, Variable [SI]</span><br><span class="line">相对基址变址寻址：	  MOV	 AX, Variable [BX][DI]</span><br><span class="line">比例因子寻址：			MOV	   EAX, DWord Ptr Variable [EBX][4*ECX]</span><br></pre></td></tr></table></figure>



<h4 id="（3）标号"><a href="#（3）标号" class="headerlink" title="（3）标号"></a>（3）标号</h4><ul>
<li><p>定义</p>
<ul>
<li><p>标号表示的是指令在内存中存放的位置</p>
</li>
<li><p>标号定义的格式是：</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">标号名:</span><br></pre></td></tr></table></figure>

<p>表示标号后首条指令在内存中地址。</p>
<blockquote>
<p>标号既可以定义在目的指令同一行的最前面，</p>
<p>也可以在目的指令前一行单独用一行定义。</p>
</blockquote>
</li>
<li><p>属性</p>
<ul>
<li><p>地址属性</p>
<p>标号代表的是其后首条指令在内存中地址</p>
<ul>
<li>用<strong>SEG</strong>来返回标号所在段的段地址</li>
<li>用<strong>OFFSET</strong>来返回标号所在段的偏移地址</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MOV AX,SEG loc1			;将loc1的段地址送到AX</span><br><span class="line">MOV BX,OFFSET loc1		;将loc1的偏移地址送到BX</span><br></pre></td></tr></table></figure>
</li>
<li><p>类型属性</p>
<p>标号具有NEAR和FAR两种属性，其类型值分别为-1和-2</p>
<p>可用<strong>运算符TYPE</strong>返回其类型值</p>
</li>
</ul>
</li>
</ul>
<h4 id="（4）变量名和标号的其他定义方式"><a href="#（4）变量名和标号的其他定义方式" class="headerlink" title="（4）变量名和标号的其他定义方式"></a>（4）变量名和标号的其他定义方式</h4><ul>
<li><p>用LABEL和EQU来定义变量名或标号</p>
<ul>
<li>标识符 LABEL 类型</li>
<li>标识符 EQU THIS 类型</li>
</ul>
</li>
<li><p>功能：</p>
<ul>
<li><p>定义一个指定类型的变量名或标号类型为BYTE, WORD, DWORD, FWORD, QWORD和TBYTE等，则定义变量名</p>
</li>
<li><p>类型是NEAR和FAR，则定义标号</p>
</li>
</ul>
</li>
<li><p>只是<strong>将当前地址定义为一个变量名或标号</strong>，<strong>并不为它们分配内存空间</strong></p>
</li>
<li><p>示例1</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bVariable	LABEL	BYTE</span><br><span class="line">wVariable	DW	100</span><br><span class="line">第一条伪指令仅仅定义了一个具有字节类型的变量名，但并没有为它分配存储空间；</span><br><span class="line">第二条伪指令定义了一个字类型的变量，而且为它分配了2字节的存储空间。</span><br><span class="line">符号地址bVariable与wVariable代表的是同一个地址，但具有不同的数据类型属性。</span><br><span class="line"></span><br><span class="line">Loc   LABEL   FAR</span><br><span class="line">定义了一个具有远转移类型的标号，该标号指向其后第一条汇编指令的存放地址。</span><br></pre></td></tr></table></figure>

<ul>
<li>示例2</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wVariable	EQU THIS	DWORD</span><br><span class="line">dwVariable	DD			100</span><br><span class="line">第一条伪指令仅仅定义了一个具有2字节类型的变量名，但并没有为它分配存储空间；</span><br><span class="line">第二条伪指令定义了一个4字节类型的变量，而且为它分配了4字节的存储空间。</span><br><span class="line">符号地址dwVariable与wVariable代表的是同一个地址，但具有不同的数据类型属性。</span><br><span class="line"></span><br><span class="line">Loc   EQU THIS   NEAR</span><br><span class="line">定义了一个具有近转移类型的标号，该标号指向其后第一条汇编指令的存放地址。</span><br></pre></td></tr></table></figure>



<h3 id="4-3-表达式和运算符"><a href="#4-3-表达式和运算符" class="headerlink" title="4.3 表达式和运算符"></a>4.3 表达式和运算符</h3><ul>
<li><p>将常数、符号地址及其符号常量用运算符连接起来的有意义的式子</p>
</li>
<li><p>值的计算是在源程序汇编过程中完成的</p>
</li>
<li><p>运算符分为：</p>
<ul>
<li>算术运算符</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230904012401011.png" alt="image-20230904012401011" style="zoom:50%;" /> 

<ul>
<li>逻辑运算符</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230904012425615.png" alt="image-20230904012425615" style="zoom:50%;" /> 

<ul>
<li>关系运算符</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230904012444725.png" alt="image-20230904012444725" style="zoom:50%;" /> 

<ul>
<li>数值返回运算符</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230904012504628.png" alt="image-20230904012504628" style="zoom:50%;" /> 

<ul>
<li>属性运算符</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230904012522665.png" alt="image-20230904012522665" style="zoom:50%;" /> 

<ul>
<li>字节分离运算符</li>
</ul>
</li>
</ul>
<h3 id="4-4-MASM的基本伪指令"><a href="#4-4-MASM的基本伪指令" class="headerlink" title="4.4 MASM的基本伪指令"></a>4.4 MASM的基本伪指令</h3><blockquote>
<p>伪指令在汇编程序对源程序汇编期间由汇编程序处理的操作，它们可以完成诸如定义程序段、定义数据、分配存储区和指示程序结束等功能。伪指令在形式上与一般指令相似，但伪指令只是为汇编程序提供有关信息，不产生相应的机器代码。</p>
</blockquote>
<h4 id="指令集选择伪指令"><a href="#指令集选择伪指令" class="headerlink" title="指令集选择伪指令"></a>指令集选择伪指令</h4><ul>
<li><p>MASM在默认情况下只接受8086指令集。</p>
<p>如果程序员需要使用8086以后微处理器新增加的指令，必须使用指令集选择伪指令。</p>
</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230904012739548.png" alt="image-20230904012739548" style="zoom:50%;" /> 

<h4 id="完整的段定义伪指令"><a href="#完整的段定义伪指令" class="headerlink" title="完整的段定义伪指令"></a>完整的段定义伪指令</h4><ul>
<li><p>使用完整的段定义伪指令来定义一个段，</p>
<p>可具体控制汇编程序MASM和连接程序LINK在内存中组织代码和数据的方式</p>
</li>
<li><p>格式</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">段名 SEGMENT [定位类型] [组合方式] [地址模式] [&#x27;分类名&#x27;]</span><br><span class="line">		…</span><br><span class="line">段名 ENDS</span><br></pre></td></tr></table></figure>

<ul>
<li><p>功能</p>
<p>在程序中定义一个逻辑段，指定段的名字和范围，段在内存中的起始位置，以及段与段之间的连接关系。</p>
</li>
<li><p>段指定伪指令ASSUME</p>
</li>
<li><p>段组定义伪指令GROUP</p>
</li>
<li><p>源程序开始与结束伪指令</p>
<ul>
<li><p>源程序开始伪指令</p>
</li>
<li><p>源程序结束伪指令END</p>
</li>
<li><p>数据定义伪指令</p>
</li>
<li><p>符号定义指令</p>
<ul>
<li>等值伪指令EQU</li>
<li>等号伪指令＝</li>
</ul>
<blockquote>
<p>与EQU THIS不一样，</p>
<p>EQU THIS是定义一个<strong>符号地址</strong>。</p>
<p>EQU是定义一个为常量、表达式及其他符号定义一个<strong>符号名</strong>。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="4-5-地址计数器与对准伪指令"><a href="#4-5-地址计数器与对准伪指令" class="headerlink" title="4.5 地址计数器与对准伪指令"></a>4.5 地址计数器与对准伪指令</h3><ul>
<li><p>地址计数器<code>$</code></p>
<ul>
<li>指示当前正在处理的汇编指令或伪指令所在处的偏移地址</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）当$用在指令中时，它表示该指令的第一个字节的地址。例如，</span><br><span class="line">JNE $+6</span><br><span class="line">转向地址是JNE指令的首地址加上6。</span><br><span class="line"></span><br><span class="line">（2）当$用在数据定义等伪指令的参数字段时，表示的是地址计数器的当前值。例如，</span><br><span class="line">ARRAY	DW	1, 2, $, 3, 4, $</span><br><span class="line">假设汇编时ARRAY分配的偏移地址为0074，则汇编后的存储区内容如下：</span><br><span class="line">ARRAY→ 01 00 02 00 78 00 03 00 04 00 7E 00</span><br></pre></td></tr></table></figure>
</li>
<li><p>定位伪指令<code>ORG</code></p>
<ul>
<li>将地址计数器设置到指定的位置</li>
</ul>
<p>用在数据段中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_DEMO	SEGMENT</span><br><span class="line">ORG	10</span><br><span class="line">V1		DW		47A5h</span><br><span class="line">ORG	$+3</span><br><span class="line">V2		DW		5C96h</span><br><span class="line">_DEMO	ENDS </span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230905164729590.png" alt="image-20230905164729590" style="zoom:50%;" /> 

<p>用在代码段中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">		ORG		100h</span><br><span class="line">		JMP		Loc</span><br><span class="line">		ORG		200h</span><br><span class="line">Loc:	MOV		AX, 1200h</span><br></pre></td></tr></table></figure>

<p>那么指令<code>JMP Loc</code>存放的地址为100h，</p>
<p>同理指令<code>MOV AX, 1200h</code>存放的地址为200h，</p>
<p>而100h～200h的存储空间中，除了JMP指令外，其余内容均为未初始化内容。</p>
</li>
<li><p>其他伪指令</p>
<ul>
<li><p>EVEN伪指令</p>
<p>使下一个变量或指令开始于偶数地址处。</p>
</li>
<li><p>ALIGN伪指令</p>
<p>使下一个变量或指令开始于2^n^整数倍地址处。</p>
</li>
</ul>
</li>
</ul>
<h3 id="4-6-子程序定义PROC和ENDP"><a href="#4-6-子程序定义PROC和ENDP" class="headerlink" title="4.6 子程序定义PROC和ENDP"></a>4.6 子程序定义PROC和ENDP</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">子程序名 PROC　[NEAR/FAR] </span><br><span class="line">　… ;子程序体   </span><br><span class="line">子程序名 ENDP</span><br></pre></td></tr></table></figure>

<p>子程序名是子程序的入口地址的符号表示，是符号地址，也具有地址属性和类型属性。</p>
<h3 id="4-7-其他伪指令"><a href="#4-7-其他伪指令" class="headerlink" title="4.7 其他伪指令"></a>4.7 其他伪指令</h3><ul>
<li><p>注释伪指令COMMENT</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式：COMMENT 分隔符 注释内容 分隔符。</span><br><span class="line">功能：分隔符之间的任何内容均作为注释内容，但分隔符本身不能出现在注释内容中。</span><br></pre></td></tr></table></figure>
</li>
<li><p>文件包含伪指令INCLUDE</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式：INCLUDE文件名。</span><br><span class="line">功能：在源程序中，将一个外部文件插入到此伪指令所在处。</span><br></pre></td></tr></table></figure>
</li>
<li><p>全局符号名说明伪指令PUBLIC</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式：PUBLIC符号名1[, 符号名2, …]。</span><br><span class="line">功能：将本模块中定义的一个或多个符号名说明为全局符号，这样在其他模块中可以引用该符号。</span><br><span class="line"> - 符号名可以是变量、符号常量、标号或过程名。</span><br></pre></td></tr></table></figure>
</li>
<li><p>外部符号名说明伪指令EXTRN</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式：EXTRN符号名1:类型[, 符号名2:类型, …]。</span><br><span class="line">功能：说明本模块中将要引用的外部模块中的符号名，类型：Byte, Word, DWord, FWord, QWord, TByte, Near, Far；常数则是ABS。</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-8-MASM的宏汇编伪指令"><a href="#4-8-MASM的宏汇编伪指令" class="headerlink" title="4.8 MASM的宏汇编伪指令"></a>4.8 MASM的宏汇编伪指令</h3><ul>
<li><p>宏指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">宏指令名 MACRO [形式参数1,形式参数2,…,形式参数n] </span><br><span class="line">  …		; 宏指令体(宏体) </span><br><span class="line">ENDM</span><br></pre></td></tr></table></figure>

<ul>
<li><p>宏操作符</p>
<p><code>连接运算符&amp;</code>、<code>文本操作符&lt;&gt;</code>、<code>表达式操作符%</code>、<code>字符操作符!</code></p>
</li>
<li><p>宏库中的宏指令</p>
<p>可在源程序中使用包含伪指令INCLUDE</p>
</li>
</ul>
</li>
<li><p>重复汇编</p>
<p>固定重复伪指令REPT，不定重复伪指令IRP和单字符参数的不定重复伪指令IRPC，均以ENDM作为结束标志</p>
</li>
<li><p>条件汇编</p>
<p>根据某些条件是否成立(为真)来决定是否汇编某一段代码</p>
</li>
<li><p>结构、联合和记录</p>
<p>类似C语言的结构体、共用体复合数据类型的定义</p>
</li>
<li><p>示例</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">示例：定义了宏指令ExitToDos和InOutStr，并在在代码段中调用它们</span><br><span class="line"></span><br><span class="line">ExitToDOS MACRO</span><br><span class="line">	MOV	AX, 4C00h</span><br><span class="line">	INT	21h</span><br><span class="line">	ENDM</span><br><span class="line">InOutStr MACRO Fun,str</span><br><span class="line">	MOV	AH, Fun</span><br><span class="line">	LEA	DX, str</span><br><span class="line">	INT	21h</span><br><span class="line">	ENDM</span><br><span class="line"></span><br><span class="line">_STACK SEGMENT STACK</span><br><span class="line">	DB 32766 DUP (?)</span><br><span class="line">TOS	DW ?</span><br><span class="line">_STACK ENDS</span><br><span class="line"></span><br><span class="line">_DATA	SEGMENT</span><br><span class="line">Msg	DB &#x27;Hello, World!&#x27;,13,10,&#x27;$&#x27;</span><br><span class="line">_DATA	ENDS</span><br><span class="line"></span><br><span class="line">_TEXT	SEGMENT &#x27;CODE&#x27;</span><br><span class="line">ASSUME CS:_TEXT,DS:_DATA,SS:_STACK</span><br><span class="line">Start:	MOV	AX, _DATA</span><br><span class="line">	MOV	DS, AX</span><br><span class="line">	CLI</span><br><span class="line">	MOV	AX, _STACK</span><br><span class="line">	MOV	SS, AX</span><br><span class="line">	MOV	SP, Offset TOS</span><br><span class="line">	STI</span><br><span class="line">	InOutStr	9, Msg</span><br><span class="line">	ExitToDOS</span><br><span class="line">_TEXT	ENDS</span><br><span class="line">	END Start</span><br></pre></td></tr></table></figure>



<h3 id="4-9-算术运算指令-1"><a href="#4-9-算术运算指令-1" class="headerlink" title="4.9 算术运算指令"></a>4.9 <span id="jump_count">算术运算指令</span></h3><h4 id="（1）加法"><a href="#（1）加法" class="headerlink" title="（1）加法"></a>（1）加法</h4><ol>
<li><p><strong>ADD指令</strong><br>格式：ADD目的操作数，源操作数。<br>功能：将源操作数与目的操作数相加，结果存入目的操作数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ADD reg, reg/mem/imm</span><br><span class="line">ADD mem, reg/imm</span><br></pre></td></tr></table></figure>

<p>根据结果置CF, AF, PF, ZF, SF, OF的状态</p>
</li>
<li><p><strong>ADC指令</strong><br>格式：ADC目的操作数，源操作数。<br>功能：即将源操作数、目的操作数<strong>和CF相加</strong>，结果存入目的操作数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ADC reg, reg/mem/imm</span><br><span class="line">ADC mem, reg/imm</span><br></pre></td></tr></table></figure>

<p>根据结果置CF, AF, PF, ZF, SF, OF状态</p>
</li>
<li><p><strong>INC指令</strong><br>格式：INC 操作数。<br>功能：操作数自身加1，即将操作数加1，结果再存入操作数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INC reg/mem </span><br></pre></td></tr></table></figure>

<p>影响AF, PF, ZF, SF和OF，<strong>不影响CF</strong></p>
</li>
</ol>
<h4 id="（2）减法"><a href="#（2）减法" class="headerlink" title="（2）减法"></a>（2）减法</h4><ol>
<li><p><strong>SUB指令</strong></p>
<p>格式：SUB 目的操作数，源操作数。<br>功能：目的操作数减去源操作数，结果存入目的操作数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SUB reg, reg/mem/imm；</span><br><span class="line">SUB mem, reg/imm。</span><br></pre></td></tr></table></figure>

<p>根据结果置CF, AF, PF, ZF, SF, OF的状态 </p>
</li>
<li><p><strong>SBB指令</strong></p>
<p>格式：SBB 目的操作数，源操作数。<br>功能：目的操作数减去源操作数，再减去CF，结果存入目的操作数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SBB reg, reg/mem/imm；</span><br><span class="line">SBB mem, reg/imm。</span><br></pre></td></tr></table></figure>

<p>根据结果置CF, AF, PF, ZF, SF, OF的状态 </p>
</li>
<li><p><strong>DEC指令</strong></p>
<p>格式：DEC 操作数。<br>功能：操作数自身减1，即操作数减去1，结果再存入操作数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DEC reg/mem</span><br></pre></td></tr></table></figure>

<p>影响AF, PF, ZF, SF和OF，<strong>不影响CF</strong></p>
</li>
</ol>
<h4 id="（3）求补"><a href="#（3）求补" class="headerlink" title="（3）求补"></a>（3）求补</h4><ol>
<li><p><strong>NEG指令</strong></p>
<p>格式：NEG 操作数。<br>功能：操作数各位取反再加1(求补)，即将0减去操作数，结果存入操作数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NEG reg/mem</span><br></pre></td></tr></table></figure>

<p>影响CF, AF, PF, ZF, SF, OF。</p>
<blockquote>
<p>只有当操作数为0时，才使CF＝0，其他情况则均为1；<br>只有当操作数为-2^7^(8位运算)或-2^15^(16位运算)或-2^31^(32位运算)时，才使OF＝1，其他情况则均为0。</p>
</blockquote>
</li>
</ol>
<h4 id="（4）比较"><a href="#（4）比较" class="headerlink" title="（4）比较"></a>（4）比较</h4><ol>
<li><p><strong>CMP指令</strong></p>
<p>格式：CMP 目的操作数，源操作数。<br>功能：两操作数比较大小，根据目的操作数减去源操作数的运算结果，从而设置标志位。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CMP reg, reg/mem/imm</span><br><span class="line">CMP mem, reg/imm</span><br></pre></td></tr></table></figure>

<p>该指令影响CF, AF, PF, ZF, SF, OF。<br>这条指令除了<strong>相减结果不保存</strong>外，其他情况与SUB指令完全相同</p>
</li>
</ol>
<h4 id="（5）乘法"><a href="#（5）乘法" class="headerlink" title="（5）乘法"></a>（5）乘法</h4><ul>
<li><p><strong>MUL无符号数乘法</strong></p>
</li>
<li><p><strong>IMUL有符号数乘法</strong></p>
</li>
</ul>
<p>格式：MUL&#x2F;IMUL 源操作数<br>功能：无&#x2F;有符号数乘指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MUL/IMUL reg/mem</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230905171946359.png" alt="image-20230905171946359" style="zoom: 50%;" /> 

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230905172010743.png" alt="image-20230905172010743" style="zoom: 50%;" /> 

<p>两者的区别在于：</p>
<p>MUL的操作数内容看作无符号数</p>
<p>IMUL操作数内容看作补码 </p>
<p><strong>影响CF和OF,不影响其他标志位</strong> </p>
<ul>
<li>MUL，乘积的高半部分为0，则CF和OF均为0，否则CF和OF均为1</li>
<li>IMUL，乘积的高半部分是低半部分的符号扩展，则CF和OF均为0，否则均为1。</li>
</ul>
<p>通过测试这两个标志位，就能够知道乘积的高半部分是否有效数字 。</p>
<h4 id="（6）除法"><a href="#（6）除法" class="headerlink" title="（6）除法"></a>（6）除法</h4><ul>
<li><p><strong>DIV无符号数除法</strong></p>
</li>
<li><p><strong>IDIV有符号数除法</strong></p>
</li>
</ul>
<p>要求被除数的位数必须是除数的两倍</p>
<p>格式：DIV&#x2F;IDIV源操作数<br>功能：无&#x2F;有符号数除法指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DIV/IDIV reg/mem</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230905172351909.png" alt="image-20230905172351909" style="zoom:50%;" /> 

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230905172400510.png" alt="image-20230905172400510" style="zoom:50%;" /> 

<p>两者的区别在于：</p>
<p>DIV的操作数是无符号数，商和余数均为无符号数；</p>
<p>IDIV操作数是补码，商和余数均为有符号数，余数符号与被除数符号相同。</p>
<ul>
<li><p>可能导致两类错误：除数为零，商溢出。</p>
</li>
<li><p>当除法运算所得的商超过表示范围时，就产生商溢出。</p>
</li>
<li><p>除法指令<strong>对所有标志位无定义</strong></p>
</li>
</ul>
<h3 id="4-10-逻辑运算指令-1"><a href="#4-10-逻辑运算指令-1" class="headerlink" title="4.10 逻辑运算指令"></a>4.10 <span id="jump_logic">逻辑运算指令</span></h3><blockquote>
<p>逻辑指令包括逻辑运算指令和移位指令</p>
</blockquote>
<h4 id="（1）逻辑运算指令"><a href="#（1）逻辑运算指令" class="headerlink" title="（1）逻辑运算指令"></a>（1）逻辑运算指令</h4><h5 id="五个指令"><a href="#五个指令" class="headerlink" title="五个指令"></a>五个指令</h5><ul>
<li><p>逻辑运算是按位操作的，包括：AND, OR, NOT, XOR和TEST指令。</p>
</li>
<li><p><strong>AND指令</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AND reg, reg/mem/imm</span><br><span class="line">AND mem, reg/imm</span><br></pre></td></tr></table></figure>

<p>根据结果置SF, ZF和PF，<strong>CF&#x3D;0，OF&#x3D;0</strong>，AF无定义。</p>
</li>
<li><p><strong>OR指令</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OR reg, reg/mem/imm</span><br><span class="line">OR mem, reg/imm</span><br></pre></td></tr></table></figure>

<p>根据结果置SF, ZF和PF，<strong>CF&#x3D;0，OF&#x3D;0</strong>，AF无定义 </p>
</li>
<li><p><strong>NOT指令</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NOT reg/mem</span><br></pre></td></tr></table></figure>

<p><strong>不影响标志位</strong></p>
</li>
<li><p><strong>XOR指令</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">XOR reg, reg/mem/imm</span><br><span class="line">XOR mem, reg/imm</span><br></pre></td></tr></table></figure>

<p>根据结果设置SF, ZF和PF，<strong>CF&#x3D;0，OF&#x3D;0</strong>，AF无定义</p>
</li>
<li><p><strong>TEST指令</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TEST reg, reg/mem/imm</span><br><span class="line">TEST mem, reg/imm</span><br></pre></td></tr></table></figure>

<p>根据结果置SF, ZF和PF，<strong>CF&#x3D;0，OF&#x3D;0</strong>，AF无定义</p>
<blockquote>
<p>TEST与AND都是两操作数按位“逻辑与”，但<strong>TEST的结果不保存</strong>。</p>
</blockquote>
</li>
</ul>
<h5 id="常用逻辑"><a href="#常用逻辑" class="headerlink" title="常用逻辑"></a>常用逻辑</h5><ul>
<li><p>指定位清0   </p>
<p>AND需清0的位赋0,其他位赋1</p>
</li>
<li><p>指定位置1 </p>
<p>OR需置1的位赋1,其他位赋0</p>
</li>
<li><p>指定位变反</p>
<p>XOR需变反的位赋1,其他位赋0</p>
</li>
</ul>
<h4 id="（2）移位运算指令"><a href="#（2）移位运算指令" class="headerlink" title="（2）移位运算指令"></a>（2）移位运算指令</h4><ul>
<li><p>按规定的方式，对目的操作数执行向左或向右移动若干个二进制位数的操作。</p>
<p>包括：</p>
<ul>
<li><p>逻辑移位指令</p>
<p>SHL、SHR</p>
</li>
<li><p>算术移位指令（移位后正负号 不变 ）</p>
<p>SAL、SAR</p>
</li>
<li><p>循环移位指令 </p>
<p>ROL、ROR、RCL、RCR</p>
</li>
</ul>
</li>
</ul>
<h5 id="逻辑移位"><a href="#逻辑移位" class="headerlink" title="逻辑移位"></a><strong>逻辑移位</strong></h5><ol>
<li><p><strong>SHL指令</strong><br>格式：SHL 目的操作数，移动位数。<br>功能：目的操作数逻辑<strong>左移，最后移出的位进入CF，最低位用0填充</strong>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHL reg/mem, imm8/CL</span><br></pre></td></tr></table></figure>

<p>影响CF, OF, SF, ZF, PF，而AF不确定。</p>
<blockquote>
<p>OF在左移1位时有效，否则不确定。<br><strong>左移1位后，若符号位改变，OF&#x3D;1</strong>，否则OF&#x3D;0 </p>
</blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230905173934473.png" alt="image-20230905173934473" style="zoom:50%;" /> 
</li>
<li><p><strong>SHR指令</strong></p>
<p>格式：SHR目的操作数，移动位数。<br>功能：目的操作数逻辑<strong>右移，最后移出的位进入CF，最高位用0填充</strong>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHR reg/mem, imm8/CL。</span><br></pre></td></tr></table></figure>

<p>影响CF, OF, SF, ZF, PF，而AF不确定。</p>
<blockquote>
<p>OF在右移1位时有效，否则不确定。<br><strong>右移1位后符号位改变，OF&#x3D;1</strong>，否则OF&#x3D;0 </p>
</blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230905173944234.png" alt="image-20230905173944234" style="zoom:50%;" /></li>
</ol>
<h5 id="算术移位"><a href="#算术移位" class="headerlink" title="算术移位"></a>算术移位</h5><p>  （移位后正负号 不变 ）</p>
<ol>
<li><p><strong>SAL指令</strong></p>
<p>格式：SAL目的操作数，移动位数。<br>功能：<strong>算术左移</strong>指令。</p>
<p>SAL与SHL是同一条指令，即一个操作码对应的两个助记符</p>
</li>
<li><p><strong>SAR指令</strong></p>
<p>格式：SAR 目的操作数，移动位数。<br>功能：目的操作数<strong>算术右移，最后移出的位进入CF，高位用符号位填充</strong>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SAR reg/mem, imm8/CL</span><br></pre></td></tr></table></figure>

<p>影响CF, OF, SF, ZF, PF，而AF不确定。</p>
<blockquote>
<p>OF在右移1位时有效，否则不确定。<br><strong>右移1位后，OF&#x3D;0</strong></p>
</blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230905174152094.png" alt="image-20230905174152094" style="zoom:50%;" /></li>
</ol>
<h5 id="循环移位1"><a href="#循环移位1" class="headerlink" title="循环移位1"></a>循环移位1</h5><ol>
<li><p><strong>ROL指令</strong></p>
<p>格式：ROL目的操作数，移动位数。<br>功能：目的操作数<strong>循环左移，最后移出的位进CF</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROL reg/mem</span><br></pre></td></tr></table></figure>

<p>影响CF, OF, SF, ZF, PF，而AF不确定。</p>
<blockquote>
<p>OF在左移1位时有效，否则不确定。<br><strong>左移1位后，若符号位改变，OF&#x3D;1</strong>，否则OF&#x3D;0</p>
</blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230905174459195.png" alt="image-20230905174459195" style="zoom:50%;" /> 
</li>
<li><p><strong>ROR指令</strong></p>
<p>格式：ROR 目的操作数，移动位数。<br>功能：目的操作数<strong>循环右移，最后移出的位进CF</strong>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROR reg/mem, imm8/CL</span><br></pre></td></tr></table></figure>

<p>影响CF, OF, SF, ZF, PF，而AF不确定。</p>
<blockquote>
<p>OF在右移1位时有效，否则不确定。<br><strong>右移1位后，若符号位改变，OF&#x3D;1</strong>，否则OF&#x3D;0</p>
</blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230905174745980.png" alt="image-20230905174745980" style="zoom:50%;" /></li>
</ol>
<h5 id="循环移位2"><a href="#循环移位2" class="headerlink" title="循环移位2"></a>循环移位2</h5><ol>
<li><p><strong>RCL指令</strong></p>
<p>格式：RCL 目的操作数，移动位数。<br>功能：目的操作数<strong>和CF一起循环左移</strong>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RCL reg/mem, imm8/CL</span><br></pre></td></tr></table></figure>

<p>影响CF, OF, SF, ZF, PF，而AF不确定。</p>
<blockquote>
<p>OF在左移1位时有效，否则不确定。<br><strong>左移1位后，若符号位改变，OF&#x3D;1</strong>，否则OF&#x3D;0</p>
</blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230905174905476.png" alt="image-20230905174905476" style="zoom:50%;" />  
</li>
<li><p><strong>RCR指令</strong></p>
<p>格式：RCR目的操作数，移动位数。<br>功能：目的操作数<strong>和CF一起循环右移</strong>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RCR reg/mem, imm8/CL</span><br></pre></td></tr></table></figure>

<p>影响CF, OF, SF, ZF, PF，而AF不确定。</p>
<blockquote>
<p>OF在右移1位时有效，否则不确定。<br><strong>右移1位后，若符号位改变，OF&#x3D;1</strong>，否则OF&#x3D;0</p>
</blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230905174948402.png" alt="image-20230905174948402" style="zoom:50%;" /></li>
</ol>
<h2 id="第五课-转移、选择、循环"><a href="#第五课-转移、选择、循环" class="headerlink" title="第五课 转移、选择、循环"></a>第五课 转移、选择、循环</h2><h3 id="5-1-转移指令-1"><a href="#5-1-转移指令-1" class="headerlink" title="5.1 转移指令"></a>5.1 <span id="jump_jmp">转移指令</span></h3><ul>
<li><p><code>CS:(E)IP</code>指向下一条要执行的指令在内存中的地址，</p>
<p>控制转移指令实际上通过改变<code>CS:(E)IP</code>来达到控制程序的执行流程。</p>
<p>包括：</p>
<ul>
<li>无条件转移指令</li>
<li>条件转移指令</li>
<li>循环指令</li>
<li>子程序调用和返回指令</li>
<li>中断调用和中断返回指令</li>
</ul>
<p><code>JMP，JccCALL，RETINT，IRET</code></p>
</li>
<li><p>转移</p>
<ul>
<li>仅能改变<code>(E)IP</code>，是近转移或段内转移</li>
<li>能改变<code>(E)IP</code>和<code>CS</code>，是远转移或段间转移</li>
</ul>
</li>
</ul>
<h4 id="（1）无条件转移"><a href="#（1）无条件转移" class="headerlink" title="（1）无条件转移"></a>（1）无条件转移</h4><ul>
<li><p>格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JMP	目标地址</span><br></pre></td></tr></table></figure>
</li>
<li><p>功能：无条件转移到目标地址，执行从该地址开始的指令序列</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">	MOV		AX, A</span><br><span class="line">	CMP		AX, B</span><br><span class="line">	JNA		loc2</span><br><span class="line">	MOV		X, 1</span><br><span class="line">	JMP		loc3</span><br><span class="line">loc2:</span><br><span class="line">	MOV	X, 2</span><br><span class="line">loc3:</span><br><span class="line">	...</span><br></pre></td></tr></table></figure>



<h4 id="（2）条件转移"><a href="#（2）条件转移" class="headerlink" title="（2）条件转移"></a>（2）条件转移</h4><ul>
<li><p>条件</p>
<ul>
<li>条件满足时则转移，条件不满足时，则顺序执行后面的指令</li>
<li>具体条件见下面的指令<ul>
<li>单个标志位的条件</li>
<li>无符号数比较的条件</li>
<li>有符号数比较的条件</li>
</ul>
</li>
</ul>
</li>
<li><p>格式</p>
<p>常用Jcc来代表这类指令的助记符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Jcc	标号</span><br></pre></td></tr></table></figure>

<p>条件转移指令都是段内直接近转移</p>
</li>
</ul>
<h5 id="单个标志位"><a href="#单个标志位" class="headerlink" title="单个标志位"></a>单个标志位</h5><ul>
<li>Z、S、C、O、P均有各种的指令</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230905180521286.png" alt="image-20230905180521286" style="zoom:50%;" /> 

<blockquote>
<p>简记：</p>
<p>记住<code>JE</code>、<code>JNE</code>为相等则跳转、不相等则跳转。</p>
</blockquote>
<h5 id="无符号数比较"><a href="#无符号数比较" class="headerlink" title="无符号数比较"></a>无符号数比较</h5><ul>
<li>无符号数比较时，根据CF来判断大小</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230905180708147.png" alt="image-20230905180708147" style="zoom:50%;" /> 

<blockquote>
<p>简记：</p>
<ul>
<li>A为无符号大</li>
<li>B为无符号小</li>
<li>拼加N、E</li>
</ul>
</blockquote>
<h5 id="有符号数比较"><a href="#有符号数比较" class="headerlink" title="有符号数比较"></a>有符号数比较</h5><ul>
<li>有符号数比较时，根据SF和OF来确定大小</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230905181049991.png" alt="image-20230905181049991" style="zoom:50%;" /> 

<blockquote>
<p>简记：</p>
<ul>
<li>G为有符号大 Greater</li>
<li>L为有符号小 Less</li>
<li>拼加N、E</li>
</ul>
</blockquote>
<h3 id="5-2-循环指令-1"><a href="#5-2-循环指令-1" class="headerlink" title="5.2 循环指令"></a>5.2 <span id="jump_loop">循环指令</span></h3><ul>
<li><p>主要使用LOOP指令比较多</p>
</li>
<li><p>LOOP会以<code>CX</code>寄存器存着的值作为循环次数，进行循环跳转</p>
<p>执行到<code>LOOP  LOC1</code>，</p>
<p>会先执行<code>CX - 1</code>，</p>
<p>再判断：</p>
<ul>
<li><code>CX</code>不等于0：跳转到<code>LOC1</code>位置执行</li>
<li><code>CX</code>等于0：循环结束，执行<code>LOOP  LOC1</code>后面的语句</li>
</ul>
</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230905181644577.png" alt="image-20230905181644577" style="zoom: 67%;" /> 



<h3 id="5-3-其他指令"><a href="#5-3-其他指令" class="headerlink" title="5.3 其他指令"></a>5.3 其他指令</h3><h4 id="（1）标志位处理指令"><a href="#（1）标志位处理指令" class="headerlink" title="（1）标志位处理指令"></a>（1）标志位处理指令</h4><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230905182143234.png" alt="image-20230905182143234" style="zoom: 67%;" /> 

<h4 id="（2）其他指令"><a href="#（2）其他指令" class="headerlink" title="（2）其他指令"></a>（2）其他指令</h4><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230905182302120.png" alt="image-20230905182302120" style="zoom:67%;" /> 





<h2 id="第六课-子程序调用"><a href="#第六课-子程序调用" class="headerlink" title="第六课 子程序调用"></a>第六课 子程序调用</h2><h3 id="6-1-子程序定义"><a href="#6-1-子程序定义" class="headerlink" title="6.1 子程序定义"></a>6.1 子程序定义</h3><ul>
<li><p>子程序定义</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">子程序名 PROC　[NEAR/FAR] </span><br><span class="line">　… ;子程序体   </span><br><span class="line">子程序名 ENDP</span><br></pre></td></tr></table></figure>

<p>子程序名是子程序的入口地址的符号表示，</p>
<p>是符号地址，也具有地址属性和类型属性。</p>
</li>
</ul>
<blockquote>
<ul>
<li><p>当主调程序转向子程序时，使用调用指令，而在子程序执行结束时，安排一条返回指令，使子程序返回到主程序。 </p>
</li>
<li><p>为保证正确的返回，</p>
<p>(1)调用子程序时，自动将下一条指令地址保存到栈中，</p>
<p>(2)返回时根据栈中先前保存的地址，转移到主程序继续执行。</p>
</li>
<li><p>子程序调用与返回指令是配套使用的</p>
</li>
</ul>
</blockquote>
<h3 id="6-2-CALL指令"><a href="#6-2-CALL指令" class="headerlink" title="6.2 CALL指令"></a>6.2 CALL指令</h3><ul>
<li><p>格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CALL 目标地址</span><br></pre></td></tr></table></figure>
</li>
<li><p>功能：</p>
<p>把该指令之后的地址进栈，再转移到目标地址，执行从该处指令。</p>
<p>有直接调用和间接调用两种方式。</p>
</li>
</ul>
<blockquote>
<ul>
<li><p>直接调用的CALL指令后也可以是标号，</p>
<p>但是要遇到RET才会返回，否则会无法退出。</p>
</li>
</ul>
</blockquote>
<h3 id="6-3-RET指令"><a href="#6-3-RET指令" class="headerlink" title="6.3 RET指令"></a>6.3 RET指令</h3><ul>
<li><p>格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RET/RET [imm16]</span><br></pre></td></tr></table></figure>
</li>
<li><p>功能：</p>
<p>首先从栈栈顶弹出返回的目标地址，然后转移到该地址处执行。</p>
<blockquote>
<p>若其后有imm16，则还要执行</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230905184126486.png" alt="image-20230905184126486" style="zoom:50%;" /> 
</blockquote>
<p>与CALL指令配套使用，实现从子程序中返回，继续主程序的执行 。</p>
</li>
</ul>
<h3 id="6-4-寄存器的保护与恢复"><a href="#6-4-寄存器的保护与恢复" class="headerlink" title="6.4 寄存器的保护与恢复"></a>6.4 寄存器的保护与恢复</h3><ul>
<li><p>主程序和子程序通常是分别编制的，所以它们所使用的寄存器往往会发生冲突。</p>
<ul>
<li><p>进入子程序后，把子程序所需要使用的寄存器内容保存在栈中，此过程称作寄存器保护</p>
</li>
<li><p>在退出子程序前把寄存器内容恢复原状，此过程称作寄存器恢复</p>
</li>
</ul>
</li>
<li><p>寄存器保护与现场恢复分别使用压栈和出栈指令实现</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CRLF	PROC	Far	;子程序定义开始,属性类型为Far</span><br><span class="line">	PUSH	AX	;AX寄存器内容的保护</span><br><span class="line">	PUSH	DX	;DX寄存器内容的保护</span><br><span class="line">	MOV	AH, 2</span><br><span class="line">	MOV	DL, 13</span><br><span class="line">	INT	21h</span><br><span class="line">	MOV	DL, 10</span><br><span class="line">	INT	21h</span><br><span class="line">	POP	DX	;AX寄存器内容的恢复</span><br><span class="line">	POP	AX	;DX寄存器内容的恢复</span><br><span class="line">	RET	;返回调用程序(远返回指令,由汇编程序确定)</span><br><span class="line">CRLF	ENDP	;子程序定义结束</span><br></pre></td></tr></table></figure>

<p>根据需要，可用PUSHF和POPF来保护和恢复标志位。</p>
<h3 id="6-5-参数传递"><a href="#6-5-参数传递" class="headerlink" title="6.5 参数传递"></a>6.5 参数传递</h3><ul>
<li><p>参数传递</p>
<p>主程序在调用子程序时，经常要向子程序传递一些参数或控制信息，子程序执行后，也常需要把运行的结果返回调用程序。这种信息传递称为参数传递。</p>
</li>
<li><p>常用的方法有：</p>
<ul>
<li>约定寄存器传递参数</li>
<li>约定内存单元传递参数</li>
<li>栈传递参数</li>
</ul>
<p>经常同时并用。</p>
</li>
</ul>
<h3 id="6-6-静态变量与动态变量"><a href="#6-6-静态变量与动态变量" class="headerlink" title="6.6 静态变量与动态变量"></a>6.6 静态变量与动态变量</h3><ul>
<li><p>静态</p>
<p>在**段(数据段)**中定义分配的数据是静态数据。</p>
<p>通过DW等伪指令定义并分配存储空间，可用变量名,或直接地址访问相应的内存单元。</p>
</li>
<li><p>动态</p>
<p>在<strong>栈</strong>上分配存储空间来临时使用是动态数据。</p>
<ul>
<li>原则：进入子程序，分配临时空间；子程序执行结束，释放临时空间</li>
<li>方法：通过调整栈指针来分配空间</li>
<li>访问：以 (E)BP为基址，用位移量来存取临时变量（因为动态分配，没有名字）</li>
</ul>
</li>
<li><p>示例</p>
<p>编写程序计算(x % m + y % m + z % m) % m的值，其中x, y, z为32位无符号数，m是16位无符号数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">foo	PROC	FAR</span><br><span class="line">	PUSH	BP	;保护基址指针</span><br><span class="line">	MOV	BP,SP	;设置新栈帧</span><br><span class="line">	SUB	SP,6	;分配临时空间</span><br><span class="line">	PUSH	DX</span><br><span class="line">	MOV	AX,[BP+16] </span><br><span class="line">	MOV	DX,[BP+18]</span><br><span class="line">	DIV	Word Ptr[BP+6]</span><br><span class="line">	MOV	[BP-2],DX ;保存余数</span><br><span class="line">	MOV	AX,[BP+12]</span><br><span class="line">	MOV	DX,[BP+14]</span><br><span class="line">	DIV	Word Ptr[BP+6]</span><br><span class="line">	MOV	[BP-4],DX ;保存余数</span><br><span class="line">	MOV	AX,[BP+8]</span><br><span class="line">	MOV	DX,[BP+10]</span><br><span class="line">	DIV	Word Ptr[BP+6]</span><br><span class="line">	MOV	[BP-6],DX ;保存余数</span><br><span class="line">	SUB	DX,DX</span><br><span class="line">	MOV	AX,[BP-2]</span><br><span class="line">	ADD	AX,[BP-4]</span><br><span class="line">	ADC	DX,0</span><br><span class="line">	ADD	AX, [BP-6]</span><br><span class="line">	ADC	DX, 0</span><br><span class="line">	DIV	Word Ptr[BP+6]</span><br><span class="line">	MOV	AX, DX</span><br><span class="line">	POP	DX</span><br><span class="line">	ADD	SP,6 ;释放临时空间</span><br><span class="line">	MOV	SP, BP</span><br><span class="line">	POP	BP</span><br><span class="line">	RET</span><br><span class="line">foo	ENDP</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="6-7-子程序的嵌套与递归调用"><a href="#6-7-子程序的嵌套与递归调用" class="headerlink" title="6.7 子程序的嵌套与递归调用"></a>6.7 子程序的嵌套与递归调用</h3><ul>
<li><p>一个子程序包含有子程序的调用，这便是子程序的嵌套调用。</p>
</li>
<li><p>一个程序直接或间接地调用自身就是子程序的递归调用，它递归子程序。</p>
</li>
<li><p>设计递归子程序</p>
<ul>
<li>每次调用的参数进栈</li>
<li>在栈上分配动态空间保存中间结果</li>
</ul>
</li>
<li><p>示例</p>
<p>编写求n!的递归子程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f	PROC	NEAR</span><br><span class="line">	PUSH	BP	;保护基址指针</span><br><span class="line">	MOV	BP, SP	;设置新栈帧</span><br><span class="line">	SUB	SP, 2	;分配临时空间</span><br><span class="line">	MOV	AX, [BP+4] 	;取n</span><br><span class="line">	MOV	[BP-2], AX</span><br><span class="line">	CMP	AX, 1</span><br><span class="line">	JE	L10</span><br><span class="line">	DEC	AX</span><br><span class="line">	PUSH	AX</span><br><span class="line">	CALL	f	;调用递归子程序</span><br><span class="line">	ADD	SP, 2</span><br><span class="line">	PUSH	DX</span><br><span class="line">	MUL	Word Ptr [BP-2]	;n×(n-1)!</span><br><span class="line">	POP	DX</span><br><span class="line">L10:	MOV	SP, BP</span><br><span class="line">	POP	BP</span><br><span class="line">	RET</span><br><span class="line">f	ENDP</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230905185118581.png" alt="image-20230905185118581" style="zoom:50%;" /></li>
</ul>
<h3 id="6-8-多模块程序设计"><a href="#6-8-多模块程序设计" class="headerlink" title="6.8 多模块程序设计"></a>6.8 多模块程序设计</h3><ul>
<li><p>一个汇编语言程序可以划分成主模块和多级、多个子模块。</p>
</li>
<li><p>每个模块的源程序都是以END伪指令来结束，</p>
<p>但是只有主模块中的END后可以接标号，以表示程序的入口地址，</p>
<p>其他模块中的END后不能有标号。</p>
</li>
</ul>
<h4 id="全局符号与外部符号"><a href="#全局符号与外部符号" class="headerlink" title="全局符号与外部符号"></a>全局符号与外部符号</h4><ul>
<li>PUBLIC伪指令与EXTRN伪指令配套使用。</li>
</ul>
<ol>
<li><p>全局符号名说明伪指令<strong>PUBLIC</strong><br>格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUBLIC符号名1[, 符号名2, …]</span><br></pre></td></tr></table></figure>

<p>功能：将符号名说明为全局符号，以便其他模块引用<br>符号名：变量、标号或子程序名，及表示常数的符号</p>
</li>
<li><p>外部符号名说明伪指令<strong>EXTRN</strong><br>格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">EXTRN符号名1:类型[, 符号名2:类型, …]</span><br></pre></td></tr></table></figure>

<p>功能：说明符号名为外部符号。<br>本模块引用其他模块中的符号，应说明为外部符号。<br>类型是：Byte, Word, DWord, FWord, QWord, TByte, Near, Far, ABS，应与原模块定义的类型一致。</p>
</li>
</ol>
<ul>
<li><p>由于符号地址都是在某段中定义，</p>
<p>所以，必须将各模块中的段指定为PUBLIC属性，</p>
<p>这样，连接程序将不同模块中的同名段放在一起，从而为各全局符号分配正确的偏移地址。</p>
</li>
<li><p>示例</p>
<ul>
<li><p>模块M1.ASM实现的是输入字符串子程序Sub1；</p>
</li>
<li><p>模块M2.ASM实现的是输出字符串子程序Sub2；</p>
</li>
<li><p>主模块M0.ASM调用Sub1和Sub2，输入字符串后再将它显示出来。</p>
</li>
</ul>
<p><code>M0.ASM</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;	M0.ASM  主模块源程序</span><br><span class="line">PUBLIC	Buf, DOSFUN</span><br><span class="line">EXTRN	Sub1: Near, Sub2: Far</span><br><span class="line">DOSFUN = 21h</span><br><span class="line">_DATA	SEGMENT &#x27;DATA&#x27; USE16 PUBLIC</span><br><span class="line">CRLF	DB	13, 10, &#x27;$&#x27;</span><br><span class="line">Buf	DB	20, 20 DUP (32), 13, 10, &#x27;$&#x27;</span><br><span class="line">_DATA	ENDS</span><br><span class="line">_TEXT	SEGMENT &#x27;CODE&#x27; USE16 PUBLIC</span><br><span class="line">	ASSUME CS: _TEXT, DS: _DATA</span><br><span class="line">Start:	…</span><br><span class="line">	CALL	Sub1</span><br><span class="line">	MOV	AX, Offset CRLF</span><br><span class="line">	PUSH	AX</span><br><span class="line">	CALL	Sub2</span><br><span class="line">	POP	AX</span><br><span class="line">	MOV	AX, Offset Buf+2</span><br><span class="line">	PUSH	AX</span><br><span class="line">	CALL	Sub2</span><br><span class="line">	POP	AX</span><br><span class="line">	MOV	AX, 4C00h</span><br><span class="line">	INT	DOSFUN</span><br><span class="line">_TEXT	ENDS</span><br><span class="line">	END Start</span><br></pre></td></tr></table></figure>

<p><code>M1.ASM</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;	M1.ASM  输入字符子程序源程序</span><br><span class="line">EXTRN	  DOSFUN: Abs </span><br><span class="line">EXTRN	  Buf: Byte</span><br><span class="line">PUBLIC	  Sub1</span><br><span class="line">_TEXT	SEGMENT &#x27;CODE&#x27; USE16 PUBLIC</span><br><span class="line">	ASSUME CS: _TEXT</span><br><span class="line">;子程序Sub1约定输入缓冲区为Buf</span><br><span class="line">Sub1	PROC	NEAR</span><br><span class="line">	LEA	DX, Buf</span><br><span class="line">	MOV	AH, 0Ah</span><br><span class="line">	INT	DOSFUN</span><br><span class="line">	SUB	BX, BX</span><br><span class="line">	MOV	BL, Buf [1]</span><br><span class="line">	MOV	Buf[BX+2],20h</span><br><span class="line">	RET</span><br><span class="line">Sub1	ENDP</span><br><span class="line">_TEXT	ENDS</span><br><span class="line">	END	;模块至此结束</span><br></pre></td></tr></table></figure>

<p><code>M2.ASM</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;	M2.ASM  显示字符子程序源程序。</span><br><span class="line">PUBLIC	Sub2</span><br><span class="line">EXTRN	DOSFUN: Abs</span><br><span class="line">_TEXT	SEGMENT &#x27;CODE&#x27; USE16 PUBLIC</span><br><span class="line">	ASSUME CS: _TEXT</span><br><span class="line">;子程序Sub2,约定栈传递参数</span><br><span class="line">Sub2	PROC	FAR</span><br><span class="line">	PUSH	BP</span><br><span class="line">	MOV	BP, SP</span><br><span class="line">	MOV	DX, [BP+6]</span><br><span class="line">	MOV	AH, 9</span><br><span class="line">	INT	DOSFUN</span><br><span class="line">	POP	BP</span><br><span class="line">	RET</span><br><span class="line">Sub2	ENDP</span><br><span class="line">_TEXT	ENDS</span><br><span class="line">	END	;模块至此结束</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="连接方法"><a href="#连接方法" class="headerlink" title="连接方法"></a>连接方法</h4><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230905185801120.png" alt="image-20230905185801120" style="zoom:50%;" /> 



<h3 id="6-9-子程序库"><a href="#6-9-子程序库" class="headerlink" title="6.9 子程序库"></a>6.9 子程序库</h3><ul>
<li>常用子程序写成独立的源文件，单独汇编形成OBJ文件后，放到一个专门的文件中，形成子程序库。<ul>
<li>文件类型一般为.LIB</li>
<li>在连接时，调入子程序库中的子程序模块，生成最终的可执行文件</li>
<li>LIB.EXE，就专门用于建立和修改子程序库</li>
</ul>
</li>
</ul>
<h3 id="6-10-其他"><a href="#6-10-其他" class="headerlink" title="6.10 其他"></a>6.10 其他</h3><ul>
<li><p>与高级语言程序的连接</p>
<p>各种语言的源程序分别编写，</p>
<p>在各自的开发环境中编译成目标模块.OBJ，</p>
<p>再将各目标模块连接在一起，生成可执行文件。</p>
</li>
<li><p>遵守约定规则</p>
<ul>
<li><p>汇编模块必须使用高级语言的标识符命名约定。</p>
</li>
<li><p>在汇编语言源程序中，如果使用定义在高级语言的符号，必须用EXTRN来说明它，如果让高级语言使用在本模块中定义的符号，则必须用PUBLIC来说明它；同理，在高级语言源程序中，也须用相应的说明语句来说明全局符号与外部符号。</p>
</li>
<li><p>调用子程序时的参数传递规则主要有：PASCAL规则(参数自左向右压栈)，C规则(参数自右向左压栈)，以及返回值的传递规则。</p>
</li>
<li><p>在子程序返回时的栈恢复：由调用程序恢复，还是由子程序恢复。</p>
</li>
<li><p>其他诸如寄存器保护原则、数据类型的对应等。</p>
</li>
</ul>
</li>
<li><p>C编译程序的约定</p>
<ul>
<li><p>全局符号名(变量名或函数名)前加“_”(下画线)。</p>
</li>
<li><p>调用子程序时，使用C规则传递参数；在16位模式下，用AX传递8, 16位返回结果，用DX:AX传递32位返回结果，在32位模式下，用EAX传递8, 16和32返回结果，用EDX:EAX传递64位返回结果。</p>
</li>
<li><p>由调用程序来恢复栈指针。</p>
</li>
<li><p>一般情况下，不保护AX, BX, CX, DX(16位地址模式)，或EAX, EBX, ECX, EDX(32位地址模式)。</p>
<p>在VC中似乎要保护ebx; C++规则,要保护ecx</p>
</li>
</ul>
</li>
</ul>
<h2 id="第七课-中断、输入-x2F-输出"><a href="#第七课-中断、输入-x2F-输出" class="headerlink" title="第七课 中断、输入&#x2F;输出"></a>第七课 中断、输入&#x2F;输出</h2><h3 id="7-1-中断"><a href="#7-1-中断" class="headerlink" title="7.1 中断"></a>7.1 中断</h3><ul>
<li><p>中断调用</p>
<ul>
<li>标志寄存器进栈</li>
<li>中断调用指令后地址的段和偏移地址进栈</li>
<li>从中断向量表取中断服务程序入口地址，并转去执行</li>
</ul>
</li>
<li><p>中断向量</p>
<p>中断服务子程序的入口地址称为中断向量。</p>
<p>实模式，内存的最低1KB区域专门用来保存256个中断向量，称为中断向量表。</p>
</li>
<li><p>实地址模式下的中断向量表</p>
</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230905190154631.png" alt="image-20230905190154631" style="zoom: 50%;" /> 

<ul>
<li><p>INT指令</p>
<p>格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INT imm8</span><br></pre></td></tr></table></figure>

<p>功能：</p>
<p>产生一次类型号为imm8的中断：</p>
<ul>
<li><p>首先FLAGS进栈，再将IF和TF清0；</p>
</li>
<li><p>然后该指令之后的地址(返回地址)，按段、偏移的次序进栈；</p>
</li>
<li><p>最后转向类型号为imm8的中断向量，即双字单元<code>0000h:[4×imm8]</code>所确定的中断服务子程序入口地址处执行。</p>
</li>
</ul>
<blockquote>
<p>由于一条INT指令相当于产生一次中断，其处理过程与外部中断处理过程一样，所以，INT指令又称为软中断指令。</p>
</blockquote>
</li>
<li><p>INTO指令</p>
<p>格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INTO</span><br></pre></td></tr></table></figure>

<p>功能：</p>
<p>若OF＝1，产生一次类型号为4的中断，相当于INT 4；否则顺序执行。</p>
</li>
<li><p>IRET指令</p>
<p>格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IRET</span><br></pre></td></tr></table></figure>

<p>功能：</p>
<p>中断处理结束，返回中断发生处继续执行。</p>
<p>即：首先从栈中以“偏移地址、段地址、16位标志”这样的次序弹出转向的目标地址和FLAGS，再转移到该目标地址去执行。</p>
</li>
</ul>
<h3 id="7-2-输入-x2F-输出"><a href="#7-2-输入-x2F-输出" class="headerlink" title="7.2 输入&#x2F;输出"></a>7.2 输入&#x2F;输出</h3><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230905190625072.png" alt="image-20230905190625072" style="zoom:50%;" /> 

<ul>
<li><p>用IN、 OUT指令与外部设备交换信息</p>
<p>端口</p>
</li>
<li><p>与I&#x2F;O设备间数据传送方式：</p>
<ul>
<li>程序直接控制I&#x2F;O方式</li>
<li>中断传送方式</li>
<li>直接内存存取(DMA)</li>
</ul>
</li>
</ul>
<h3 id="7-3-中断处理程序的主要步骤"><a href="#7-3-中断处理程序的主要步骤" class="headerlink" title="7.3 中断处理程序的主要步骤"></a>7.3 中断处理程序的主要步骤</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) 保存寄存器的内容；</span><br><span class="line">(2) 若允许CPU响应外设中断，则开中断(STI)；</span><br><span class="line">(3) 处理中断；</span><br><span class="line">(4) 关中断(CLI)；</span><br><span class="line">(5) 若是I/O中断服务程序，则送中断结束命令(EOI)给中断命令寄存器；</span><br><span class="line">(6) 恢复寄存器的内容；</span><br><span class="line">(7) 返回被中断的程序(IRET)。</span><br></pre></td></tr></table></figure>

<ul>
<li><p>中断服务程序的入口地址只有放到中断向量表中，才能在中断发生时被调用到。</p>
<p>所以，除了中断处理程序，还有相应设置中断向量及相应的硬件初始化工作。</p>
</li>
</ul>
<h2 id="补录：实用示例"><a href="#补录：实用示例" class="headerlink" title="补录：实用示例"></a>补录：<span id="jump_temp">实用示例</span></h2><h4 id="1-打印可见的十六进制数"><a href="#1-打印可见的十六进制数" class="headerlink" title="1. 打印可见的十六进制数"></a>1. 打印可见的十六进制数</h4><ul>
<li><p>题目</p>
<p>16位二进制数存在BX，以可见字符形式输出打印在屏幕上</p>
</li>
<li><p>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUBLIC  DISPBX</span><br><span class="line">CODE    SEGMENT</span><br><span class="line">        ASSUME  CS:CODE</span><br><span class="line">DISPBX  PROC    FAR</span><br><span class="line">        MOV     CH,4</span><br><span class="line">        MOV     CL,4</span><br><span class="line">ROTATE: ROL     BX,CL</span><br><span class="line">        MOV     AL,BL</span><br><span class="line">        AND     AL,0FH</span><br><span class="line">        ADD     AL,30H</span><br><span class="line">        CMP     AL,3AH</span><br><span class="line">        JL      PRINTIT</span><br><span class="line">        ADD     AL,7</span><br><span class="line">PRINTIT:MOV     DL,AL</span><br><span class="line">        MOV     AH,2</span><br><span class="line">        INT     21H</span><br><span class="line">        DEC     CH</span><br><span class="line">        JNZ    	ROTATE</span><br><span class="line">        RET</span><br><span class="line">DISPBX  ENDP</span><br><span class="line">CODE    ENDS</span><br><span class="line">       	END</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-输出对应字符串"><a href="#2-输出对应字符串" class="headerlink" title="2. 输出对应字符串"></a>2. 输出对应字符串</h4><ul>
<li><p>题目</p>
<p>编写多分支结构程序，实现：<br>输入’1’, ‘2’, ‘3’，输出”one”, “two”, “three”；<br>输入’0’，中止运行；<br>输入其他，输出”error!”</p>
</li>
<li><p>代码</p>
<p>方法一：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_DATA	SEGMENT &#x27;DATA&#x27;</span><br><span class="line">Msg	DB 13,10,&quot;Please input a number: &quot;,13,10,&quot;$&quot;</span><br><span class="line">s1	DB 	9, &quot;one&quot;, 13, 10, &#x27;$&#x27;</span><br><span class="line">s2	DB	9, &quot;two&quot;, 13, 10, &#x27;$&#x27;</span><br><span class="line">s3	DB	9, &quot;three&quot;, 13, 10, &#x27;$&#x27;</span><br><span class="line">err	DB	9, &quot;error!&quot;, 13, 10, &#x27;$&#x27;</span><br><span class="line">_DATA	ENDS</span><br><span class="line">_TEXT	SEGMENT	&#x27;CODE&#x27;</span><br><span class="line">	ASSUME CS: _TEXT, DS: _DATA</span><br><span class="line">Start:	MOV	AX, _DATA</span><br><span class="line">		MOV	DS, AX</span><br><span class="line">Again:	MOV	AH, 9</span><br><span class="line">		MOV	DX, Offset Msg</span><br><span class="line">		INT	21h</span><br><span class="line">		MOV	AH, 1</span><br><span class="line">		INT	21h</span><br><span class="line">		CMP	AL, &#x27;0&#x27;</span><br><span class="line">		JE	Case0</span><br><span class="line">		CMP	AL, &#x27;1&#x27;</span><br><span class="line">		JE	Case1</span><br><span class="line">		CMP	AL, &#x27;2&#x27;</span><br><span class="line">		JE	Case2</span><br><span class="line">		CMP	AL, &#x27;3&#x27;</span><br><span class="line">		JE	Case3</span><br><span class="line">Default:	MOV	DX, Offset err</span><br><span class="line">		JMP	EndSwitch</span><br><span class="line">Case0:		MOV	AX, 4C00h</span><br><span class="line">		INT	21h</span><br><span class="line">Case1:		MOV	DX, Offset s1</span><br><span class="line">		JMP	EndSwitch</span><br><span class="line">Case2:		MOV	DX, Offset s2</span><br><span class="line">		JMP	EndSwitch</span><br><span class="line">Case3:		MOV	DX, Offset s3</span><br><span class="line">		JMP	EndSwitch</span><br><span class="line">EndSwitch:	MOV	AH, 9</span><br><span class="line">		INT	21h</span><br><span class="line">		JMP	Again</span><br><span class="line">_TEXT	ENDS</span><br><span class="line">	END Start</span><br></pre></td></tr></table></figure>

<p>方法二：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_DATA	SEGMENT &#x27;DATA&#x27;</span><br><span class="line">Msg	DB 13, 10, &quot;Please input a number: &quot;, 13, 10, &quot;$&quot;</span><br><span class="line">s1	DB		9, &quot;four&quot;, 13, 10, &#x27;$&#x27;</span><br><span class="line">s2	DB		9, &quot;five&quot;, 13, 10, &#x27;$&#x27;</span><br><span class="line">s3	DB		9, &quot;six&quot;, 13, 10, &#x27;$&#x27;</span><br><span class="line">err	DB		9, &quot;error!&quot;, 13, 10, &#x27;$&#x27;</span><br><span class="line">_DATA	ENDS</span><br><span class="line">_TEXT	SEGMENT	&#x27;CODE&#x27;</span><br><span class="line">	ASSUME CS: _TEXT, DS: _DATA</span><br><span class="line">Start:	MOV		AX, _DATA</span><br><span class="line">	MOV		DS, AX</span><br><span class="line">Again:	MOV		AH, 9</span><br><span class="line">	MOV		DX, Offset Msg</span><br><span class="line">	INT		21h</span><br><span class="line">	MOV		AH, 1</span><br><span class="line">	INT		21h</span><br><span class="line">		SUB	AL, &#x27;4&#x27;</span><br><span class="line">		JL	Error		;输入字符小于&#x27;4&#x27;的情况</span><br><span class="line">		CMP	AL, 3</span><br><span class="line">		JLE	Loc1</span><br><span class="line">Error:		MOV	AL, 4</span><br><span class="line">Loc1:		MOV	AH, 0</span><br><span class="line">		ADD	AX, AX</span><br><span class="line">		MOV	BX, AX</span><br><span class="line">		JMP	Word Ptr CS: CaseTab [BX]</span><br><span class="line">CaseTab		DW	Case1, Case2, Case3, Case4, Default</span><br><span class="line">Default:	MOV	DX, Offset err</span><br><span class="line">		JMP	EndSwitch</span><br><span class="line">Case1:		MOV	DX, Offset s1</span><br><span class="line">		JMP	EndSwitch</span><br><span class="line">Case2:		MOV	DX, Offset s2</span><br><span class="line">		JMP	EndSwitch</span><br><span class="line">Case3:		MOV	DX, Offset s3</span><br><span class="line">		JMP	EndSwitch</span><br><span class="line">Case4:		MOV	AX, 4C00h</span><br><span class="line">		INT	21h</span><br><span class="line">EndSwitch:	MOV	AH, 9</span><br><span class="line">		INT	21h</span><br><span class="line">		JMP	Again</span><br><span class="line">_TEXT		ENDS</span><br><span class="line">		END Start</span><br></pre></td></tr></table></figure>

<p>方法三：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_DATA	SEGMENT &#x27;DATA&#x27;</span><br><span class="line">Msg	DB 13,10,&quot;Please input a character: &quot;,13,10,&quot;$&quot;</span><br><span class="line">s1	DB	9, &quot;File&quot;, 13, 10, &#x27;$&#x27;</span><br><span class="line">s2	DB	9, &quot;Edit&quot;, 13, 10, &#x27;$&#x27;</span><br><span class="line">s3	DB	9, &quot;View&quot;, 13, 10, &#x27;$&#x27;</span><br><span class="line">err	DB	9, &quot;Error!&quot;, 13, 10, &#x27;$&#x27;</span><br><span class="line">_DATA	ENDS</span><br><span class="line">_TEXT	SEGMENT	&#x27;CODE&#x27;</span><br><span class="line">	ASSUME CS: _TEXT, DS: _DATA</span><br><span class="line">Start:	MOV	AX, _DATA</span><br><span class="line">	MOV	DS, AX</span><br><span class="line">Again:	MOV	AH, 9</span><br><span class="line">	MOV	DX, Offset Msg</span><br><span class="line">	INT	21h</span><br><span class="line">	MOV	AH, 1</span><br><span class="line">	INT	21h</span><br><span class="line">		MOV	CX, CS: TabItems</span><br><span class="line">		MOV	BX, Offset CaseTab</span><br><span class="line">Next_I:		CMP	Byte Ptr CS: [BX], AL</span><br><span class="line">		JE	ToCase</span><br><span class="line">		ADD	BX, 4</span><br><span class="line">		LOOP	Next_I</span><br><span class="line">ToCase:		JMP	Word Ptr CS: [BX+2]</span><br><span class="line">TabItems DW	8</span><br><span class="line">CaseTab	  DW	&#x27;F&#x27;,Case1,&#x27;E&#x27;,Case2,&#x27;V&#x27;,Case3,&#x27;X&#x27;,Case4</span><br><span class="line">	  DW	&#x27;f&#x27;,Case1,&#x27;e&#x27;,Case2,&#x27;v&#x27;,Case3,&#x27;x&#x27;,Case4,0,Default</span><br><span class="line">Default:	MOV	DX, Offset err</span><br><span class="line">		JMP	EndSwitch</span><br><span class="line">Case1:		MOV	DX, Offset s1</span><br><span class="line">		JMP	EndSwitch</span><br><span class="line">Case2:		MOV	DX, Offset s2</span><br><span class="line">		JMP	EndSwitch</span><br><span class="line">Case3:		MOV	DX, Offset s3</span><br><span class="line">		JMP	EndSwitch</span><br><span class="line">Case4:		MOV	AX, 4C00h</span><br><span class="line">		INT	21h</span><br><span class="line">EndSwitch:	MOV	AH, 9</span><br><span class="line">		INT	21h</span><br><span class="line">		JMP	Again</span><br><span class="line">_TEXT	ENDS</span><br><span class="line">	END Start</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="3-求所有n2数字和"><a href="#3-求所有n2数字和" class="headerlink" title="3. 求所有n2数字和"></a>3. 求所有n2数字和</h4><ul>
<li><p>题目</p>
<p>用while循环结构编写程序，<br>计算s＝12+22+32+…+n2+…，直到n＞65000或s≥7FF0000h为止，<br>运算结果存于32位变量Sum中</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/assembly/image-20230905182834174.png" alt="image-20230905182834174" style="zoom: 50%;" /> 
</li>
<li><p>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_DATA	SEGMENT	&#x27;DATA&#x27;	</span><br><span class="line">Sum	DD	?</span><br><span class="line">_DATA	ENDS</span><br><span class="line">_TEXT	SEGMENT	&#x27;CODE&#x27;</span><br><span class="line">	ASSUME	CS: _TEXT, DS: _DATA</span><br><span class="line">Start:	MOV	AX, _DATA</span><br><span class="line">	MOV	DS, AX</span><br><span class="line">	MOV	CX, 1</span><br><span class="line">	MOV	Word Ptr Sum, 0</span><br><span class="line">	MOV	Word Ptr Sum+2, 0</span><br><span class="line">	JMP	Rep1?	; 先执行条件测试</span><br><span class="line">Rep1b:	MOV	AX, CX</span><br><span class="line">	MUL	CX	</span><br><span class="line">	ADD	Word Ptr Sum, AX</span><br><span class="line">	ADC	Word Ptr Sum+2, DX</span><br><span class="line">	INC	CX	</span><br><span class="line">Rep1?:	CMP	CX, 65000</span><br><span class="line">	JNBE	EndRep1</span><br><span class="line">	CMP	Word Ptr Sum+2, 7FFh</span><br><span class="line">	JB	Rep1b</span><br><span class="line">EndRep1:</span><br><span class="line">	MOV	AX, 4C00h</span><br><span class="line">	INT	21h	</span><br><span class="line">_TEXT	ENDS</span><br><span class="line">	END Start</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="4-计算字符数"><a href="#4-计算字符数" class="headerlink" title="4. 计算字符数"></a>4. 计算字符数</h4><ul>
<li><p>题目</p>
<p>编一汇编语言程序，从键盘输入一系列字符（小于80个，以回车符结束），</p>
<p>按<strong>字母</strong>、<strong>数字</strong>以及<strong>其他</strong>字符分类统计，并显示（可以按十六进制数显示）出这三类的计数结果。</p>
</li>
<li><p>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_DATA	SEGMENT</span><br><span class="line">N1	DB	0	; 数字</span><br><span class="line">N2	DB	0	; 字符</span><br><span class="line">N3	DB	0	; 其他</span><br><span class="line">BUF 	DB  	80	;预定义80字节的空间</span><br><span class="line">	DB	?	;待输入完成后，自动获得输入的字符个数</span><br><span class="line">	DB  	80  DUP(?) </span><br><span class="line">Msg1	DB	13,10,&quot;Please input a string:&quot;,&quot;$&quot;</span><br><span class="line">Msg2	DB	13,10,&quot;Number:&quot;,&quot;$&quot;</span><br><span class="line">Msg3	DB	13,10,&quot;Char:&quot;,&quot;$&quot;</span><br><span class="line">Msg4	DB	13,10,&quot;Other:&quot;,&quot;$&quot;</span><br><span class="line">_DATA	ENDS</span><br><span class="line">_TEXT	SEGMENT</span><br><span class="line">	ASSUME CS: _TEXT, DS: _DATA</span><br><span class="line">Start:	</span><br><span class="line">	MOV	AX, _DATA</span><br><span class="line">	MOV	DS, AX</span><br><span class="line">	</span><br><span class="line">	; 输出提示信息</span><br><span class="line">	MOV	AH, 09H</span><br><span class="line">	MOV	DX, OFFSET Msg1</span><br><span class="line">	INT	21H</span><br><span class="line">	;读入字符串</span><br><span class="line">	MOV	AH, 0AH</span><br><span class="line">	MOV	DX, OFFSET BUF</span><br><span class="line">	INT	21H</span><br><span class="line"></span><br><span class="line">	; 核心部分，统计个数</span><br><span class="line">	MOV	CL, BUF[1]</span><br><span class="line">	MOV	CH, 00H</span><br><span class="line">	MOV	SI, 0</span><br><span class="line">	; 进行判断</span><br><span class="line">NEXT:</span><br><span class="line">	CMP	BUF[2][SI], &#x27;0&#x27;</span><br><span class="line">	JL	LOC1</span><br><span class="line">	CMP	BUF[2][SI], &#x27;9&#x27;</span><br><span class="line">	JG	LOC1</span><br><span class="line">	INC	N1</span><br><span class="line">	JMP	OVER</span><br><span class="line">LOC1:</span><br><span class="line">	CMP	BUF[2][SI], &#x27;A&#x27;</span><br><span class="line">	JL	LOC2</span><br><span class="line">	CMP	BUF[2][SI],&#x27;Z&#x27;</span><br><span class="line">	JG	LOC2</span><br><span class="line">	INC	N2</span><br><span class="line">	JMP	OVER</span><br><span class="line">LOC2:</span><br><span class="line">	CMP	BUF[2][SI], &#x27;a&#x27;</span><br><span class="line">	JL	LOC3</span><br><span class="line">	CMP	BUF[2][SI], &#x27;z&#x27;</span><br><span class="line">	JG	LOC3</span><br><span class="line">	INC	N2</span><br><span class="line">	JMP	OVER</span><br><span class="line">LOC3:</span><br><span class="line">	INC	N3</span><br><span class="line">OVER:</span><br><span class="line">	INC	SI</span><br><span class="line">	CMP	SI, CX</span><br><span class="line">	JLE	NEXT</span><br><span class="line"></span><br><span class="line">	; 显示结果提示信息</span><br><span class="line">	MOV	AH, 09H</span><br><span class="line">	MOV	DX, OFFSET Msg2</span><br><span class="line">	INT	21H</span><br><span class="line">	; 输出 数字 个数</span><br><span class="line">	MOV	AH, 02H</span><br><span class="line">	MOV	BL, N1</span><br><span class="line">	ADD	BL,30H</span><br><span class="line">	MOV	DL, BL</span><br><span class="line">	INT	21H</span><br><span class="line">	; 显示结果提示信息</span><br><span class="line">	MOV	AH, 09H</span><br><span class="line">	MOV	DX, OFFSET Msg3</span><br><span class="line">	INT	21H</span><br><span class="line">	; 输出 字母 个数</span><br><span class="line">	MOV	AH, 02H</span><br><span class="line">	MOV	BL, N2</span><br><span class="line">	ADD	BL,30H</span><br><span class="line">	MOV	DL, BL</span><br><span class="line">	INT	21H</span><br><span class="line">	; 显示结果提示信息</span><br><span class="line">	MOV	AH, 09H</span><br><span class="line">	MOV	DX, OFFSET Msg4</span><br><span class="line">	INT	21H</span><br><span class="line">	; 输出 其他 格式</span><br><span class="line">	MOV	AH, 02H</span><br><span class="line">	MOV	BL, N3</span><br><span class="line">	ADD	BL,30H</span><br><span class="line">	MOV	DL, BL</span><br><span class="line">	INT	21H</span><br><span class="line">	</span><br><span class="line">	MOV	AX,4C00H	; 退出</span><br><span class="line">	INT	21H </span><br><span class="line"></span><br><span class="line">_TEXT	ENDS</span><br><span class="line">	END Start</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="5-找出最大偶数"><a href="#5-找出最大偶数" class="headerlink" title="5. 找出最大偶数"></a>5. 找出最大偶数</h4><ul>
<li><p>题目</p>
<p>编一汇编语言程序，找出首地址为DATA的N个<strong>字</strong>数组中的<strong>最大偶数</strong>，并将该最大偶数按十六进制显示出来。</p>
<p>（前面给出的<code>DISPBX.ASM</code>作为本题目的子模块，连接使用即可。）</p>
</li>
<li><p>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_DATA	SEGMENT  PUBLIC</span><br><span class="line">DATA  	DW      	1234H,5678H,9D4CH,0D7H,0,-1,7D2AH,8A0EH,10F5H,645DH</span><br><span class="line">N   	EQU     	($-DATA)/2</span><br><span class="line">MAX	DW	?</span><br><span class="line">_DATA	ENDS</span><br><span class="line"></span><br><span class="line">EXTRN	DISPBX:FAR</span><br><span class="line"></span><br><span class="line">_TEXT	SEGMENT  PUBLIC</span><br><span class="line">	ASSUME CS: _TEXT, DS: _DATA</span><br><span class="line"></span><br><span class="line">; 主程序，求出最大偶数，存放在BX</span><br><span class="line">_MAIN	PROC	FAR</span><br><span class="line">	PUSH	DS</span><br><span class="line">	MOV	AX,0</span><br><span class="line">	PUSH	AX</span><br><span class="line">	MOV	AX, _DATA</span><br><span class="line">	MOV	DS, AX</span><br><span class="line">	; 主程序内容</span><br><span class="line">	; 初始化</span><br><span class="line">	MOV	CX, N-1</span><br><span class="line">	MOV	BX, OFFSET DATA -2 </span><br><span class="line">INIT:</span><br><span class="line">	INC	BX</span><br><span class="line">	INC	BX</span><br><span class="line">	TEST	WORD PTR [BX], 0001H	; 只取最低1位判断是否为偶数</span><br><span class="line">	JNZ	INIT			; 不是偶数，则直接进行下一个判断</span><br><span class="line">	MOV	AX, [BX]</span><br><span class="line">	MOV	BX, OFFSET DATA</span><br><span class="line">	; 比较大小</span><br><span class="line">AGAIN:</span><br><span class="line">	INC	BX			; 注意这里要BX+2，自增两次</span><br><span class="line">	INC	BX</span><br><span class="line">	TEST	WORD PTR [BX], 0001H	; 只取最低1位判断是否为偶数</span><br><span class="line">	JNZ	NEXT			; 不是偶数，则直接进行下一个判断</span><br><span class="line">	CMP	AX, [BX]			</span><br><span class="line">	JGE	NEXT</span><br><span class="line">	MOV	AX,[BX]</span><br><span class="line">NEXT:</span><br><span class="line">	LOOP	AGAIN</span><br><span class="line">	MOV	MAX, AX		; 结束循环，得到最大偶数，准备输出</span><br><span class="line">	; 调用子程序</span><br><span class="line">	MOV	BX, MAX</span><br><span class="line">	CALL	DISPBX</span><br><span class="line">	; 退出</span><br><span class="line">	RETF</span><br><span class="line">_MAIN	ENDP</span><br><span class="line">_TEXT	ENDS</span><br><span class="line">	END _MAIN</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>汇编语言Assembly</tag>
      </tags>
  </entry>
  <entry>
    <title>《LaTeX》模板</title>
    <url>/butterflyblog/2023/08/23/%E3%80%8ALaTeX%E3%80%8B%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<h1 id="《LaTeX》模板"><a href="#《LaTeX》模板" class="headerlink" title="《LaTeX》模板"></a>《LaTeX》模板</h1><h2 id="一、总体架构"><a href="#一、总体架构" class="headerlink" title="一、总体架构"></a>一、总体架构</h2><h3 id="1-1-外壳模板"><a href="#1-1-外壳模板" class="headerlink" title="1.1 外壳模板"></a>1.1 外壳模板</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;ctexrep&#125;</span><br><span class="line"><span class="comment">% \usepackage&#123;ctex&#125;</span></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;pdfpages&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;graphicx&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;float&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;listings&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;geometry&#125;</span><br><span class="line"><span class="comment">% \geometry&#123;left=3cm,right=3cm&#125;</span></span><br><span class="line"><span class="keyword">\title</span>&#123;标题&#125;</span><br><span class="line"><span class="keyword">\author</span>&#123;作者&#125;</span><br><span class="line"><span class="keyword">\date</span>&#123;<span class="keyword">\today</span>&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"><span class="comment">% 开始</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">% 结束</span></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>





<h2 id="二、插入内容"><a href="#二、插入内容" class="headerlink" title="二、插入内容"></a>二、插入内容</h2><h3 id="2-1-章节结构"><a href="#2-1-章节结构" class="headerlink" title="2.1 章节结构"></a>2.1 章节结构</h3><ul>
<li>库包</li>
</ul>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">无需</span><br></pre></td></tr></table></figure>

<ul>
<li>写法</li>
</ul>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\chapter</span>&#123;我是一级标题&#125;</span><br><span class="line">我是一级标题的直接下属内容。</span><br><span class="line">    <span class="keyword">\section</span>&#123;我是二级标题&#125;</span><br><span class="line">    我是二级标题的直接下属内容。</span><br><span class="line">        <span class="keyword">\subsection</span>&#123;我是三级标题&#125;</span><br><span class="line">        我是三级标题的直接下属内容。</span><br><span class="line">        <span class="keyword">\subsubsection</span>&#123;我是四级标题&#125;</span><br><span class="line">        我是四级标题的直接下属内容，注意四级标题没有序号，也不会写入目录哦。</span><br></pre></td></tr></table></figure>

<ul>
<li>效果</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/latex2/image-20230823002224527.png" alt="image-20230823002224527" style="zoom:80%;" />



<h3 id="2-2-表格"><a href="#2-2-表格" class="headerlink" title="2.2 表格"></a>2.2 表格</h3><ul>
<li>库包</li>
</ul>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>&#123;graphicx&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;float&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>写法</li>
</ul>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;table&#125;[H]</span><br><span class="line">    <span class="keyword">\centering</span></span><br><span class="line">    <span class="keyword">\begin</span>&#123;tabular&#125;[center]&#123;c c c c&#125;</span><br><span class="line">        <span class="keyword">\hline</span></span><br><span class="line">        学号 <span class="built_in">&amp;</span> 姓名 <span class="built_in">&amp;</span> 专业 <span class="built_in">&amp;</span> 联系方式 <span class="keyword">\\</span></span><br><span class="line">        <span class="keyword">\hline</span></span><br><span class="line">        001 <span class="built_in">&amp;</span> 小明 <span class="built_in">&amp;</span> 炒菜 <span class="built_in">&amp;</span> 10086 <span class="keyword">\\</span></span><br><span class="line">        002 <span class="built_in">&amp;</span> 小红 <span class="built_in">&amp;</span> 做饭 <span class="built_in">&amp;</span> 10087 <span class="keyword">\\</span></span><br><span class="line">        003 <span class="built_in">&amp;</span> 小蓝 <span class="built_in">&amp;</span> 打水 <span class="built_in">&amp;</span> 10088 <span class="keyword">\\</span></span><br><span class="line">        <span class="keyword">\hline</span></span><br><span class="line">    <span class="keyword">\end</span>&#123;tabular&#125;</span><br><span class="line">    <span class="keyword">\caption</span>&#123;表格标题&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;table&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>效果</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/latex2/image-20230823003353189.png" alt="image-20230823003353189" style="zoom:80%;" />



<h3 id="2-3-图片"><a href="#2-3-图片" class="headerlink" title="2.3 图片"></a>2.3 图片</h3><ul>
<li>库包</li>
</ul>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>&#123;graphicx&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;float&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>写法</li>
</ul>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;figure&#125;[H] </span><br><span class="line">    <span class="keyword">\centering</span></span><br><span class="line">    <span class="keyword">\includegraphics</span>[width=0.9<span class="keyword">\textwidth</span>]&#123;图片路径&#125;</span><br><span class="line">    <span class="keyword">\caption</span>&#123;图片标题&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;figure&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>效果</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/latex2/image-20230823002715811.png" alt="image-20230823002715811" style="zoom:80%;" />



<h3 id="2-4-代码"><a href="#2-4-代码" class="headerlink" title="2.4 代码"></a>2.4 代码</h3><ul>
<li>库包</li>
</ul>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>&#123;listings&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>写法</li>
</ul>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;lstlisting&#125;</span><br><span class="line">    <span class="params">#</span>include &lt;iostream&gt;</span><br><span class="line">    using namespace std;</span><br><span class="line">    </span><br><span class="line">    int main()</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;&quot;hello&quot;&lt;&lt;endl;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;lstlisting&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>效果</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/latex2/image-20230823003618293.png" alt="image-20230823003618293" style="zoom:80%;" /> 



<h3 id="2-5-参考文献"><a href="#2-5-参考文献" class="headerlink" title="2.5 参考文献"></a>2.5 参考文献</h3><ul>
<li>库包</li>
</ul>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">无需</span><br></pre></td></tr></table></figure>

<ul>
<li>写法</li>
</ul>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;thebibliography&#125;&#123;99&#125;</span><br><span class="line">    <span class="keyword">\bibitem</span>&#123;book1&#125;潘爱民[译],(美)安德鲁·S.特南鲍姆.计算机网络（第6版）,教材读本.</span><br><span class="line">    <span class="keyword">\bibitem</span>&#123;art1&#125;邓雅韫.政府办公网络的安全建设[J].现代计算机(专业版),2001(09):63-65.</span><br><span class="line"><span class="keyword">\end</span>&#123;thebibliography&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>前后文中，引用标使用下面语法</li>
</ul>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">这里是一个引用<span class="keyword">\cite</span>&#123;book1&#125;。</span><br></pre></td></tr></table></figure>

<ul>
<li>效果</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/latex2/image-20230823004538573.png" alt="image-20230823004538573" style="zoom:80%;" />



<h3 id="2-6-插入封面"><a href="#2-6-插入封面" class="headerlink" title="2.6 插入封面"></a>2.6 插入封面</h3><ul>
<li>原生写法</li>
</ul>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\maketitle</span></span><br></pre></td></tr></table></figure>

<ul>
<li>库包</li>
</ul>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>&#123;pdfpages&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>写法</li>
</ul>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 插入封面</span></span><br><span class="line"><span class="comment">% \maketitle</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;titlepage&#125;	</span><br><span class="line">    <span class="comment">% 封面信息</span></span><br><span class="line">    <span class="keyword">\includepdf</span>[pages=&#123;1&#125;]&#123;cover.pdf&#125; <span class="comment">%曲线救国的思路，外界自建封面，然后调用</span></span><br><span class="line"><span class="keyword">\end</span>&#123;titlepage&#125;</span><br><span class="line"><span class="comment">% 封面</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>效果</p>
<p>效果就是单独一页，显示为插入的页面。</p>
<p>由于是封面，不会计入目录的页数计算。</p>
</li>
</ul>
<h3 id="2-7-插入目录"><a href="#2-7-插入目录" class="headerlink" title="2.7 插入目录"></a>2.7 插入目录</h3><ul>
<li>库包</li>
</ul>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">无需</span><br></pre></td></tr></table></figure>

<ul>
<li>写法</li>
</ul>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 目录</span></span><br><span class="line"><span class="keyword">\tableofcontents</span></span><br></pre></td></tr></table></figure>

<ul>
<li>效果</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/latex2/image-20230823005618237.png" alt="image-20230823005618237" style="zoom:80%;" />



]]></content>
      <categories>
        <category>通用知识</category>
      </categories>
      <tags>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>《Linux》Notes</title>
    <url>/butterflyblog/2023/04/18/%E3%80%8ALinux%E3%80%8BNotes/</url>
    <content><![CDATA[<h1 id="《Linux》Notes"><a href="#《Linux》Notes" class="headerlink" title="《Linux》Notes"></a>《Linux》Notes</h1><h2 id="Linux-命令-篇"><a href="#Linux-命令-篇" class="headerlink" title="Linux 命令 篇"></a>Linux 命令 篇</h2><h3 id="0、基础目录"><a href="#0、基础目录" class="headerlink" title="0、基础目录"></a>0、基础目录</h3><h4 id="清空当前命令行信息"><a href="#清空当前命令行信息" class="headerlink" title="清空当前命令行信息"></a>清空当前命令行信息</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">clear</span><br></pre></td></tr></table></figure>



<h3 id="1、文件命令"><a href="#1、文件命令" class="headerlink" title="1、文件命令"></a>1、文件命令</h3><h4 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h4><ul>
<li><p>蓝色</p>
<p>文件夹<code>d</code></p>
</li>
<li><p>青色</p>
<p>软链接<code>l</code>，通过 <code>ls -l</code> 可以看到会指向真实文件或文件夹</p>
</li>
<li><p>红色</p>
<p>.tar&#x2F;.tar.gz 归档压缩包</p>
</li>
<li><p>黑色</p>
<p>文件<code>-</code></p>
</li>
</ul>
<h4 id="查看当前目录"><a href="#查看当前目录" class="headerlink" title="查看当前目录"></a>查看当前目录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls</span><br><span class="line">详细模式</span><br><span class="line">ls -l</span><br><span class="line">查看隐藏文件</span><br><span class="line">ls -a</span><br></pre></td></tr></table></figure>

<h4 id="显示当前位置"><a href="#显示当前位置" class="headerlink" title="显示当前位置"></a>显示当前位置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwd</span><br><span class="line">即print working directory</span><br></pre></td></tr></table></figure>

<h4 id="切换目录"><a href="#切换目录" class="headerlink" title="切换目录"></a>切换目录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd</span><br><span class="line">即change directory</span><br></pre></td></tr></table></figure>

<h4 id="几个特殊的目录"><a href="#几个特殊的目录" class="headerlink" title="几个特殊的目录"></a>几个特殊的目录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~</span><br><span class="line">代表当前用户的主目录</span><br><span class="line">.</span><br><span class="line">代表当前目录</span><br><span class="line">..</span><br><span class="line">代表上一级目录</span><br><span class="line"></span><br><span class="line">cd ~</span><br><span class="line">cd ~/example</span><br><span class="line">cd ../example</span><br></pre></td></tr></table></figure>

<h4 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir abc</span><br><span class="line">mkdir -p abc/123/text</span><br><span class="line">//创建目录即make directory,-p参数将路径的层次目录全部创建</span><br><span class="line"></span><br><span class="line">rmdir abc</span><br><span class="line">//删除空目录即remove directory,空目录才能删除，若目录非空，则删除失败</span><br><span class="line"></span><br><span class="line">rm -rf abc</span><br><span class="line">rm -rf /*</span><br><span class="line">//删除文件或目录即remove,可以删除非空目录，会连带里面的内容都删除,-rf参数表示强制删除</span><br><span class="line"></span><br><span class="line">cp -rf example example2</span><br><span class="line">//复制文件或目录即copy</span><br><span class="line"></span><br><span class="line">mv hello helloworld</span><br><span class="line">//移动文件或目录（重命名）即move</span><br></pre></td></tr></table></figure>

<h4 id="归档"><a href="#归档" class="headerlink" title="归档"></a>归档</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -cvf xxx.tar file1 file2 file3</span><br><span class="line">tar -zcvf xxx.tar.gz example/</span><br><span class="line">//即tape archive,创建档案打包</span><br><span class="line">//c表示create创建档案v表示verbose显示详情f表示file,z表示gzip压缩</span><br></pre></td></tr></table></figure>

<h4 id="还原归档"><a href="#还原归档" class="headerlink" title="还原归档"></a>还原归档</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xvf example.tar</span><br><span class="line">tar -xvf example.tar -C mydir</span><br><span class="line">tar -zxvf example.tar.gz</span><br><span class="line">//其中，-C参数指定存放目标目录，默认解到当前目录，z解压缩</span><br></pre></td></tr></table></figure>

<h4 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s example examplelink</span><br><span class="line">//即windows的快捷方式,s表示soft软链接（默认为硬）</span><br></pre></td></tr></table></figure>



<h3 id="2、用户"><a href="#2、用户" class="headerlink" title="2、用户"></a>2、用户</h3><h4 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">useradd -m test1</span><br><span class="line">//其中sudo表示以管理员身份执行，如下，后面同理</span><br><span class="line">//sudo useradd -m test1</span><br></pre></td></tr></table></figure>

<h4 id="修改用户密码"><a href="#修改用户密码" class="headerlink" title="修改用户密码"></a>修改用户密码</h4><blockquote>
<p>密码不会显示的，但实际上输入了</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">passwd test1</span><br></pre></td></tr></table></figure>

<h4 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">userdel test1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，删除用户后，不会自动删除<code>/home/test1</code>的文件</p>
<p>可以自己删除<code>sudo rm -rf /home/test1</code></p>
<ul>
<li><p>注意</p>
<ul>
<li><p>登陆系统时，默认不允许以root用户登陆</p>
</li>
<li><p>只有特殊用户才能执行sudo</p>
<blockquote>
<p>test1就不能执行sudo</p>
</blockquote>
</li>
<li><p>能执行sudo命令的用户叫做 sudoer</p>
</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="超级用户root"><a href="#超级用户root" class="headerlink" title="超级用户root"></a>超级用户root</h4><blockquote>
<p>类似Windows下的管理员Administrator用户</p>
<p>root有全部权限</p>
<ul>
<li><p>设置密码</p>
<p><code>sudo passwd root</code></p>
</li>
<li><p>切换到 root用户(switch user)</p>
<p><code>su root</code></p>
<blockquote>
<p>切换用户仅对当前会话终端有效（临时切换而已），不影响当前桌面环境</p>
</blockquote>
</li>
<li><p>退出</p>
<p><code>exit</code></p>
</li>
</ul>
</blockquote>
<h4 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h4><blockquote>
<p>默认在同名的组</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//创建组</span><br><span class="line">groupadd boys</span><br><span class="line">//创建用户（g表示添加用户同时加到组boys里）</span><br><span class="line">useradd -m -g boys ming</span><br><span class="line">//修改现有用户到新组(usermod用户信息)</span><br><span class="line">usermod -g boys ming</span><br><span class="line"></span><br><span class="line">//查看用户和组(一行表示一个group的信息，名称+ID)</span><br><span class="line">cat /etc/group</span><br><span class="line">//查看用户列表(一行一个用户信息)</span><br><span class="line">cat /etc/passwd</span><br></pre></td></tr></table></figure>

<h4 id="以root-登陆桌面"><a href="#以root-登陆桌面" class="headerlink" title="以root 登陆桌面"></a>以root 登陆桌面</h4><blockquote>
<p>默认不允许</p>
<p>要修改配置</p>
</blockquote>
<ul>
<li><p>其他用户登陆</p>
</li>
<li><p>切换到root用户</p>
<p><code>su root</code></p>
</li>
<li><p>打开配置1</p>
<p><code>gedit /etc/pam.d/gdm-autologin</code></p>
<p>注释掉#</p>
<blockquote>
<p>#auth   required    pam_succeed_if.so user !&#x3D; root quiet_success</p>
</blockquote>
</li>
<li><p>打开配置2</p>
<p><code>gedit /etc/pam.d/gdm-password</code></p>
<p>注释掉</p>
<blockquote>
<p>#auth   required    pam_succeed_if.so user !&#x3D; root quiet_success</p>
</blockquote>
</li>
<li><p>关闭虚拟机，重启</p>
</li>
</ul>
<h3 id="3、文件"><a href="#3、文件" class="headerlink" title="3、文件"></a>3、文件</h3><h4 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h4><ul>
<li><p><code>-owner</code></p>
<p>文件的属主</p>
</li>
<li><p><code>-r</code></p>
<p>是否可读read</p>
</li>
<li><p><code>-w</code></p>
<p>是否可写write</p>
</li>
<li><p><code>-x</code></p>
<p>是否可执行excute</p>
</li>
<li><p>权限分为三部分</p>
<ul>
<li>自己</li>
<li>同组</li>
<li>别人</li>
</ul>
<p>例如：</p>
<p><code>rwxrwxr-x</code></p>
<p><code>rwxrwxr--</code></p>
<p><code>r--------</code></p>
</li>
</ul>
<h4 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h4><blockquote>
<p>只有文件的属主或root可以修改文件权限</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod o+w example.txt</span><br><span class="line">chmod o-w example.txt</span><br><span class="line">chmod +w example.txt</span><br><span class="line">//即change file mode 修改文件的访问权限</span><br><span class="line">//o表示other别人，+w表示增加write权限，-w表示除去write权限</span><br><span class="line">//人员：a所有人，u自己,o别人，不加人员默认是自己和本组</span><br></pre></td></tr></table></figure>

<h4 id="修改文件属主"><a href="#修改文件属主" class="headerlink" title="修改文件属主"></a>修改文件属主</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown</span><br><span class="line">//即change owner修改文件的属主，不常用</span><br><span class="line">chown -R 新属主 文件</span><br></pre></td></tr></table></figure>



<h3 id="4、可执行脚本"><a href="#4、可执行脚本" class="headerlink" title="4、可执行脚本"></a>4、可执行脚本</h3><ul>
<li><p>颜色</p>
<ul>
<li><p>普通文本 </p>
<p>黑色</p>
</li>
<li><p>可执行脚本 </p>
<p>绿色</p>
</li>
</ul>
</li>
<li><p>脚本Script，一种解释执行的程序</p>
<p>Linux 下常见的三种脚本程序</p>
<ul>
<li>Shell 脚本 <code>*.sh</code></li>
<li>Perl 脚本 <code>*.pl</code></li>
<li>Python 脚本 <code>*.py</code></li>
</ul>
<p>脚本文件，本质是一个文本文件</p>
<ul>
<li>是一个文本文件，具有可执行权限</li>
</ul>
</li>
<li><p>脚本程序都是由解释器来执行的</p>
<ul>
<li>Shell 脚本解释器 <code>/bin/sh</code></li>
<li>Perl 脚本解释器 <code>/bin/perl</code></li>
<li>Python 脚本解释器 <code>/bin/python3</code></li>
</ul>
</li>
<li><p>执行脚本</p>
<p>两种方式</p>
<ul>
<li><code>./hello.py</code></li>
<li><code>/bin/python3 hello.py</code></li>
</ul>
<blockquote>
<p>第二种，相当于传入参数</p>
</blockquote>
</li>
</ul>
<h4 id="Shell-脚本"><a href="#Shell-脚本" class="headerlink" title="Shell 脚本"></a>Shell 脚本</h4><ul>
<li><p>按Shell 语法写出来的脚本</p>
<p>是Linux 自带的脚本语言</p>
<blockquote>
<p>相当于Windows 下的 DOS 批处理脚本</p>
</blockquote>
</li>
<li><p>写文本</p>
</li>
</ul>
<p><code>hello.sh</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">echo &quot;hello,world&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>添加执行权限</p>
<p><code>chmod +x hello.sh</code></p>
<blockquote>
<p>Linux很严格，自己也要加上x执行权限，才能执行脚本</p>
</blockquote>
</li>
<li><p>执行</p>
<p><code>./hello.sh</code></p>
<blockquote>
<p>执行必须加上路径！</p>
<p>注意不能是<code>hello.sh</code>，要加上<code>./</code></p>
</blockquote>
</li>
</ul>
<h4 id="Python-脚本"><a href="#Python-脚本" class="headerlink" title="Python 脚本"></a>Python 脚本</h4><ul>
<li>也要走三步流程<ul>
<li>加上开头</li>
<li>添加执行权限</li>
<li>用路径执行</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello,world&quot;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="5、变量"><a href="#5、变量" class="headerlink" title="5、变量"></a>5、变量</h3><h4 id="SHELL中的变量"><a href="#SHELL中的变量" class="headerlink" title="SHELL中的变量"></a>SHELL中的变量</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义变量</span></span><br><span class="line">OUTDIR = /opt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用变量</span></span><br><span class="line">echo &quot;output to : $&#123;OUTDIR&#125;&quot;</span><br><span class="line">ls $&#123;OUTDIR&#125;</span><br></pre></td></tr></table></figure>

<h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><ul>
<li><p>定义一个环境变量</p>
<p><code>export OUTDIR=/opt</code></p>
<p>然后就可以通过${OUTDIR}来作为<code>/opt</code>使用了</p>
<blockquote>
<p>但是，你在一个终端里定义的环境变量，</p>
<p>只在当前终端有效</p>
</blockquote>
</li>
<li><p>查看当前环境变量命令</p>
<p><code>printenv</code></p>
</li>
<li><p>环境变量是可以在脚本中直接使用的</p>
</li>
</ul>
<h4 id="用户环境变量"><a href="#用户环境变量" class="headerlink" title="用户环境变量"></a>用户环境变量</h4><ul>
<li><p>在<code>~/.profile</code>中定义</p>
<blockquote>
<p>这个隐藏文件本质也是一个SHELL脚本</p>
</blockquote>
</li>
<li><p>打开这个文件</p>
</li>
<li><p>在文件末尾文本添加</p>
<p><code>export OUTDIR=/opt</code></p>
</li>
<li><p>重启</p>
</li>
</ul>
<blockquote>
<p>原理：当用户打开终端时，会自动执行<code>.profile</code>，</p>
<p>将变量注入到当前环境中。</p>
<p>注：</p>
<p>每个用户有自己的<code>.profile</code></p>
<p>有些Linux 是<code>.bash_profile</code></p>
</blockquote>
<h4 id="系统环境变量"><a href="#系统环境变量" class="headerlink" title="系统环境变量"></a>系统环境变量</h4><ul>
<li>定义的环境变量对所有用户都有效</li>
<li>在<code>/etc/profile</code>中</li>
<li>需要以root命令执行<ul>
<li>一般不直接修改<code>/etc/profile</code></li>
<li>而是在<code>/etc/profile.d/</code>下创建一个自定义的脚本</li>
<li><code>gedit /etc/profile.d/myprofile.sh</code></li>
<li>写入脚本</li>
<li>重启</li>
</ul>
</li>
</ul>
<h4 id="PATH-环境变量"><a href="#PATH-环境变量" class="headerlink" title="PATH 环境变量"></a>PATH 环境变量</h4><ul>
<li><p>PATH，最常见的一个环境变量</p>
<p>用于描述可执行程序的搜索路径</p>
</li>
<li><p>查看</p>
<p><code>echo $PATH</code></p>
</li>
<li><p>路径</p>
<ul>
<li>冒号<code>:</code>分开多个路径</li>
</ul>
</li>
<li><p>默认的，系统从以下目录中搜索可执行程序</p>
<ul>
<li><code>/usr/bin</code></li>
<li><code>/usr/sbin</code></li>
<li><code>/usr/local/bin</code></li>
<li><code>/usr/local/sbin</code></li>
</ul>
<blockquote>
<p>注意，是<code>usr</code>不是<code>user</code>！！！</p>
<p>其中，sbin为超级用户root 才能执行的程序</p>
<p><code>/usr/</code>下系统自带的程序，</p>
<p><code>/usr/loacl</code>才是用户安装的程序。</p>
</blockquote>
</li>
<li><p>修改</p>
<ul>
<li>在系统变量修改方法中：<br>打开<code>gedit /etc/profile.d/myprofile.sh</code></li>
<li>写入<code>export PATH=$PATH:/home/seymour0314</code></li>
<li>重启</li>
</ul>
<blockquote>
<p>当然，使用其他方法也可以，就是PATH生效范围不一样</p>
<blockquote>
<p>若你添加了某个路径，</p>
<p>那么下次执行这个路径下的可执行文件时，</p>
<p>就不用通过路径执行了</p>
</blockquote>
</blockquote>
</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/linux/image-20230418183545180.png" alt="image-20230418183545180" style="zoom:80%;" />



<h3 id="6、虚拟机网络"><a href="#6、虚拟机网络" class="headerlink" title="6、虚拟机网络"></a>6、虚拟机网络</h3><ul>
<li><p>先把 VMware 设置在管理员方式运行下</p>
</li>
<li><p>看网络配置部分</p>
</li>
<li><p>注意，宿主机能上网，虚拟机才能上网</p>
</li>
</ul>
<h3 id="7、软件包管理器"><a href="#7、软件包管理器" class="headerlink" title="7、软件包管理器"></a>7、软件包管理器</h3><blockquote>
<p>注意要<code>sudo</code>执行</p>
</blockquote>
<ul>
<li><p><code>apt</code></p>
<ul>
<li><p>安装</p>
<p><code>apt install net-tools</code></p>
</li>
<li><p>移除</p>
<p><code>apt remove net-tools</code></p>
</li>
<li><p>搜索</p>
<p><code>apt search xxx</code></p>
</li>
<li><p>列表</p>
<p><code>apt list | grep xxx</code></p>
</li>
</ul>
</li>
</ul>
<h3 id="8、FTP-服务器"><a href="#8、FTP-服务器" class="headerlink" title="8、FTP 服务器"></a>8、FTP 服务器</h3><ul>
<li><p>比如，传文件给Ubuntu主机</p>
</li>
<li><p>可以在要传文件的主机上使用<code>FileZilla</code>软件传给虚拟机</p>
</li>
<li><p>客户端 FileZilla（Windows)</p>
</li>
<li><p>服务器 vsftpd （Ubuntu）</p>
</li>
</ul>
<h3 id="9、SSH-服务器"><a href="#9、SSH-服务器" class="headerlink" title="9、SSH 服务器"></a>9、SSH 服务器</h3><ul>
<li>略，服务器用到</li>
</ul>
<h3 id="10、文本编辑"><a href="#10、文本编辑" class="headerlink" title="10、文本编辑"></a>10、文本编辑</h3><h4 id="vi-x2F-vim"><a href="#vi-x2F-vim" class="headerlink" title="vi&#x2F;vim"></a>vi&#x2F;vim</h4><ul>
<li>vim是vi 的升级版</li>
</ul>
<h4 id="打开文本编辑"><a href="#打开文本编辑" class="headerlink" title="打开文本编辑"></a>打开文本编辑</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim abc.txt</span><br></pre></td></tr></table></figure>

<ul>
<li>如果目标文件存在，则打开编辑</li>
<li>如果不存在，会新建一个</li>
</ul>
<h4 id="切换模式"><a href="#切换模式" class="headerlink" title="切换模式"></a>切换模式</h4><ul>
<li><p>两个模式</p>
<ul>
<li>编辑模式 Insert Mode :按<code>i</code>键进入</li>
<li>命令模式 Command Mode :按<code>Esc</code>键进入</li>
</ul>
</li>
<li><p>退出</p>
<p>先进入命令模式</p>
<ul>
<li><code>:wq</code>保存退出</li>
<li><code>:q</code>退出</li>
<li><code>:q!</code>强制退出（放弃保存）</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>《LaTeX》Notes</title>
    <url>/butterflyblog/2023/08/01/%E3%80%8ALaTeX%E3%80%8BNotes/</url>
    <content><![CDATA[<h1 id="《LaTeX》Notes"><a href="#《LaTeX》Notes" class="headerlink" title="《LaTeX》Notes"></a>《LaTeX》Notes</h1><blockquote>
<h4 id="官网：LaTeX"><a href="#官网：LaTeX" class="headerlink" title="官网：LaTeX"></a>官网：<a href="https://www.latex-project.org/">LaTeX</a></h4><h4 id="知识来源：b站-latex中文教程"><a href="#知识来源：b站-latex中文教程" class="headerlink" title="知识来源：b站 latex中文教程"></a>知识来源：b站 <a href="https://www.bilibili.com/video/BV15x411j7k6/">latex中文教程</a></h4></blockquote>
<h3 id="！！！长文警告！！！"><a href="#！！！长文警告！！！" class="headerlink" title="！！！长文警告！！！"></a>！！！长文警告！！！</h3><blockquote>
<h4 id="速记"><a href="#速记" class="headerlink" title="速记"></a>速记</h4><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">% 中文包</span></span><br><span class="line">&gt;<span class="keyword">\usepackage</span>&#123;ctex&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">% 插图表格浮动体</span></span><br><span class="line">&gt;<span class="keyword">\usepackage</span>&#123;graphicx&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">% 数学公式包</span></span><br><span class="line">&gt;<span class="keyword">\usepackage</span>&#123;amsmath&#125;</span><br><span class="line">&gt;<span class="keyword">\usepackage</span>&#123;amssymb&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="第一章、前言"><a href="#第一章、前言" class="headerlink" title="第一章、前言"></a>第一章、前言</h2><h3 id="1-1-安装-Texlive"><a href="#1-1-安装-Texlive" class="headerlink" title="1.1 安装 Texlive"></a>1.1 安装 Texlive</h3><ul>
<li><p>下载官网：<a href="https://tug.org/texlive/">Tex Live</a></p>
</li>
<li><p>安装时间较长</p>
</li>
</ul>
<h3 id="1-2-基本操作"><a href="#1-2-基本操作" class="headerlink" title="1.2 基本操作"></a>1.2 基本操作</h3><h4 id="1-2-1-版本"><a href="#1-2-1-版本" class="headerlink" title="1.2.1 版本"></a>1.2.1 版本</h4><ul>
<li><p>打开命令行窗口</p>
</li>
<li><p>检查三个版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tex -v</span><br><span class="line">latex -v</span><br><span class="line">xelatex -v</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex1.png"></p>
</li>
<li><p>更新命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tlmgr update --all</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex2.png"></p>
</li>
</ul>
<h4 id="1-2-2-编写"><a href="#1-2-2-编写" class="headerlink" title="1.2.2 编写"></a>1.2.2 编写</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /				#切换到工作目录下</span><br><span class="line">mkdir testLatex		#创建一个文件夹</span><br><span class="line">cd testLatex		#切换到文件夹下</span><br><span class="line">notepad test.tex	#创建一个tex文件</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">写入内容...</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译方法一</span></span><br><span class="line">latex test.tex		#编译latex文件，得到dvi文件</span><br><span class="line">dvipdfmx test.dvi	#把div文件转为pdf文件</span><br><span class="line">test.pdf			#打开查看pdf文件</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">编译方法二</span></span><br><span class="line">xelatex test.tex	#直接生成pdf文件</span><br><span class="line">test.pdf			#打开查看pdf文件</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除多余文件</span></span><br><span class="line">del *.aux *.log *.dvi	#删除同时带来的aux/log/dvi文件</span><br></pre></td></tr></table></figure>

<ul>
<li>创建、写入文件</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex3.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex4.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line"></span><br><span class="line">Hello \LaTeX.</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>方法一：先生成 dvi ，再生成 pdf</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex5.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex6.png">  </p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex7.png"></p>
<ul>
<li>方法二：直接生成pdf 文件</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex8.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex9.png"></p>
<h4 id="1-2-3-批处理文件"><a href="#1-2-3-批处理文件" class="headerlink" title="1.2.3 批处理文件"></a>1.2.3 批处理文件</h4><p>你也可以把命令行操作都放在bat文件中，</p>
<p>然后每次执行这个批处理文件即可。</p>
<ul>
<li><p>编写批处理文件<code>.bat</code>：</p>
<p><code>build.bat</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">latex test.tex</span><br><span class="line">dvipdfmx test.dvi</span><br><span class="line">del *.aux *.dvi *.log</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex10.png"></p>
<blockquote>
<p>当然，你写编译方法二的编译也是可以的。</p>
</blockquote>
</li>
<li><p>运行批处理文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">build</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex11.png"> </p>
<p>可以看到，会自动执行命令了。</p>
</li>
</ul>
<h4 id="1-2-5-采用中文"><a href="#1-2-5-采用中文" class="headerlink" title="1.2.5 采用中文"></a>1.2.5 采用中文</h4><ul>
<li><p>先检查<code>.tex</code>文件是不是<code>utf-8</code>编码的</p>
<blockquote>
<p>点击 文件 | 另存为</p>
<p>可以看到有编码格式查看，</p>
<p>若不是 utf-8，可以先另存为 utf-8 并覆盖原文件。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex12.png"></p>
</blockquote>
</li>
<li><p>引入中文宏包</p>
<p>在 .tex 文件中引入中文包之后就可以使用中文了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line"></span><br><span class="line">\usepackage&#123;ctex&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line"></span><br><span class="line">你好呀，\LaTeX.</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex13.png"> </p>
</li>
<li><p>编译并查看结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">build</span><br><span class="line">test.pdf</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex14.png"></p>
</li>
</ul>
<h3 id="1-3-使用编写软件"><a href="#1-3-使用编写软件" class="headerlink" title="1.3 使用编写软件"></a>1.3 使用编写软件</h3><h4 id="1-3-1-多种软件"><a href="#1-3-1-多种软件" class="headerlink" title="1.3.1 多种软件"></a>1.3.1 多种软件</h4><p>编写软件并没有要求，可以使用 记事本都可以。</p>
<p>关键是，有些软件可以把 cmd 命令集成在软件中，那么操作就会非常方便。</p>
<ul>
<li>TexWorks</li>
<li>TexStudio</li>
<li>VScode</li>
<li>…</li>
</ul>
<h4 id="1-3-2-TexWorks"><a href="#1-3-2-TexWorks" class="headerlink" title="1.3.2 TexWorks"></a>1.3.2 TexWorks</h4><ul>
<li><p>一般会自带</p>
</li>
<li><p>打开效果</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex15.png"></p>
</li>
<li><p>编译只需要点击左上角的播放图标即可</p>
</li>
</ul>
<blockquote>
<p>但是没有提示效果，所以建议采用VScode</p>
</blockquote>
<h4 id="1-3-3-VScode"><a href="#1-3-3-VScode" class="headerlink" title="1.3.3 VScode"></a>1.3.3 VScode</h4><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><ul>
<li><p>安装插件<code>LaTeX Workshop</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex16.png"></p>
</li>
<li><p>重启 VScode</p>
</li>
<li><p>打开VScode 设置，配置 <code>settings.json</code></p>
<blockquote>
<p>左下角 设置                           点击这个中间的按钮</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex17.png"><br><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex18.png"> </p>
</blockquote>
<p><code>settings.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>   </span><br><span class="line">    <span class="comment">// 你已有的设置复制放在这下面</span></span><br><span class="line">   	</span><br><span class="line"></span><br><span class="line">    <span class="comment">//本次latex的设置 start</span></span><br><span class="line">    <span class="attr">&quot;latex-workshop.latex.autoBuild.run&quot;</span><span class="punctuation">:</span> <span class="string">&quot;never&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;latex-workshop.showContextMenu&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;latex-workshop.intellisense.package.enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;latex-workshop.message.error.show&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;latex-workshop.message.warning.show&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;latex-workshop.latex.tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xelatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xelatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;-synctex=1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-interaction=nonstopmode&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-file-line-error&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pdflatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pdflatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;-synctex=1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-interaction=nonstopmode&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-file-line-error&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;latexmk&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;latexmk&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;-synctex=1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-interaction=nonstopmode&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-file-line-error&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-pdf&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-outdir=%OUTDIR%&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bibtex&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bibtex&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;latex-workshop.latex.recipes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;XeLaTeX&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;xelatex&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PDFLaTeX&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;pdflatex&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;BibTeX&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;bibtex&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;LaTeXmk&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;latexmk&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xelatex -&gt; bibtex -&gt; xelatex*2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;xelatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;bibtex&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;xelatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;xelatex&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pdflatex -&gt; bibtex -&gt; pdflatex*2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;pdflatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;bibtex&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;pdflatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;pdflatex&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;latex-workshop.latex.clean.fileTypes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;*.aux&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.bbl&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.blg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.idx&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.ind&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.lof&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.lot&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.out&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.toc&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.acn&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.acr&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.alg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.glg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.glo&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.gls&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.ist&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.fls&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.log&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.fdb_latexmk&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;latex-workshop.latex.autoClean.run&quot;</span><span class="punctuation">:</span> <span class="string">&quot;onFailed&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;latex-workshop.latex.recipe.default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lastUsed&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;latex-workshop.view.pdf.internal.synctex.keybinding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;double-click&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 本次latex设置 end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><ul>
<li><p>在工作文件夹下，以VScode 打开使用即可</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex19.png"> </p>
</li>
<li><p>右上角有build</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex20.png"> </p>
<p>build 之后，左下角若没有错误，就可以正常打开pdf了</p>
<blockquote>
<p>若出问题，可以打开VScode的问题窗口查看，</p>
<p>快捷键<code>ctrl + 上引号</code> 打开问题窗口和终端。</p>
</blockquote>
</li>
<li><p>整体效果</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex21.png"></p>
</li>
</ul>
<blockquote>
<p>备注： </p>
<p>配置了json文件设置，就会在左侧有操作 cmd</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex22.png"> </p>
</blockquote>
<h2 id="第二章、语法"><a href="#第二章、语法" class="headerlink" title="第二章、语法"></a>第二章、语法</h2><h3 id="2-1-基本结构"><a href="#2-1-基本结构" class="headerlink" title="2.1 基本结构"></a>2.1 基本结构</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 导言区</span></span><br><span class="line"><span class="keyword">\documentclass</span>&#123;ctexart&#125;  <span class="comment">% book,report,letter</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% \usepackage&#123;ctex&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\newcommand</span>&#123;<span class="keyword">\degree</span>&#125;&#123;<span class="built_in">^</span><span class="keyword">\circ</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\title</span>&#123;<span class="keyword">\heiti</span> 杂谈勾股定理&#125;</span><br><span class="line"><span class="keyword">\author</span>&#123;<span class="keyword">\kaishu</span> 张三&#125;</span><br><span class="line"><span class="keyword">\date</span>&#123;<span class="keyword">\today</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">% 正文区（文稿区）</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"><span class="keyword">\maketitle</span></span><br><span class="line"></span><br><span class="line">勾股定理可以使用现代语言表述为：直角三角形斜边的平方等于两腰的平方和。</span><br><span class="line"></span><br><span class="line">可以用符号语言表述为：设直角三角形 <span class="built_in">$</span>ABC<span class="built_in">$</span>，其中 <span class="built_in">$</span><span class="keyword">\angle</span> C=90<span class="keyword">\degree</span><span class="built_in">$</span>，则有：</span><br><span class="line"><span class="keyword">\begin</span>&#123;equation&#125;</span><br><span class="line">    AB<span class="built_in">^</span>2 = BC<span class="built_in">^</span>2 + AC <span class="built_in">^</span>2</span><br><span class="line"><span class="keyword">\end</span>&#123;equation&#125;</span><br><span class="line"></span><br><span class="line">Let <span class="built_in">$</span>f(x)<span class="built_in">$</span> be defined by the formula <span class="built_in">$</span><span class="built_in">$</span>f(x)=3x<span class="built_in">^</span>2+x-1<span class="built_in">$</span><span class="built_in">$</span> which is a polynomial of degree 2.</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex23.png"></p>
<h3 id="2-2-字体设置"><a href="#2-2-字体设置" class="headerlink" title="2.2  字体设置"></a>2.2  字体设置</h3><ul>
<li>字体属性<ul>
<li>字体编码<ul>
<li>正文字体编码：OT1、T1、EU1 等</li>
<li>数学字体编码：OML、MOS、OMX 等</li>
</ul>
</li>
<li>字体族<ul>
<li>罗马字体：笔画起始处有装饰</li>
<li>无衬线字体：笔画起始处无装饰</li>
<li>打字机字体：每个字符宽度相等，又称等宽字体</li>
</ul>
</li>
<li>字体大小</li>
<li>字体系列<ul>
<li>粗细</li>
<li>宽度</li>
</ul>
</li>
<li>字体形状<ul>
<li>直立</li>
<li>斜体</li>
<li>伪斜体</li>
<li>小型大写</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex24.png"> </p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;article&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;ctex&#125;</span><br><span class="line"><span class="keyword">\newcommand</span>&#123;<span class="keyword">\myfont</span>&#125;&#123;<span class="keyword">\textsf</span>&#123;<span class="keyword">\textbf</span>&#123;My Font Content&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\title</span>&#123;<span class="keyword">\heiti</span> 字体设置&#125;</span><br><span class="line"><span class="keyword">\author</span>&#123;Seymour&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"><span class="keyword">\section</span>&#123;字体族&#125;</span><br><span class="line"><span class="comment">% 字体族设置</span></span><br><span class="line">原本：Origin Family，默认就是罗马字体</span><br><span class="line"></span><br><span class="line">(textrm):<span class="keyword">\textrm</span>&#123;Roman Family&#125;</span><br><span class="line"></span><br><span class="line">(textsf):<span class="keyword">\textsf</span>&#123;Sans Serif Family&#125;</span><br><span class="line"></span><br><span class="line">(texttt):<span class="keyword">\texttt</span>&#123;TypeWriter Family&#125;</span><br><span class="line"></span><br><span class="line">写在内部family也可以，如下</span><br><span class="line"></span><br><span class="line">(rmfamily):&#123;<span class="keyword">\rmfamily</span> inner things&#125;</span><br><span class="line"></span><br><span class="line">(sffamily):&#123;<span class="keyword">\sffamily</span> inner things&#125;</span><br><span class="line"></span><br><span class="line">(ttfamily):&#123;<span class="keyword">\ttfamily</span> inner things&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;粗细宽度&#125;</span><br><span class="line">外部text写法：</span><br><span class="line"></span><br><span class="line">(textmd):<span class="keyword">\textmd</span>&#123;Meddium Series&#125;</span><br><span class="line"></span><br><span class="line">(textbf):<span class="keyword">\textbf</span>&#123;Boldface Series&#125;</span><br><span class="line"></span><br><span class="line">内部series写法：</span><br><span class="line"></span><br><span class="line">(mdseries):&#123;<span class="keyword">\mdseries</span> Meddium Series&#125;</span><br><span class="line"></span><br><span class="line">(bfseries):&#123;<span class="keyword">\bfseries</span> Boldface Series&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;字体形状&#125;</span><br><span class="line">外部text写法：</span><br><span class="line"></span><br><span class="line">(textup):<span class="keyword">\textup</span>&#123;Upright Shape 直立&#125;</span><br><span class="line"></span><br><span class="line">(textit):<span class="keyword">\textit</span>&#123;Italic Shape 斜体&#125;</span><br><span class="line"></span><br><span class="line">(textsl):<span class="keyword">\textsl</span>&#123;Slanted Shape 伪斜体&#125;</span><br><span class="line"></span><br><span class="line">(textsc):<span class="keyword">\textsc</span>&#123;Small Caps Shape 小型大写&#125;</span><br><span class="line"></span><br><span class="line">内部shape写法：</span><br><span class="line"></span><br><span class="line">(upshape):&#123;<span class="keyword">\upshape</span> Upright Shape 直立&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(itshape):&#123;<span class="keyword">\itshape</span> Italic Shape 斜体&#125;</span><br><span class="line"></span><br><span class="line">(slshape):&#123;<span class="keyword">\slshape</span> Slanted Shape 伪斜体&#125;</span><br><span class="line"></span><br><span class="line">(scshape):&#123;<span class="keyword">\scshape</span> Small Caps Shape 小型大写&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;中文字体&#125;</span><br><span class="line">&#123;<span class="keyword">\songti</span> 宋体&#125; <span class="keyword">\quad</span> &#123;<span class="keyword">\heiti</span> 黑体&#125; <span class="keyword">\quad</span> &#123;<span class="keyword">\fangsong</span> 仿宋&#125; <span class="keyword">\quad</span> &#123;<span class="keyword">\kaishu</span> 楷书&#125;</span><br><span class="line"></span><br><span class="line">中文&#123;<span class="keyword">\bfseries</span> 粗体&#125; 和 &#123;<span class="keyword">\itshape</span> 斜体&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;字体大小&#125;</span><br><span class="line">&#123;<span class="keyword">\tiny</span> Hello,tiny&#125;<span class="keyword">\\</span></span><br><span class="line">&#123;<span class="keyword">\scriptsize</span> Hello,scriptsize&#125;<span class="keyword">\\</span></span><br><span class="line">&#123;<span class="keyword">\footnotesize</span> Hello,footnotesize&#125;<span class="keyword">\\</span></span><br><span class="line">&#123;<span class="keyword">\small</span> Hello,small&#125;<span class="keyword">\\</span></span><br><span class="line">&#123;<span class="keyword">\normalsize</span> Hello,normalsize&#125;<span class="keyword">\\</span></span><br><span class="line">&#123;<span class="keyword">\large</span> Hello,large&#125;<span class="keyword">\\</span></span><br><span class="line">&#123;<span class="keyword">\Large</span> Hello,Large&#125;<span class="keyword">\\</span></span><br><span class="line">&#123;<span class="keyword">\large</span> Hello,LARGE&#125;<span class="keyword">\\</span></span><br><span class="line">&#123;<span class="keyword">\huge</span> Hello,huge&#125;<span class="keyword">\\</span></span><br><span class="line">&#123;<span class="keyword">\Huge</span> Hello,Huge&#125;<span class="keyword">\\</span></span><br><span class="line">可以在文档导言区使用documentclass[10pt] 来定义正常字体大小<span class="keyword">\\</span></span><br><span class="line">中文字号设置：<span class="keyword">\\</span></span><br><span class="line">(zihao+数字):<span class="keyword">\zihao</span>&#123;3&#125; 你好，3号字体<span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\zihao</span>&#123;5&#125;其他具体，可以通过cmd下的 texdoc ctex 继续参考ctex文档。</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;自定义字体内容&#125;</span><br><span class="line"><span class="keyword">\myfont</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex25.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex26.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex27.png"></p>
<h3 id="2-3-篇章结构"><a href="#2-3-篇章结构" class="headerlink" title="2.3 篇章结构"></a>2.3 篇章结构</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;ctexbook&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">% \usepackage&#123;ctex&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\title</span>&#123;篇章结构&#125;</span><br><span class="line"><span class="keyword">\author</span>&#123;Seymour&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"><span class="keyword">\tableofcontents</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\chapter</span>&#123;开篇&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;引言&#125;</span><br><span class="line">“交通规划设计知识服务平台”是基于CNKI数字图书馆构建的，针对交通规划设计行业从业人员的规划设计创新。<span class="keyword">\par</span> 科研技术人员科研项目选题、撰写论文、成果鉴定，业内管理人员决策经营。</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;实验&#125;</span><br><span class="line"><span class="keyword">\subsection</span>&#123;实验工具&#125;</span><br><span class="line">铁路科研单位、铁路规划及勘察设计单位、地方铁路局。</span><br><span class="line"><span class="keyword">\subsection</span>&#123;实验过程&#125;</span><br><span class="line"><span class="keyword">\subsubsection</span>&#123;准备材料&#125;</span><br><span class="line">《铁路行业知识服务平台》是基于CNKI工程的强大基础平台开发的。</span><br><span class="line"><span class="keyword">\subsubsection</span>&#123;使用材料&#125;</span><br><span class="line">中国知网“公路规建管养知识服务平台”基于CNKI数据资源整合。</span><br><span class="line"><span class="keyword">\subsubsection</span>&#123;得到成果&#125;</span><br><span class="line">重点突出线路工程、机车车辆、通信信号板块。</span><br><span class="line"><span class="keyword">\subsection</span>&#123;实验结果&#125;</span><br><span class="line">中国知网“城市轨道交通知识服务平台”是服务于轨道交通行业用户，从业务需求角度出发。</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;结论&#125;</span><br><span class="line">城市轨道交通科研单位、城市轨道交通勘察设计单位、城市轨道交通运营单位。</span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex28.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex29.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex30.png"> </p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex31.png"> </p>
<h3 id="2-4-特殊字符"><a href="#2-4-特殊字符" class="headerlink" title="2.4 特殊字符"></a>2.4 特殊字符</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;article&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;ctex&#125;</span><br><span class="line"><span class="comment">%提供XeTeX的logo</span></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;xltxtra&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;texnames&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;mflogo&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\title</span>&#123;<span class="keyword">\heiti</span> 特殊字符&#125;</span><br><span class="line"><span class="keyword">\author</span>&#123;Seymour&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\maketitle</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;空白符号&#125;</span><br><span class="line">说明：</span><br><span class="line">空行分段，多个空行等同一个。</span><br><span class="line">自动缩进，绝对不能使用空格代替。</span><br><span class="line">英文中多个空格视为一个空格；中文中空格忽略。</span><br><span class="line">汉字与其他字符的间距由 XeLaTeX 自动处理。</span><br><span class="line">禁止使用中文全角空格。</span><br><span class="line"></span><br><span class="line">空格处理：</span><br><span class="line"></span><br><span class="line"><span class="comment">% 1em</span></span><br><span class="line">1em(quad):a<span class="keyword">\quad</span> b</span><br><span class="line"></span><br><span class="line"><span class="comment">% 2em</span></span><br><span class="line">2em(qquad):a<span class="keyword">\qquad</span> b</span><br><span class="line"></span><br><span class="line"><span class="comment">%约为 1/6 em</span></span><br><span class="line">1/6em(,)(thinspace):a<span class="keyword">\,</span>b a<span class="keyword">\thinspace</span> b</span><br><span class="line"></span><br><span class="line"><span class="comment">% 0.5em</span></span><br><span class="line">0.5em(enspace)<span class="keyword">\enspace</span> b</span><br><span class="line"></span><br><span class="line"><span class="comment">%空格</span></span><br><span class="line">空格( ):a<span class="keyword">\ </span>b</span><br><span class="line"></span><br><span class="line">硬空格:a~b</span><br><span class="line"></span><br><span class="line">1pc=12pt=4.218mm(kern+pc):a<span class="keyword">\kern</span> 1pc b</span><br><span class="line"></span><br><span class="line">可以为负(kern+em):a<span class="keyword">\kern</span> -1em b</span><br><span class="line"></span><br><span class="line">(hskip+em):a<span class="keyword">\hskip</span> 1em b</span><br><span class="line"></span><br><span class="line">(hspace+pt):a<span class="keyword">\hspace</span>&#123;35pt&#125;b</span><br><span class="line"></span><br><span class="line">占位宽度(hphantom+字):a<span class="keyword">\hphantom</span>&#123;xyz&#125;b</span><br><span class="line"></span><br><span class="line">弹性宽度(hfill):a<span class="keyword">\hfill</span> b</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;<span class="keyword">\LaTeX</span> 控制符&#125;</span><br><span class="line">通过转义符实现：</span><br><span class="line"></span><br><span class="line"><span class="keyword">\#</span> <span class="keyword">\$</span> <span class="keyword">\%</span> <span class="keyword">\&#123;</span> <span class="keyword">\&#125;</span> <span class="keyword">\~</span>&#123;&#125; <span class="keyword">\_</span>&#123;&#125; <span class="keyword">\^</span>&#123;&#125; <span class="keyword">\textbackslash</span> <span class="keyword">\&amp;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;排版符号&#125;</span><br><span class="line"><span class="keyword">\textbackslash</span> S 为<span class="keyword">\S</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\textbackslash</span> P 为<span class="keyword">\P</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\textbackslash</span> dag 为<span class="keyword">\dag</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\textbackslash</span> ddag 为<span class="keyword">\ddag</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\textbackslash</span> copyright 为<span class="keyword">\copyright</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\textbackslash</span> pounds 为 <span class="keyword">\pounds</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;<span class="keyword">\TeX</span> 标志符号&#125;</span><br><span class="line"><span class="comment">% &#123;&#125;是为了加空格</span></span><br><span class="line">原生：<span class="keyword">\TeX</span>&#123;&#125; <span class="keyword">\LaTeX</span>&#123;&#125; <span class="keyword">\LaTeXe</span>&#123;&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">% xltxtra 宏包提供</span></span><br><span class="line">xltxtra 宏包：<span class="keyword">\XeLaTeX</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% texnames 宏包提供</span></span><br><span class="line">texnames 宏包<span class="keyword">\AmSTeX</span>&#123;&#125; <span class="keyword">\AmS</span>-<span class="keyword">\LaTeX</span>&#123;&#125; <span class="keyword">\BibTeX</span>&#123;&#125; <span class="keyword">\LuaTeX</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">% mflogo 宏包提供</span></span><br><span class="line">mflogo 宏包：<span class="keyword">\METAFONT</span>&#123;&#125; <span class="keyword">\MF</span>&#123;&#125; <span class="keyword">\MP</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;引号&#125;</span><br><span class="line">`你好！&#x27;</span><br><span class="line"></span><br><span class="line">``你好！&#x27;&#x27;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;连字符&#125;</span><br><span class="line">- -- ---</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;非英文字符&#125;</span><br><span class="line"><span class="keyword">\oe</span>&#123;&#125; <span class="keyword">\OE</span>&#123;&#125; <span class="keyword">\ae</span>&#123;&#125; <span class="keyword">\AE</span>&#123;&#125; <span class="keyword">\aa</span>&#123;&#125; <span class="keyword">\AA</span>&#123;&#125; </span><br><span class="line"><span class="keyword">\o</span>&#123;&#125; <span class="keyword">\O</span>&#123;&#125; <span class="keyword">\l</span>&#123;&#125; <span class="keyword">\L</span>&#123;&#125; <span class="keyword">\ss</span>&#123;&#125; <span class="keyword">\SS</span>&#123;&#125; !`&#123;&#125; ?`&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;重音字符(以o为例)&#125;</span><br><span class="line"><span class="keyword">\`</span>o <span class="keyword">\&#x27;</span>o <span class="keyword">\^</span>o <span class="keyword">\&#x27;</span>&#x27;o <span class="keyword">\~</span>o <span class="keyword">\=</span>o <span class="keyword">\.</span>o</span><br><span class="line"><span class="keyword">\u</span>&#123;o&#125; <span class="keyword">\v</span>&#123;o&#125; <span class="keyword">\H</span>&#123;o&#125; <span class="keyword">\r</span>&#123;o&#125; <span class="keyword">\t</span>&#123;o&#125; <span class="keyword">\b</span>&#123;o&#125; <span class="keyword">\c</span>&#123;o&#125; <span class="keyword">\d</span>&#123;o&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex32.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex33.png"> </p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex34.png"> </p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex35.png"> </p>
<h3 id="2-5-插图"><a href="#2-5-插图" class="headerlink" title="2.5 插图"></a>2.5 插图</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;ctexart&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;graphicx&#125;</span><br><span class="line"><span class="keyword">\graphicspath</span>&#123;&#123;figures/&#125;,&#123;pics/&#125;&#125; <span class="comment">% 图片在当前目录下的 figures 目录、 pics 目录下</span></span><br><span class="line"><span class="comment">% 语法：\includegraphics[keyvals]&#123;imagefile&#125;</span></span><br><span class="line"><span class="comment">% 格式：EPS,PDF,PNG,JPEG,BMP</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"><span class="keyword">\LaTeX</span>&#123;&#125; 中的插图：</span><br><span class="line"></span><br><span class="line"><span class="comment">% 注意，最好设置大小，插图原图尺寸太大会展示不全</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 缩放因子 scale ，宽高尺寸 width height</span></span><br><span class="line"><span class="keyword">\includegraphics</span>[scale=0.1]&#123;pics/icon<span class="built_in">_</span>logo2.png&#125;</span><br><span class="line"><span class="keyword">\includegraphics</span>[height=3cm]&#123;icon<span class="built_in">_</span>logo2.png&#125;</span><br><span class="line"><span class="keyword">\includegraphics</span>[width=3cm]&#123;icon<span class="built_in">_</span>logo2.png&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\includegraphics</span>[width=0.5<span class="keyword">\textwidth</span>]&#123;icon<span class="built_in">_</span>logo2.png&#125;</span><br><span class="line"><span class="keyword">\includegraphics</span>[height=0.2<span class="keyword">\textheight</span>]&#123;icon<span class="built_in">_</span>logo2.png&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex36.png"></p>
<blockquote>
<p>备注：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex37.png"> </p>
</blockquote>
<h3 id="2-6-表格"><a href="#2-6-表格" class="headerlink" title="2.6 表格"></a>2.6 表格</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;ctexart&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;[center]&#123;l|c|c|p&#123;1cm&#125;|r&#125; </span><br><span class="line">    <span class="comment">% 整表位置、行字对齐方式、竖线、宽度固定</span></span><br><span class="line">    <span class="keyword">\hline</span> <span class="comment">% 横线</span></span><br><span class="line">    学号 <span class="built_in">&amp;</span> 姓名 <span class="built_in">&amp;</span> 专业 <span class="built_in">&amp;</span> 成绩 <span class="built_in">&amp;</span> 备注 <span class="keyword">\\</span></span><br><span class="line">    <span class="keyword">\hline</span></span><br><span class="line">    2101 <span class="built_in">&amp;</span> 张三 <span class="built_in">&amp;</span> 计算机科学与技术 <span class="built_in">&amp;</span> 90 <span class="built_in">&amp;</span> 通过 <span class="keyword">\\</span></span><br><span class="line">    2102 <span class="built_in">&amp;</span> 李四 <span class="built_in">&amp;</span> 信息安全 <span class="built_in">&amp;</span> 95 <span class="built_in">&amp;</span> 通过 <span class="keyword">\\</span></span><br><span class="line">    2103 <span class="built_in">&amp;</span> 王五 <span class="built_in">&amp;</span> 数据科学与大数据技术 <span class="built_in">&amp;</span> 98 <span class="built_in">&amp;</span> 通过 <span class="keyword">\\</span></span><br><span class="line">    <span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex38.png"></p>
<blockquote>
<p>更多可以查看宏包说明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">texdoc booktab</span><br><span class="line">texdoc longtab</span><br><span class="line">texdoc tabu</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="2-7-浮动体"><a href="#2-7-浮动体" class="headerlink" title="2.7 浮动体"></a>2.7 浮动体</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;ctexart&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;graphicx&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line">在 <span class="keyword">\LaTeX</span>&#123;&#125;中的图片(图<span class="keyword">\ref</span>&#123;lb-tj&#125;)</span><br><span class="line"><span class="keyword">\begin</span>&#123;figure&#125;[htbp]</span><br><span class="line">    <span class="keyword">\centering</span></span><br><span class="line">    <span class="keyword">\caption</span>&#123;同济大学校徽&#125;<span class="keyword">\label</span>&#123;lb-tj&#125;</span><br><span class="line">    <span class="keyword">\includegraphics</span>[width=3cm]&#123;pics/icon<span class="built_in">_</span>logo2.png&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;figure&#125;</span><br><span class="line"></span><br><span class="line">在 <span class="keyword">\LaTeX</span>&#123;&#125;中的表格(表<span class="keyword">\ref</span>&#123;lb-grades&#125;)</span><br><span class="line"><span class="keyword">\begin</span>&#123;table&#125;[htbp]</span><br><span class="line">    <span class="keyword">\centering</span></span><br><span class="line">    <span class="keyword">\begin</span>&#123;tabular&#125;[center]&#123;l|c|c|p&#123;1cm&#125;|r&#125; </span><br><span class="line">        <span class="comment">% 整表位置、行字对齐方式、竖线、宽度固定</span></span><br><span class="line">        <span class="keyword">\hline</span> <span class="comment">% 横线</span></span><br><span class="line">        学号 <span class="built_in">&amp;</span> 姓名 <span class="built_in">&amp;</span> 专业 <span class="built_in">&amp;</span> 成绩 <span class="built_in">&amp;</span> 备注 <span class="keyword">\\</span></span><br><span class="line">        <span class="keyword">\hline</span></span><br><span class="line">        2101 <span class="built_in">&amp;</span> 张三 <span class="built_in">&amp;</span> 计算机科学与技术 <span class="built_in">&amp;</span> 90 <span class="built_in">&amp;</span> 通过 <span class="keyword">\\</span></span><br><span class="line">        2102 <span class="built_in">&amp;</span> 李四 <span class="built_in">&amp;</span> 信息安全 <span class="built_in">&amp;</span> 95 <span class="built_in">&amp;</span> 通过 <span class="keyword">\\</span></span><br><span class="line">        2103 <span class="built_in">&amp;</span> 王五 <span class="built_in">&amp;</span> 数据科学与大数据技术 <span class="built_in">&amp;</span> 98 <span class="built_in">&amp;</span> 通过 <span class="keyword">\\</span></span><br><span class="line">        <span class="keyword">\hline</span></span><br><span class="line">    <span class="keyword">\end</span>&#123;tabular&#125;</span><br><span class="line">    <span class="keyword">\caption</span>&#123;成绩汇总表&#125;<span class="keyword">\label</span>&#123;lb-grades&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;table&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex39.png"></p>
<blockquote>
<p>备注：</p>
<ul>
<li>允许位置[htbp]<ul>
<li>h,here:代码所在上下文位置</li>
<li>t,top:代码所在的页面或后一页的顶部</li>
<li>b,bottom:代码所在页面的或后一页的底部</li>
<li>p,page:独立一页，浮动页面</li>
</ul>
</li>
<li>标题控制<ul>
<li>caption</li>
<li>bicaption</li>
</ul>
</li>
<li>并排与子图表<ul>
<li>subcaption</li>
<li>subfig</li>
<li>floatrow</li>
</ul>
</li>
<li>绕排<ul>
<li>picinpar</li>
<li>wrapfig</li>
</ul>
</li>
</ul>
<p>可以具体查询宏包手册。</p>
</blockquote>
<h3 id="2-8-数学公式初步"><a href="#2-8-数学公式初步" class="headerlink" title="2.8 数学公式初步"></a>2.8 数学公式初步</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;ctexart&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;ctex&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;amsmath&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"><span class="keyword">\section</span>&#123;简介&#125;</span><br><span class="line"><span class="keyword">\LaTeX</span>&#123;&#125; 将排版内容分为文本模式和数学模式。文本模式用于普通文本排版，数学模式用于数学公式排版。</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;行内公式&#125;</span><br><span class="line"><span class="keyword">\subsection</span>&#123;美元符号&#125;</span><br><span class="line">交换律是 <span class="built_in">$</span>a+b=b+a<span class="built_in">$</span>，如 <span class="built_in">$</span>1+2=2+1=3<span class="built_in">$</span>。</span><br><span class="line"><span class="keyword">\subsection</span>&#123;小括号&#125;</span><br><span class="line">交换律是 <span class="keyword">\(</span>a+b=b+a<span class="keyword">\)</span>，如 <span class="keyword">\(</span>1+2=2+1=3<span class="keyword">\)</span>。</span><br><span class="line"><span class="keyword">\subsection</span>&#123;math环境&#125;</span><br><span class="line">交换律是 <span class="keyword">\begin</span>&#123;math&#125;a+b=b+a<span class="keyword">\end</span>&#123;math&#125;，如 <span class="keyword">\begin</span>&#123;math&#125;1+2=2+1=3<span class="keyword">\end</span>&#123;math&#125;。</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;上下标&#125;</span><br><span class="line"><span class="built_in">$</span>3x<span class="built_in">^</span>&#123;20&#125; - x + 2 = 0<span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">$</span>3x<span class="built_in">^</span>&#123;3x<span class="built_in">^</span>&#123;20&#125; - x + 2&#125; - x + 2 = 0<span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">$</span> a<span class="built_in">_</span>0, a<span class="built_in">_</span>1,a<span class="built_in">_</span>2,...,a<span class="built_in">_</span>&#123;3x<span class="built_in">^</span>&#123;20&#125; - x + 2&#125; <span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;希腊字母&#125;</span><br><span class="line"><span class="built_in">$</span> <span class="keyword">\alpha</span> <span class="keyword">\quad</span> <span class="keyword">\beta</span> <span class="keyword">\quad</span> <span class="keyword">\gamma</span> <span class="keyword">\quad</span> <span class="keyword">\epsilon</span> <span class="keyword">\quad</span> <span class="keyword">\pi</span> <span class="keyword">\quad</span> <span class="keyword">\omega</span> <span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">$</span> <span class="keyword">\Gamma</span> <span class="keyword">\quad</span> <span class="keyword">\Delta</span> <span class="keyword">\quad</span> <span class="keyword">\Theta</span> <span class="keyword">\quad</span> <span class="keyword">\Pi</span> <span class="keyword">\quad</span> <span class="keyword">\Omega</span> <span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">$</span> <span class="keyword">\alpha</span> + <span class="keyword">\beta</span> <span class="built_in">^</span>2 + <span class="keyword">\gamma</span> <span class="built_in">^</span>3 = 0 <span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;数学函数&#125;</span><br><span class="line"><span class="built_in">$</span> <span class="keyword">\log</span> <span class="keyword">\quad</span> <span class="keyword">\sin</span> <span class="keyword">\quad</span> <span class="keyword">\cos</span> <span class="keyword">\quad</span> <span class="keyword">\arcsin</span> <span class="keyword">\quad</span> <span class="keyword">\arccos</span> <span class="keyword">\quad</span> <span class="keyword">\ln</span> <span class="keyword">\quad</span> <span class="built_in">$</span></span><br><span class="line"><span class="built_in">$</span> <span class="keyword">\sin</span> <span class="built_in">^</span>2 x + <span class="keyword">\cos</span> <span class="built_in">^</span>2 x = 1 <span class="keyword">\quad</span> <span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">$</span> y = <span class="keyword">\arcsin</span> x <span class="keyword">\quad</span> <span class="built_in">$</span></span><br><span class="line"><span class="built_in">$</span> y = <span class="keyword">\log</span><span class="built_in">_</span>2 x <span class="keyword">\quad</span> <span class="built_in">$</span></span><br><span class="line"><span class="built_in">$</span> y = sin<span class="built_in">^</span>&#123;-1&#125; x <span class="keyword">\quad</span> <span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;分式&#125;</span><br><span class="line">等底等高，圆锥体积为圆柱体积的<span class="built_in">$</span> 1/3 <span class="built_in">$</span>。</span><br><span class="line"></span><br><span class="line">等底等高，圆锥体积为圆柱体积的<span class="built_in">$</span> <span class="keyword">\frac</span>&#123;1&#125;&#123;3&#125; <span class="built_in">$</span>。</span><br><span class="line"></span><br><span class="line"><span class="built_in">$</span> <span class="keyword">\frac</span>&#123;x&#125;&#123;x<span class="built_in">^</span>2+x+1&#125; <span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">$</span> <span class="keyword">\frac</span>&#123;<span class="keyword">\sqrt</span>&#123;x-1&#125;&#125;&#123;<span class="keyword">\sqrt</span>&#123;x+1&#125;&#125; <span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">$</span> <span class="keyword">\frac</span>&#123;1&#125;&#123;1+<span class="keyword">\frac</span>&#123;1&#125;&#123;x&#125;&#125; <span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">$</span> <span class="keyword">\sqrt</span>&#123;<span class="keyword">\frac</span>&#123;x&#125;&#123;x<span class="built_in">^</span>2+x+1&#125;&#125; <span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;行间公式&#125;</span><br><span class="line"><span class="keyword">\subsection</span>&#123;美元符号&#125;</span><br><span class="line">交换律是 <span class="built_in">$</span><span class="built_in">$</span> a+b=b+a <span class="built_in">$</span><span class="built_in">$</span> 如 <span class="built_in">$</span><span class="built_in">$</span> 1+2=2+1=3 <span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\subsection</span>&#123;中括号&#125;</span><br><span class="line">交换律是 <span class="keyword">\[</span> a+b=b+a <span class="keyword">\]</span> 如 <span class="keyword">\[</span> 1+2=2+1=3 <span class="keyword">\]</span></span><br><span class="line"><span class="keyword">\subsection</span>&#123;displaymath环境&#125;</span><br><span class="line">交换律是 <span class="keyword">\begin</span>&#123;displaymath&#125;a+b=b+a<span class="keyword">\end</span>&#123;displaymath&#125;如 <span class="keyword">\begin</span>&#123;displaymath&#125;1+2=2+1=3<span class="keyword">\end</span>&#123;displaymath&#125;</span><br><span class="line"><span class="keyword">\subsection</span>&#123;自动编号公式equation环境&#125;</span><br><span class="line">交换律见式<span class="keyword">\ref</span>&#123;eq-commutative&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;equation&#125;</span><br><span class="line">    a+b=b+a <span class="keyword">\label</span>&#123;eq-commutative&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;equation&#125;</span><br><span class="line"><span class="keyword">\subsection</span>&#123;不编号公式equation*环境&#125;</span><br><span class="line">交换律见式<span class="keyword">\ref</span>&#123;eq-commutative2&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;equation*&#125;</span><br><span class="line">    a+b=b+a <span class="keyword">\label</span>&#123;eq-commutative2&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;equation*&#125; <span class="comment">% 要引入amsmath包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex40.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex41.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex42.png"> </p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex43.png"> </p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex44.png"></p>
<h3 id="2-9-矩阵"><a href="#2-9-矩阵" class="headerlink" title="2.9 矩阵"></a>2.9 矩阵</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\documentclass&#123;ctexart&#125;</span><br><span class="line"></span><br><span class="line">\usepackage&#123;ctex&#125;</span><br><span class="line">\usepackage&#123;amsmath&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line"></span><br><span class="line">$</span><br><span class="line">\begin&#123;matrix&#125; % 要使用amsmath</span><br><span class="line">    0 &amp; 1 \\</span><br><span class="line">    1 &amp; 0</span><br><span class="line">\end&#123;matrix&#125;</span><br><span class="line">\quad</span><br><span class="line">\begin&#123;pmatrix&#125;</span><br><span class="line">    0 &amp; -i \\</span><br><span class="line">    i &amp; 0</span><br><span class="line">\end&#123;pmatrix&#125;</span><br><span class="line">\quad</span><br><span class="line">\begin&#123;bmatrix&#125;</span><br><span class="line">    0 &amp; -1 \\</span><br><span class="line">    2 &amp; 0</span><br><span class="line">\end&#123;bmatrix&#125;</span><br><span class="line">\quad</span><br><span class="line">\begin&#123;Bmatrix&#125;</span><br><span class="line">    i &amp; 0 \\</span><br><span class="line">    0 &amp; -i</span><br><span class="line">\end&#123;Bmatrix&#125;</span><br><span class="line">\quad</span><br><span class="line">\begin&#123;vmatrix&#125;</span><br><span class="line">    a &amp; b \\</span><br><span class="line">    c &amp; d</span><br><span class="line">\end&#123;vmatrix&#125;</span><br><span class="line">\quad </span><br><span class="line">\begin&#123;Vmatrix&#125;</span><br><span class="line">    a &amp; b \\</span><br><span class="line">    c &amp; d</span><br><span class="line">\end&#123;Vmatrix&#125;</span><br><span class="line">$</span><br><span class="line"></span><br><span class="line">$</span><br><span class="line">A= \begin&#123;pmatrix&#125;</span><br><span class="line">    a_&#123;11&#125;^2 &amp; a_&#123;12&#125;^2 &amp; a_&#123;13&#125;^2 \\</span><br><span class="line">    0 &amp; a_&#123;22&#125; &amp; a_&#123;23&#125; \\</span><br><span class="line">    0 &amp; 0 &amp; a_&#123;33&#125;</span><br><span class="line">\end&#123;pmatrix&#125;</span><br><span class="line">$</span><br><span class="line"></span><br><span class="line">$</span><br><span class="line">A = \begin&#123;bmatrix&#125;</span><br><span class="line">    a_&#123;11&#125; &amp; \dots &amp; a_&#123;1n&#125; \\</span><br><span class="line">    &amp; \ddots &amp; \vdots \\</span><br><span class="line">    0 &amp; &amp; a_&#123;nn&#125; </span><br><span class="line">\end&#123;bmatrix&#125;_&#123;n \times n&#125;</span><br><span class="line">$</span><br><span class="line"></span><br><span class="line">% 分块矩阵</span><br><span class="line">$</span><br><span class="line">\begin&#123;pmatrix&#125;</span><br><span class="line">    \begin&#123;matrix&#125;</span><br><span class="line">        1 &amp; 0 \\</span><br><span class="line">        0 &amp; 1</span><br><span class="line">    \end&#123;matrix&#125;</span><br><span class="line">    &amp; \text&#123;\Large 0&#125; \\</span><br><span class="line">    \text&#123;\Large 0&#125; &amp; \begin&#123;matrix&#125;</span><br><span class="line">        1 &amp; 0 \\</span><br><span class="line">        0 &amp; -1</span><br><span class="line">    \end&#123;matrix&#125;</span><br><span class="line">\end&#123;pmatrix&#125;</span><br><span class="line">$</span><br><span class="line"></span><br><span class="line">% 三角矩阵</span><br><span class="line">$</span><br><span class="line">\begin&#123;pmatrix&#125;</span><br><span class="line">    a_&#123;11&#125; &amp; a_&#123;12&#125; &amp; \cdots &amp; a_&#123;1n&#125; \\</span><br><span class="line">    &amp; a_&#123;22&#125; &amp; \cdots &amp; a_&#123;2n&#125; \\</span><br><span class="line">    &amp; &amp; \ddots &amp; \vdots \\</span><br><span class="line">    &amp; &amp; &amp; a_&#123;nn&#125;</span><br><span class="line">\end&#123;pmatrix&#125;</span><br><span class="line">$</span><br><span class="line"></span><br><span class="line">% 连续省略号</span><br><span class="line">$</span><br><span class="line">\begin&#123;pmatrix&#125;</span><br><span class="line">    1 &amp; \frac 12 &amp; \frac 13 &amp; \dots &amp; \frac 1n \\</span><br><span class="line">    \vdots &amp; \hdotsfor&#123;3&#125; &amp; \vdots \\</span><br><span class="line">    m &amp; \frac m2 &amp; \frac m3 &amp; \dots &amp; \frac mn</span><br><span class="line">\end&#123;pmatrix&#125;</span><br><span class="line">$</span><br><span class="line"></span><br><span class="line">复数$ z = (x,y) $也可以使用矩阵</span><br><span class="line">$ z = \left( % 这里要单独加括号</span><br><span class="line">\begin&#123;smallmatrix&#125;</span><br><span class="line">    x &amp; -y \\ y &amp; x</span><br><span class="line">\end&#123;smallmatrix&#125;</span><br><span class="line">\right) $</span><br><span class="line"></span><br><span class="line">$</span><br><span class="line">\begin&#123;array&#125;&#123;r|r&#125;</span><br><span class="line">    \frac12 &amp; 0 \\</span><br><span class="line">    \hline</span><br><span class="line">    0 &amp; -\frac abc \\</span><br><span class="line">\end&#123;array&#125;</span><br><span class="line">$</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex45.png"></p>
<blockquote>
<p>常用省略号：</p>
<ul>
<li><code>\dots</code>、<code>\cdots</code>：水平省略号</li>
<li><code>\vdots</code>：垂直省略号</li>
<li><code>\ddots</code>：右斜省略号</li>
</ul>
</blockquote>
<h3 id="2-10-多行公式"><a href="#2-10-多行公式" class="headerlink" title="2.10 多行公式"></a>2.10 多行公式</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;ctexart&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;ctex&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;amsmath&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;amssymb&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;多行公式&#125;</span><br><span class="line">我们一般通过 <span class="keyword">\textbackslash</span> <span class="keyword">\textbackslash</span> 来实现换行，</span><br><span class="line"></span><br><span class="line">通过<span class="keyword">\&amp;</span>实现对齐，</span><br><span class="line"></span><br><span class="line">所有环境共用编号。</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;编号环境 gather&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;gather&#125;</span><br><span class="line">    a + b = b + a <span class="keyword">\\</span></span><br><span class="line">    ab ba</span><br><span class="line"><span class="keyword">\end</span>&#123;gather&#125;</span><br><span class="line">在某个公式后加 <span class="keyword">\textbackslash</span> notag 可取消编号，如：</span><br><span class="line"><span class="keyword">\begin</span>&#123;gather&#125;</span><br><span class="line">    3<span class="built_in">^</span>2 + 4<span class="built_in">^</span>2 = 5 <span class="built_in">^</span>2 <span class="keyword">\notag</span> <span class="keyword">\\</span></span><br><span class="line">    a = b + c</span><br><span class="line"><span class="keyword">\end</span>&#123;gather&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;不编号环境 gather*&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;gather*&#125;</span><br><span class="line">    3+5=5+3=8 <span class="keyword">\\</span></span><br><span class="line">    3 <span class="keyword">\times</span> 5 = 5 * 3</span><br><span class="line"><span class="keyword">\end</span>&#123;gather*&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;编号对齐环境align&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;align&#125;</span><br><span class="line">    x <span class="built_in">&amp;</span>= t + <span class="keyword">\cos</span> t + 1 <span class="keyword">\\</span></span><br><span class="line">    y+1 <span class="built_in">&amp;</span>= 2 <span class="keyword">\sin</span> t</span><br><span class="line"><span class="keyword">\end</span>&#123;align&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;不编号对齐环境align*&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;align*&#125;</span><br><span class="line">    x <span class="built_in">&amp;</span>= t <span class="built_in">&amp;</span> x <span class="built_in">&amp;</span>= <span class="keyword">\cos</span> t <span class="built_in">&amp;</span> x <span class="built_in">&amp;</span>= t <span class="keyword">\\</span></span><br><span class="line">    y <span class="built_in">&amp;</span>= 2t <span class="built_in">&amp;</span> y <span class="built_in">&amp;</span>= <span class="keyword">\sin</span>(t+1) <span class="built_in">&amp;</span> y <span class="built_in">&amp;</span>= <span class="keyword">\sin</span> t</span><br><span class="line"><span class="keyword">\end</span>&#123;align*&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;连行公式split&#125;</span><br><span class="line">对齐采用align的方式，编号位于整个公式中间。注意，split还需要使用equation包起来才能奏效。在其后加 <span class="keyword">\textbackslash</span> notag 可取消编号。</span><br><span class="line"><span class="keyword">\begin</span>&#123;equation&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;split&#125;</span><br><span class="line">    <span class="keyword">\cos</span> 2x <span class="built_in">&amp;</span> = <span class="keyword">\cos</span><span class="built_in">^</span>2 x - sin<span class="built_in">^</span>2 x <span class="keyword">\\</span></span><br><span class="line">    <span class="built_in">&amp;</span> = 2 <span class="keyword">\cos</span><span class="built_in">^</span>2 x - 1</span><br><span class="line"><span class="keyword">\end</span>&#123;split&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;equation&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;大括号cases&#125;</span><br><span class="line">每行使用 <span class="keyword">\&amp;</span> 分割为两部分，通常用于表示值和条件。注意，cases还需要使用equation包起来才能奏效。在其后加 <span class="keyword">\textbackslash</span> notag 可取消编号。</span><br><span class="line"><span class="keyword">\begin</span>&#123;equation&#125;</span><br><span class="line">    D(x)=<span class="keyword">\begin</span>&#123;cases&#125;</span><br><span class="line">        1, <span class="built_in">&amp;</span> <span class="keyword">\text</span>&#123;当&#125; x <span class="keyword">\in</span> <span class="keyword">\mathbb</span>&#123;Q&#125;;<span class="keyword">\\</span></span><br><span class="line">        0, <span class="built_in">&amp;</span> <span class="keyword">\text</span>&#123;当&#125; x <span class="keyword">\in</span> <span class="keyword">\mathbb</span>&#123;R&#125;.</span><br><span class="line">    <span class="keyword">\end</span>&#123;cases&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;equation&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex46.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex47.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex48.png"></p>
<h3 id="2-11-参考文献-BibTeX"><a href="#2-11-参考文献-BibTeX" class="headerlink" title="2.11 参考文献 BibTeX"></a>2.11 参考文献 BibTeX</h3><h4 id="直接写入展示"><a href="#直接写入展示" class="headerlink" title="直接写入展示"></a>直接写入展示</h4><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;ctexart&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;ctex&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line">此处引用一篇文章<span class="keyword">\cite</span>&#123;article1&#125;，此处引用一本书<span class="keyword">\cite</span>&#123;book1&#125;等等。</span><br><span class="line"><span class="comment">% 这里编译会不全，要编译两次</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;thebibliography&#125;&#123;99&#125;</span><br><span class="line">    <span class="keyword">\bibitem</span>&#123;article1&#125;陈力回,苏伟,陈晓云./emph&#123;基于LaTeX的Web数学公式提取方法研究&#125;[J].计算机科学. 2014(06)</span><br><span class="line">    <span class="keyword">\bibitem</span>&#123;book1&#125;William H. Press,Sual A. Teukolsky,William T. Vettering,Brian P. Flannery,<span class="keyword">\emph</span>&#123;Numerical Recipes 3rd Edition:The Art of Scientific Computing&#125;</span><br><span class="line">    Cambridge University Press, New York,2007.</span><br><span class="line">    <span class="keyword">\bibitem</span>&#123;book2&#125; Kopka Helmut, W. Daly Patrick,<span class="keyword">\emph</span>&#123;Guide to <span class="keyword">\LaTeX</span>&#125;,<span class="built_in">$</span> 4<span class="built_in">^</span>&#123;th&#125; <span class="built_in">$</span> Edition.</span><br><span class="line">    Available at <span class="keyword">\texttt</span>&#123;http://www.amazon.com&#125;.</span><br><span class="line">    <span class="keyword">\bibitem</span>&#123;book3&#125; Graetzer George, <span class="keyword">\emph</span>&#123;Math Into <span class="keyword">\LaTeX</span>&#125;,BrikhAouser Boston; 3 edition (June 22,2000).</span><br><span class="line">    </span><br><span class="line"><span class="keyword">\end</span>&#123;thebibliography&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex49.png"></p>
<h4 id="单独文件管理"><a href="#单独文件管理" class="headerlink" title="单独文件管理"></a>单独文件管理</h4><p><code>test.bib</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@BOOK&#123;mittelbach2004,</span><br><span class="line">title = &#123;The &#123;&#123;\Latex&#125;&#125; Companion&#125;,</span><br><span class="line">publisher = &#123;Addison-Wesley&#125;,</span><br><span class="line">year = &#123;2004&#125;,</span><br><span class="line">author = &#123;Frank Mittelbach and Michel Goossens&#125;,</span><br><span class="line">series = &#123;Tools and Techniques for  Computer Typesetting&#125;,</span><br><span class="line">address = &#123;Boston&#125;,</span><br><span class="line">edition = &#123;Second&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex50.png"></p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;ctexart&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;ctex&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\bibliographystyle</span>&#123;plain&#125; <span class="comment">% plain unsrt alpha abbrv</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"></span><br><span class="line">这里我们引用<span class="keyword">\cite</span>&#123;mittelbach2004&#125;。</span><br><span class="line"></span><br><span class="line"><span class="keyword">\nocite</span>&#123;*&#125; <span class="comment">% 表示把单独文件中所有的文献都列出来</span></span><br><span class="line"><span class="keyword">\bibliography</span>&#123;bib/test&#125; <span class="comment">%可以写多个bib文件在这里面，逗号分开</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>未能完成，自行学习。</p>
</blockquote>
<h4 id="参考文献-BibLaTeX"><a href="#参考文献-BibLaTeX" class="headerlink" title="参考文献 BibLaTeX"></a>参考文献 BibLaTeX</h4><ul>
<li><p>也是一种编译写入参考文献的排版引擎。</p>
</li>
<li><p>需要更改文献工具</p>
<p><code>BibTeX</code> – &gt; <code>Biber</code></p>
</li>
</ul>
<h3 id="2-12-自定义命令、环境"><a href="#2-12-自定义命令、环境" class="headerlink" title="2.12 自定义命令、环境"></a>2.12 自定义命令、环境</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;ctexart&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;ctex&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">% 文本</span></span><br><span class="line"><span class="keyword">\newcommand</span>&#123;<span class="keyword">\PRC</span>&#125;&#123;People&#x27;s Republic of <span class="keyword">\emph</span>&#123;China&#125;&#125;</span><br><span class="line"><span class="comment">% 含参数</span></span><br><span class="line"><span class="keyword">\newcommand</span>&#123;<span class="keyword">\love</span>&#125;[2]&#123;<span class="params">#1</span> 喜欢 <span class="params">#2</span>&#125;</span><br><span class="line"><span class="keyword">\newcommand</span>&#123;<span class="keyword">\hate</span>&#125;[2]&#123;<span class="params">#2</span> 不喜欢 <span class="params">#1</span>&#125;</span><br><span class="line"><span class="comment">% 含默认参数</span></span><br><span class="line"><span class="keyword">\newcommand</span>&#123;<span class="keyword">\loves</span>&#125;[3][喜欢]&#123;<span class="params">#2</span><span class="params">#1</span><span class="params">#3</span>&#125;</span><br><span class="line"><span class="comment">% 定义环境</span></span><br><span class="line"><span class="keyword">\newenvironment</span>&#123;Quotation&#125;[1]</span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">\newcommand</span>&#123;<span class="keyword">\quotesource</span>&#125;&#123;<span class="params">#1</span>&#125;</span><br><span class="line">    <span class="keyword">\begin</span>&#123;quotation&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">\par</span><span class="keyword">\hfil</span>---《<span class="keyword">\textit</span>&#123;<span class="keyword">\quotesource</span>》&#125;</span><br><span class="line">    <span class="keyword">\end</span>&#123;quotation&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;我的摘要&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\PRC</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\love</span>&#123;猫儿&#125;&#123;鱼&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\hate</span>&#123;猫儿&#125;&#123;鱼&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\loves</span>&#123;猫儿&#125;&#123;鱼&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\loves</span>[爱]&#123;猫儿&#125;&#123;鱼&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;Quotation&#125;&#123;易经&#125;</span><br><span class="line">    初九，潜龙勿用。</span><br><span class="line"><span class="keyword">\end</span>&#123;Quotation&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex51.png"></p>
]]></content>
      <categories>
        <category>通用知识</category>
      </categories>
      <tags>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>《Django》入门 Notes（中）</title>
    <url>/butterflyblog/2023/06/02/%E3%80%8ADjango%E3%80%8B%E5%85%A5%E9%97%A8%20Notes%EF%BC%88%E4%B8%AD%EF%BC%89/</url>
    <content><![CDATA[<h1 id="《Django》入门-Notes（中）"><a href="#《Django》入门-Notes（中）" class="headerlink" title="《Django》入门 Notes（中）"></a>《Django》入门 Notes（中）</h1><p>@Seymour0314 来源官方文档<code>https://docs.djangoproject.com/zh-hans/4.2/intro/</code></p>
<blockquote>
<p>本文是Django 后端技术初级入门教程。</p>
<p>编程语言：Python</p>
</blockquote>
<h2 id="第-3-部分"><a href="#第-3-部分" class="headerlink" title="第 3 部分"></a>第 3 部分</h2><blockquote>
<p>本教程从 教程2结束的地方开始。我们将继续开发网络投票应用程序，并将着重于创建公共接口——“视图”。</p>
</blockquote>
<h3 id="3-1-概况"><a href="#3-1-概况" class="headerlink" title="3.1 概况"></a>3.1 概况</h3><ul>
<li><p>Django 中的视图的概念是「<strong>一类具有相同功能和模板的网页的集合</strong>」。</p>
<blockquote>
<p>比如，在一个博客应用中，你可能会创建如下几个视图：</p>
<ul>
<li>博客首页——展示最近的几项内容。</li>
<li>内容“详情”页——详细展示某项内容。</li>
<li>以年为单位的归档页——展示选中的年份里各个月份创建的内容。</li>
<li>以月为单位的归档页——展示选中的月份里各天创建的内容。</li>
<li>以天为单位的归档页——展示选中天里创建的所有内容。</li>
<li>评论处理器——用于响应为一项内容添加评论的操作。</li>
</ul>
<p>而在我们的投票应用中，我们需要下列几个视图：</p>
<ul>
<li>问题索引页——展示最近的几个投票问题。</li>
<li>问题详情页——展示某个投票的问题和不带结果的选项列表。</li>
<li>问题结果页——展示某个投票的结果。</li>
<li>投票处理器——用于响应用户为某个问题的特定选项投票的操作。</li>
</ul>
</blockquote>
</li>
<li><p>在 Django 中，网页和其他内容都是从视图派生而来。</p>
<p>每一个视图表现为一个 Python 函数（或者说方法，如果是在基于类的视图里的话）。</p>
<p>Django 将会根据用户请求的 URL 来选择使用哪个视图（更准确的说，是根据 URL 中域名之后的部分）。</p>
<blockquote>
<p>在你上网的过程中，很可能看见过像这样美丽的 URL：</p>
<p><code>ME2/Sites/dirmod.htm?sid=&amp;type=gen&amp;mod=Core+Pages&amp;gid=A6CD4967199A42D9B65B1B</code></p>
<p>别担心，Django 里的 <em>URL 样式</em> 要比这优雅的多！</p>
</blockquote>
</li>
<li><p>URL 样式是 URL 的一般形式 </p>
<blockquote>
<p>例如：<code>/newsarchive/&lt;year&gt;/&lt;month&gt;/</code>。</p>
</blockquote>
</li>
<li><p>为了将 URL 和视图关联起来，Django 使用了 ‘URLconfs’ 来配置。</p>
<p>URLconf 将 URL 模式映射到视图。</p>
<blockquote>
<p>本教程只会介绍 URLconf 的基础内容，你可以看看 <a href="https://docs.djangoproject.com/zh-hans/4.2/topics/http/urls/">URL调度器</a> 以获取更多内容。</p>
</blockquote>
</li>
</ul>
<h3 id="3-2-编写更多视图"><a href="#3-2-编写更多视图" class="headerlink" title="3.2 编写更多视图"></a>3.2 编写更多视图</h3><ul>
<li><p>现在让我们向 <code>polls/views.py</code> 里添加更多视图。</p>
<p>这些视图有一些不同，因为他们接收参数：</p>
<p><code>polls/views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">detail</span>(<span class="params">request, question_id</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;You&#x27;re looking at question %s.&quot;</span> % question_id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">results</span>(<span class="params">request, question_id</span>):</span><br><span class="line">    response = <span class="string">&quot;You&#x27;re looking at the results of question %s.&quot;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(response % question_id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vote</span>(<span class="params">request, question_id</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;You&#x27;re voting on question %s.&quot;</span> % question_id)</span><br></pre></td></tr></table></figure>
</li>
<li><p>把这些新视图添加进 <code>polls.urls</code> 模块里，</p>
<p>只要添加几个 <code>url()</code> 函数调用就行：</p>
<p><code>polls/urls.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># ex: /polls/</span></span><br><span class="line">    path(<span class="string">&quot;&quot;</span>, views.index, name=<span class="string">&quot;index&quot;</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/</span></span><br><span class="line">    path(<span class="string">&quot;&lt;int:question_id&gt;/&quot;</span>, views.detail, name=<span class="string">&quot;detail&quot;</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/results/</span></span><br><span class="line">    path(<span class="string">&quot;&lt;int:question_id&gt;/results/&quot;</span>, views.results, name=<span class="string">&quot;results&quot;</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/vote/</span></span><br><span class="line">    path(<span class="string">&quot;&lt;int:question_id&gt;/vote/&quot;</span>, views.vote, name=<span class="string">&quot;vote&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看效果</p>
<p>然后看看你的浏览器，如果你转到 “&#x2F;polls&#x2F;34&#x2F;“ ，Django 将会运行 <code>detail()</code> 方法并且展示你在 URL 里提供的问题 ID。</p>
<p>再试试 “&#x2F;polls&#x2F;34&#x2F;vote&#x2F;“ 和 “&#x2F;polls&#x2F;34&#x2F;vote&#x2F;“ ——你将会看到暂时用于占位的结果和投票页。</p>
<blockquote>
<p>记得先开服务器运行<code>py manage.py runserver</code></p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511195955371.png" alt="image-20230511195955371" style="zoom:67%;" /> 

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511200013525.png" alt="image-20230511200013525" style="zoom: 67%;" /> 

<blockquote>
<ul>
<li><p>问题 <code>question_id=34</code> 来自 <code>&lt;int:question_id&gt;</code>。</p>
<p>使用尖括号 “获得” 网址部分后发送给视图函数作为一个关键字参数。</p>
</li>
<li><p>字符串的 <code>question_id</code> 部分定义了要使用的名字，用来识别相匹配的模式，</p>
<p>而 <code>int</code> 部分是一种转换形式，用来确定应该匹配网址路径的什么模式。</p>
<p>冒号 (<code>:</code>) 用来分隔转换形式和模式名。</p>
</li>
</ul>
</blockquote>
</blockquote>
</li>
</ul>
<h3 id="3-3-写一个真正有用的视图"><a href="#3-3-写一个真正有用的视图" class="headerlink" title="3.3 写一个真正有用的视图"></a>3.3 写一个真正有用的视图</h3><blockquote>
<ul>
<li><p>每个视图必须要做的只有两件事：</p>
<ul>
<li>返回一个包含被请求页面内容的 <code>HttpResponse</code> 对象，</li>
<li>或者抛出一个异常，比如 <code>Http404</code>。</li>
</ul>
<p>至于你还想干些什么，随便你。</p>
</li>
<li><p>你的视图</p>
<ul>
<li><p>可以从数据库里读取记录</p>
</li>
<li><p>可以使用一个模板引擎（比如 Django 自带的，或者其他第三方的）</p>
</li>
<li><p>可以生成一个 PDF 文件</p>
</li>
<li><p>可以输出一个 XML</p>
</li>
<li><p>创建一个 ZIP 文件</p>
</li>
</ul>
<p>你可以做任何你想做的事，使用任何你想用的 Python 库。</p>
</li>
</ul>
</blockquote>
<ul>
<li><p>Django 只要求返回的是一个 <code>HttpResponse</code> ，或者抛出一个异常。</p>
<blockquote>
<p>因为 Django 自带的数据库 API 很方便，我们曾在 教程第 2 部分中学过，所以我们试试在视图里使用它。</p>
</blockquote>
</li>
<li><p>我们在 <code>index()</code> 函数里插入了一些新内容，</p>
<p>让它能展示数据库里以发布日期排序的最近 5 个投票问题，以空格分割：</p>
<p><code>polls/views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    latest_question_list = Question.objects.order_by(<span class="string">&quot;-pub_date&quot;</span>)[:<span class="number">5</span>]</span><br><span class="line">    output = <span class="string">&quot;, &quot;</span>.join([q.question_text <span class="keyword">for</span> q <span class="keyword">in</span> latest_question_list])</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(output)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Leave the rest of the views (detail, results, vote) unchanged</span></span><br></pre></td></tr></table></figure>

<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511205742413.png" alt="image-20230511205742413" style="zoom:80%;" /> 

<p>这里有个问题：页面的设计写死在视图函数的代码里的。</p>
<p>如果你想改变页面的样子，你需要编辑 Python 代码。</p>
<p>所以让我们使用 Django 的模板系统，只要创建一个视图，就可以将页面的设计从代码中分离出来。</p>
</blockquote>
</li>
<li><p>首先，在你的 <code>polls</code> 目录里创建一个 <code>templates</code> 目录。</p>
<p>Django 将会在这个目录里查找模板文件。</p>
<blockquote>
<ul>
<li><p>你项目的 <code>TEMPLATES</code> 配置项描述了 Django 如何载入和渲染模板。</p>
</li>
<li><p>默认的设置文件设置了 <code>DjangoTemplates</code> 后端，并将 <code>APP_DIRS</code> 设置成了 True。</p>
<p>这一选项将会让 <code>DjangoTemplates</code> 在每个 <code>INSTALLED_APPS</code> 文件夹中寻找 “templates” 子目录。</p>
<p>这就是为什么尽管我们没有像在第二部分中那样修改 DIRS 设置，Django 也能正确找到 polls 的模板位置的原因。</p>
</li>
</ul>
</blockquote>
<p>在你刚刚创建的 <code>templates</code> 目录里，再创建一个目录 <code>polls</code>，然后在其中新建一个文件 <code>index.html</code> 。</p>
<p><code>polls/templates/polls/index.html</code></p>
<blockquote>
<p>换句话说，你的模板文件的路径应该是 <code>polls/templates/polls/index.html</code> 。</p>
<p>因为<code>app_directories</code> 模板加载器是通过上述描述的方法运行的，</p>
<p>所以 Django 可以引用到 <code>polls/index.html</code> 这一模板了。</p>
<blockquote>
<ul>
<li><p>模板命名空间</p>
<p>虽然我们现在可以将模板文件直接放在 <code>polls/templates</code> 文件夹中（而不是再建立一个 <code>polls</code> 子文件夹），但是这样做不太好。</p>
<p>Django 将会选择第一个匹配的模板文件，如果你有一个模板文件正好和另一个应用中的某个模板文件重名，Django 没有办法 <em>区分</em> 它们。</p>
<p>我们需要帮助 Django 选择正确的模板，最好的方法就是把他们放入各自的 <em>命名空间</em> 中，也就是把这些模板放入一个和 <em>自身</em> 应用重名的子文件夹里。</p>
</li>
</ul>
</blockquote>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if latest_question_list %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for question in latest_question_list %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/polls/&#123;&#123; question.id &#125;&#125;/&quot;</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>No polls are available.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>备注</p>
<p>为了让教程看起来不那么长，所有的模板文件都只写出了核心代码。</p>
<p>在你自己创建的项目中，你应该使用 完整的 HTML 文档 。</p>
<blockquote>
<p>本次的完整HTML：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>POLLS<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Polls:<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% if latest_question_list %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for question in latest_question_list %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/polls/&#123;&#123; question.id &#125;&#125;/&quot;</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>No polls are available.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote>
</li>
</ul>
</li>
<li><p>然后，让我们更新一下 <code>polls/views.py</code> 里的 <code>index</code> 视图来使用模板：</p>
<p><code>polls/views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> loader</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    latest_question_list = Question.objects.order_by(<span class="string">&quot;-pub_date&quot;</span>)[:<span class="number">5</span>]</span><br><span class="line">    template = loader.get_template(<span class="string">&quot;polls/index.html&quot;</span>)</span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">&quot;latest_question_list&quot;</span>: latest_question_list,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(template.render(context, request))</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><p>上述代码的作用是，载入 <code>polls/index.html</code> 模板文件，并且向它传递一个上下文(context)。这个上下文是一个字典，它将模板内的变量映射为 Python 对象。</p>
</li>
<li><p>用你的浏览器访问 “&#x2F;polls&#x2F;“ ，你将会看见一个无序列表，列出了我们在 <a href="https://docs.djangoproject.com/zh-hans/4.2/intro/tutorial02/">教程第 2 部分</a> 中添加的 “What’s up” 投票问题，链接指向这个投票的详情页。</p>
</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511205932031.png" alt="image-20230511205932031" style="zoom:80%;" /></blockquote>
</li>
</ul>
<h4 id="一个快捷函数：-render"><a href="#一个快捷函数：-render" class="headerlink" title="一个快捷函数： render()"></a>一个快捷函数： <code>render()</code></h4><ul>
<li><p>「<strong>载入模板，填充上下文，再返回由它生成的 <code>HttpResponse</code>对象</strong>」</p>
<p>是一个非常常用的操作流程。</p>
</li>
<li><p>于是 Django 提供了一个快捷函数，</p>
<p>我们用它来重写 <code>index()</code> 视图：</p>
<p><code>polls/views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    latest_question_list = Question.objects.order_by(<span class="string">&quot;-pub_date&quot;</span>)[:<span class="number">5</span>]</span><br><span class="line">    context = &#123;<span class="string">&quot;latest_question_list&quot;</span>: latest_question_list&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;polls/index.html&quot;</span>, context)</span><br></pre></td></tr></table></figure>

<p>注意到，我们不再需要导入 <a href="https://docs.djangoproject.com/zh-hans/4.2/topics/templates/#module-django.template.loader"><code>loader</code></a> 和 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/request-response/#django.http.HttpResponse"><code>HttpResponse</code></a> 。</p>
<p>不过如果你还有其他函数（比如说 <code>detail</code>, <code>results</code>, 和 <code>vote</code> ）需要用到它的话，</p>
<p>就需要保持 <code>HttpResponse</code> 的导入。</p>
</li>
</ul>
<h3 id="3-4-抛出-404-错误"><a href="#3-4-抛出-404-错误" class="headerlink" title="3.4 抛出 404 错误"></a>3.4 抛出 404 错误</h3><ul>
<li><p>现在，我们来处理投票详情视图——它会显示指定投票的问题标题。下面是这个视图的代码：</p>
<p><code>polls/views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> Http404</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detail</span>(<span class="params">request, question_id</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        question = Question.objects.get(pk=question_id)</span><br><span class="line">    <span class="keyword">except</span> Question.DoesNotExist:</span><br><span class="line">        <span class="keyword">raise</span> Http404(<span class="string">&quot;Question does not exist&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;polls/detail.html&quot;</span>, &#123;<span class="string">&quot;question&quot;</span>: question&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>这里有个新原则。</p>
<p>如果指定问题 ID 所对应的问题不存在，这个视图就会抛出一个 <code>Http404</code> 异常。</p>
<blockquote>
<p>我们稍后再讨论你需要在 <code>polls/detail.html</code> 里输入什么，</p>
<p>但是如果你想试试上面这段代码是否正常工作的话，</p>
<p>你可以暂时把下面这段输进去：</p>
<p><code>polls/templates/polls/details.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>POLLS<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Polls:<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;&#123; question &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511211221223.png" alt="image-20230511211221223" style="zoom:67%;" /> 

<p>这样你就能测试了。</p>
<p>比如，测试<code>127.0.0.1:8000/polls/34/details/</code></p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511211519781.png" alt="image-20230511211519781" style="zoom:67%;" /></blockquote>
</li>
</ul>
<h4 id="一个快捷函数：-get-object-or-404"><a href="#一个快捷函数：-get-object-or-404" class="headerlink" title="一个快捷函数： get_object_or_404()"></a>一个快捷函数： <code>get_object_or_404()</code></h4><ul>
<li><p>尝试用 <code>get()</code>函数获取一个对象，如果不存在就抛出 <code>Http404</code>错误也是一个普遍的流程。</p>
<p>Django 也提供了一个快捷函数，下面是修改后的详情 <code>detail()</code> 视图代码：</p>
<p><code>polls/views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detail</span>(<span class="params">request, question_id</span>):</span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;polls/detail.html&quot;</span>, &#123;<span class="string">&quot;question&quot;</span>: question&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511212237975.png" alt="image-20230511212237975" style="zoom: 67%;" /> 
</blockquote>
<blockquote>
<p>设计哲学</p>
<ul>
<li><p>为什么我们使用辅助函数 <code>get_object_or_404()</code>而不是自己捕获 <code>ObjectDoesNotExist</code> 异常呢？</p>
<p>还有，为什么模型 API 不直接抛出 <code>ObjectDoesNotExist</code>而是抛出 <code>Http404</code>呢？</p>
</li>
<li><p>因为这样做会增加模型层和视图层的耦合性。</p>
<p>指导 Django 设计的最重要的思想之一就是要保证松散耦合。</p>
<p>一些受控的耦合将会被包含在 <code>django.shortcuts</code> 模块中。</p>
</li>
</ul>
</blockquote>
</li>
<li><p>也有 <code>get_list_or_404()</code>函数，</p>
<p>工作原理和 <code>get_object_or_404()</code> 一样，除了 <code>get()</code> 函数被换成了 <code>filter()</code> 函数。</p>
<p>如果列表为空的话会抛出 <code>Http404</code>异常。</p>
</li>
</ul>
<h3 id="3-5-使用模板系统"><a href="#3-5-使用模板系统" class="headerlink" title="3.5 使用模板系统"></a>3.5 使用模板系统</h3><ul>
<li><p>回过头去看看我们的 <code>detail()</code> 视图。它向模板传递了上下文变量 <code>question</code> 。</p>
<p>下面是 <code>polls/detail.html</code> 模板里正式的代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% for choice in question.choice_set.all %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; choice.choice_text &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>模板系统统一使用点符号来访问变量的属性。</p>
<blockquote>
<p>在示例 <code>&#123;&#123; question.question_text &#125;&#125;</code> 中，</p>
<ul>
<li><p>首先 Django 尝试对 <code>question</code> 对象使用字典查找（也就是使用 obj.get(str) 操作），</p>
</li>
<li><p>如果失败了就尝试属性查找（也就是 obj.str 操作），结果是成功了。</p>
</li>
<li><p>如果这一操作也失败的话，将会尝试列表查找（也就是 obj[int] 操作）。</p>
</li>
</ul>
</blockquote>
</li>
<li><p>在 <code>&#123;% for %&#125;</code>循环中发生的函数调用：</p>
<p><code>question.choice_set.all</code> 被解释为 Python 代码 <code>question.choice_set.all()</code> ，</p>
<p>将会返回一个可迭代的 <code>Choice</code> 对象，这一对象可以在 <code>&#123;% for %&#125;</code> 标签内部使用。</p>
<blockquote>
<p>查看 <a href="https://docs.djangoproject.com/zh-hans/4.2/topics/templates/">模板指南</a> 可以了解关于模板的更多信息。</p>
</blockquote>
</li>
</ul>
<h3 id="3-6-去除模板中的硬编码-URL"><a href="#3-6-去除模板中的硬编码-URL" class="headerlink" title="3.6 去除模板中的硬编码 URL"></a>3.6 去除模板中的硬编码 URL</h3><ul>
<li><p>还记得吗，我们在 <code>polls/index.html</code> 里编写投票链接时，链接是硬编码的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/polls/&#123;&#123; question.id &#125;&#125;/&quot;</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>问题在于，硬编码和强耦合的链接，对于一个包含很多应用的项目来说，修改起来是十分困难的。</p>
</li>
<li><p>然而，因为你在 <code>polls.urls</code> 的 <code>url()</code> 函数中通过 name 参数为 URL 定义了名字，</p>
<p>你可以使用 <code>&#123;% url %&#125;</code> 标签代替它：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;detail&#x27; question.id %&#125;&quot;</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个标签的工作方式是在 <code>polls.urls</code> 模块的 URL 定义中寻具有指定名字的条目。</p>
<p>你可以回忆一下，具有名字 ‘detail’ 的 URL 是在如下语句中定义的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment"># the &#x27;name&#x27; value as called by the &#123;% url %&#125; template tag</span></span><br><span class="line">path(<span class="string">&quot;&lt;int:question_id&gt;/&quot;</span>, views.detail, name=<span class="string">&quot;detail&quot;</span>),</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>如果你想改变投票详情视图的 URL，比如想改成 <code>polls/specifics/12/</code> ，</p>
<p>你不用在模板里修改任何东西（包括其它模板），</p>
<p>只要在 <code>polls/urls.py</code> 里稍微修改一下就行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment"># added the word &#x27;specifics&#x27;</span></span><br><span class="line">path(<span class="string">&quot;specifics/&lt;int:question_id&gt;/&quot;</span>, views.detail, name=<span class="string">&quot;detail&quot;</span>),</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-7-为-URL-名称添加命名空间"><a href="#3-7-为-URL-名称添加命名空间" class="headerlink" title="3.7 为 URL 名称添加命名空间"></a>3.7 为 URL 名称添加命名空间</h3><ul>
<li><p>教程项目只有一个应用，<code>polls</code> 。在一个真实的 Django 项目中，可能会有五个，十个，二十个，甚至更多应用。Django 如何分辨重名的 URL 呢？</p>
<p>举个例子，<code>polls</code> 应用有 <code>detail</code> 视图，可能另一个博客应用也有同名的视图。</p>
<p>Django 如何知道 <code>&#123;% url %&#125;</code> 标签到底对应哪一个应用的 URL 呢？</p>
</li>
<li><p>答案是：在根 URLconf 中添加命名空间。在 <code>polls/urls.py</code> 文件中稍作修改，加上 <code>app_name</code> 设置命名空间：</p>
<p><code>polls/urls.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">app_name = <span class="string">&quot;polls&quot;</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;&quot;</span>, views.index, name=<span class="string">&quot;index&quot;</span>),</span><br><span class="line">    path(<span class="string">&quot;&lt;int:question_id&gt;/&quot;</span>, views.detail, name=<span class="string">&quot;detail&quot;</span>),</span><br><span class="line">    path(<span class="string">&quot;&lt;int:question_id&gt;/results/&quot;</span>, views.results, name=<span class="string">&quot;results&quot;</span>),</span><br><span class="line">    path(<span class="string">&quot;&lt;int:question_id&gt;/vote/&quot;</span>, views.vote, name=<span class="string">&quot;vote&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>现在，编辑 <code>polls/index.html</code> 文件，从：</p>
<p><code>polls/templates/polls/index.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;detail&#x27; question.id %&#125;&quot;</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改为指向具有命名空间的详细视图：</p>
<p><code>polls/templates/polls/index.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;polls:detail&#x27; question.id %&#125;&quot;</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511214221490.png" alt="image-20230511214221490" style="zoom:80%;" /> 

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511214234075.png" alt="image-20230511214234075" style="zoom:80%;" /> 

<p>当你对你写的视图感到满意后，请阅读 教程的第 4 部分了解基础的表单处理和通用视图。</p>
</blockquote>
<h2 id="第-4-部分"><a href="#第-4-部分" class="headerlink" title="第 4 部分"></a>第 4 部分</h2><blockquote>
<p>本教程从 教程第 3 部分 结束的地方开始。我们将继续网络投票的应用，并将重点放在表单处理和精简我们的代码上。</p>
</blockquote>
<h3 id="4-1-编写一个简单的表单"><a href="#4-1-编写一个简单的表单" class="headerlink" title="4.1 编写一个简单的表单"></a>4.1 编写一个简单的表单</h3><ul>
<li><p>让我们更新一下在上一个教程中编写的投票详细页面的模板 (“polls&#x2F;detail.html”) ，</p>
<p>让它包含一个 HTML <code>&lt;form&gt;</code> 元素：</p>
<p><code>polls/templates/polls/detail.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&#123;% url &#x27;polls:vote&#x27; question.id %&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">&#123;% csrf_token %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">legend</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">    &#123;% if error_message %&#125;<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; error_message &#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#123;% endif %&#125;</span><br><span class="line">    &#123;% for choice in question.choice_set.all %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;choice&quot;</span> <span class="attr">id</span>=<span class="string">&quot;choice&#123;&#123; forloop.counter &#125;&#125;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; choice.id &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;choice&#123;&#123; forloop.counter &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; choice.choice_text &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Vote&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>简要说明：</p>
<ul>
<li><p>上面的模板在 Question 的每个 Choice 前添加一个单选按钮。</p>
<blockquote>
<p>每个单选按钮的 <code>value</code> 属性是对应的各个 Choice 的 ID。每个单选按钮的 <code>name</code> 是 <code>&quot;choice&quot;</code> 。这意味着，当有人选择一个单选按钮并提交表单提交时，它将发送一个 POST 数据 <code>choice=#</code> ，其中# 为选择的 Choice 的 ID。这是 HTML 表单的基本概念。</p>
</blockquote>
</li>
<li><p>我们将表单的 <code>action</code> 设置为 <code>&#123;% url 'polls:vote' question.id %&#125;</code>，并设置 <code>method=&quot;post&quot;</code>。</p>
<blockquote>
<p>使用 <code>method=&quot;post&quot;</code> （而不是 <code>method=&quot;get&quot;</code> ）是非常重要的，因为提交这个表单的行为将改变服务器端的数据。当你创建一个改变服务器端数据的表单时，使用 <code>method=&quot;post&quot;</code>。</p>
<p>这不是 Django 的特定技巧；这是优秀的网站开发技巧。</p>
</blockquote>
</li>
<li><p><code>forloop.counter</code> 指示 <code>for</code>标签已经循环多少次。</p>
</li>
<li><p>由于我们创建一个 POST 表单（它具有修改数据的作用），所以我们需要小心跨站点请求伪造。 </p>
<blockquote>
<p>谢天谢地，你不必太过担心，因为 Django 自带了一个非常有用的防御系统。 </p>
<p>简而言之，所有针对内部 URL 的 POST 表单都应该使用 <code>&#123;% csrf_token %&#125;</code> 模板标签。</p>
</blockquote>
</li>
</ul>
</blockquote>
</li>
<li><p>现在，让我们来创建一个 Django 视图来处理提交的数据。</p>
<p>记住，在 教程第 3 部分中，我们为投票应用创建了一个 URLconf ，包含这一行：</p>
<p><code>polls/urls.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path(<span class="string">&quot;&lt;int:question_id&gt;/vote/&quot;</span>, views.vote, name=<span class="string">&quot;vote&quot;</span>),</span><br></pre></td></tr></table></figure>
</li>
<li><p>我们还创建了一个 <code>vote()</code> 函数的虚拟实现。</p>
<p>让我们来创建一个真实的版本。 将下面的代码添加到 <code>polls/views.py</code> ：</p>
<p><code>polls/views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Choice, Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vote</span>(<span class="params">request, question_id</span>):</span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        selected_choice = question.choice_set.get(pk=request.POST[<span class="string">&quot;choice&quot;</span>])</span><br><span class="line">    <span class="keyword">except</span> (KeyError, Choice.DoesNotExist):</span><br><span class="line">        <span class="comment"># Redisplay the question voting form.</span></span><br><span class="line">        <span class="keyword">return</span> render(</span><br><span class="line">            request,</span><br><span class="line">            <span class="string">&quot;polls/detail.html&quot;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;question&quot;</span>: question,</span><br><span class="line">                <span class="string">&quot;error_message&quot;</span>: <span class="string">&quot;You didn&#x27;t select a choice.&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        selected_choice.votes += <span class="number">1</span></span><br><span class="line">        selected_choice.save()</span><br><span class="line">        <span class="comment"># Always return an HttpResponseRedirect after successfully dealing</span></span><br><span class="line">        <span class="comment"># with POST data. This prevents data from being posted twice if a</span></span><br><span class="line">        <span class="comment"># user hits the Back button.</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">&quot;polls:results&quot;</span>, args=(question.<span class="built_in">id</span>,)))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>以上代码中有些内容还未在本教程中提到过：</p>
<ul>
<li><p><code>request.POST</code>是一个类字典对象，让你可以通过关键字的名字获取提交的数据。 </p>
<p>这个例子中， <code>request.POST[&#39;choice&#39;]</code> 以字符串形式返回选择的 Choice 的 ID。</p>
<p> <code>request.POST</code> 的值永远是字符串。</p>
<p>注意，Django 还以同样的方式提供 <code>request.GET</code> 用于访问 GET 数据 </p>
<p>但我们在代码中显式地使用 <code>request.POST</code>，以保证数据只能通过 POST 调用改动。</p>
</li>
<li><p>如果在 <code>request.POST[&#39;choice&#39;]</code> 数据中没有提供 <code>choice</code> ， POST 将引发一个 <code>KeyError</code> 。</p>
<p>上面的代码检查 <code>KeyError</code>，如果没有给出 <code>choice</code> 将重新显示 Question 表单和一个错误信息。</p>
</li>
<li><p>在增加 Choice 的得票数之后，代码返回一个 <code>HttpResponseRedirect</code>而不是常用的 <code>HttpResponse</code>。</p>
<p><code>HttpResponseRedirect</code>只接收一个参数：用户将要被<strong>重定向</strong>的 URL。</p>
<p>（请继续看下去，我们将会解释如何构造这个例子中的 URL）</p>
<blockquote>
<p>正如上面的 Python 注释指出的，在成功处理 POST 数据后，你应该总是返回一个 <code>HttpResponseRedirect</code>。</p>
<p>这不是 Django 的特殊要求，这是那些优秀网站在开发实践中形成的共识。</p>
</blockquote>
</li>
<li><p>在这个例子中，我们在 <code>HttpResponseRedirect</code>的构造函数中使用 <code>reverse()</code> 函数。</p>
<p>这个函数避免了我们在视图函数中硬编码 URL。它需要我们给出我们想要跳转的视图的名字和该视图所对应的 URL 模式中需要给该视图提供的参数。 </p>
<p>在本例中，使用在 教程第 3 部分中设定的 URLconf， <code>reverse()</code> 调用将返回一个这样的字符串：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;/polls/3/results/&quot;</span></span><br></pre></td></tr></table></figure>

<p>其中 <code>3</code> 是 <code>question.id</code> 的值。重定向的 URL 将调用 <code>&#39;results&#39;</code> 视图来显示最终的页面。</p>
<blockquote>
<p>正如在 教程第 3 部分 中提到的，<code>HttpRequest</code> 是一个 <code>HttpRequest</code> 对象。</p>
<p>更多关于 <code>HttpRequest</code> 对象的内容，请参见 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/request-response/">请求和响应的文档</a> 。</p>
</blockquote>
</li>
</ul>
</blockquote>
</li>
<li><p>当有人对 Question 进行投票后，</p>
<p> <code>vote()</code> 视图将请求重定向到 Question 的结果界面。</p>
<p>让我们来编写这个视图：</p>
<p><code>polls/views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">results</span>(<span class="params">request, question_id</span>):</span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;polls/results.html&quot;</span>, &#123;<span class="string">&quot;question&quot;</span>: question&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这和 教程第 3 部分 中的 <code>detail()</code> 视图几乎一模一样。唯一的不同是模板的名字。 我们将在稍后解决这个冗余问题。</p>
</blockquote>
</li>
<li><p>现在，创建一个 <code>polls/results.html</code> 模板：</p>
<p><code>polls/templates/polls/results.html</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;&#123;&#123; question.question_text &#125;&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&#123;% <span class="keyword">for</span> choice <span class="keyword">in</span> question.choice_set.<span class="built_in">all</span> %&#125;</span><br><span class="line">    &lt;li&gt;&#123;&#123; choice.choice_text &#125;&#125; -- &#123;&#123; choice.votes &#125;&#125; vote&#123;&#123; choice.votes|pluralize &#125;&#125;&lt;/li&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href=<span class="string">&quot;&#123;% url &#x27;polls:detail&#x27; question.id %&#125;&quot;</span>&gt;Vote again?&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>现在，在你的浏览器中访问 <code>/polls/1/</code> 然后为 Question 投票。</p>
<p>你应该看到一个投票结果页面，并且在你每次投票之后都会更新。 </p>
<p>如果你提交时没有选择任何 Choice，你应该看到错误信息。</p>
<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511221043107.png" alt="image-20230511221043107" style="zoom:67%;" /> 

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511221102738.png" alt="image-20230511221102738" style="zoom:67%;" /> 

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511221121194.png" alt="image-20230511221121194" style="zoom: 67%;" /> 
</blockquote>
<ul>
<li><p>备注</p>
<p>我们的 <code>vote()</code> 视图代码有一个小问题。</p>
<p>代码首先从数据库中获取了 <code>selected_choice</code> 对象，接着计算 <code>vote</code> 的新值，最后把值存回数据库。</p>
<p>如果网站有两个方可同时投票在 <em>同一时间</em> ，可能会导致问题。同样的值，42，会被 <code>votes</code> 返回。然后，对于两个用户，新值43计算完毕，并被保存，但是期望值是44。</p>
<blockquote>
<p>这个问题被称为 <em>竞争条件</em> 。如果你对此有兴趣，你可以阅读 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/models/expressions/#avoiding-race-conditions-using-f">使用 F() 避免竞争条件</a> 来学习如何解决这个问题。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="4-2-使用通用视图：代码还是少点好"><a href="#4-2-使用通用视图：代码还是少点好" class="headerlink" title="4.2 使用通用视图：代码还是少点好"></a>4.2 使用通用视图：代码还是少点好</h3><ul>
<li><p><code>detail()</code> （在 教程第 3 部分 中）和 <code>results()</code> 视图都很精简 </p>
<p>并且，像上面提到的那样，存在冗余问题。用来显示一个投票列表的 <code>index()</code> 视图（也在 教程第 3 部分中）和它们类似。</p>
</li>
<li><p>这些视图反映基本的网络开发中的一个常见情况：</p>
<p>根据 URL 中的参数从数据库中获取数据、载入模板文件然后返回渲染后的模板。 </p>
</li>
<li><p>由于这种情况特别常见，Django 提供一种快捷方式，叫做 <strong>“通用视图” 系统</strong>。</p>
<p>通用视图将常见的模式抽象化，可以使你在编写应用时甚至不需要编写Python代码。</p>
<p>让我们将我们的投票应用转换成使用通用视图系统，这样我们可以删除许多我们的代码。我们仅仅需要做以下几步来完成转换，我们将：</p>
<ol>
<li>转换 URLconf。</li>
<li>删除一些旧的、不再需要的视图。</li>
<li>基于 Django 的通用视图引入新的视图。</li>
</ol>
<p>请继续阅读来了解详细信息。</p>
<blockquote>
<p>为什么要重构代码？</p>
<p>一般来说，当编写一个 Django 应用时，你应该先评估一下通用视图是否可以解决你的问题，你应该在一开始使用它，而不是进行到一半时重构代码。本教程目前为止是有意将重点放在以“艰难的方式”编写视图，这是为将重点放在核心概念上。</p>
<p>就像在使用计算器之前你需要掌握基础数学一样。</p>
</blockquote>
</li>
</ul>
<h3 id="4-3-改良-URLconf"><a href="#4-3-改良-URLconf" class="headerlink" title="4.3 改良 URLconf"></a>4.3 改良 URLconf</h3><ul>
<li><p>首先，打开 <code>polls/urls.py</code> 这个 URLconf 并将它修改成：</p>
<p><code>polls/urls.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">app_name = <span class="string">&quot;polls&quot;</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;&quot;</span>, views.IndexView.as_view(), name=<span class="string">&quot;index&quot;</span>),</span><br><span class="line">    path(<span class="string">&quot;&lt;int:pk&gt;/&quot;</span>, views.DetailView.as_view(), name=<span class="string">&quot;detail&quot;</span>),</span><br><span class="line">    path(<span class="string">&quot;&lt;int:pk&gt;/results/&quot;</span>, views.ResultsView.as_view(), name=<span class="string">&quot;results&quot;</span>),</span><br><span class="line">    path(<span class="string">&quot;&lt;int:question_id&gt;/vote/&quot;</span>, views.vote, name=<span class="string">&quot;vote&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，第二个和第三个匹配准则中，路径字符串中匹配模式的名称已经由 <code>&lt;question_id&gt;</code> 改为 <code>&lt;pk&gt;</code>。</p>
</blockquote>
</li>
</ul>
<h3 id="4-4-改良视图"><a href="#4-4-改良视图" class="headerlink" title="4.4 改良视图"></a>4.4 改良视图</h3><ul>
<li><p>下一步，我们将删除旧的 <code>index</code>, <code>detail</code>, 和 <code>results</code> 视图，并用 Django 的通用视图代替。</p>
<p>打开 <code>polls/views.py</code> 文件，</p>
<blockquote>
<p>原来是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Choice, Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    latest_question_list = Question.objects.order_by(<span class="string">&quot;-pub_date&quot;</span>)[:<span class="number">5</span>]</span><br><span class="line">    context = &#123;<span class="string">&quot;latest_question_list&quot;</span>: latest_question_list&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;polls/index.html&quot;</span>, context)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detail</span>(<span class="params">request, question_id</span>):</span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;polls/detail.html&quot;</span>, &#123;<span class="string">&quot;question&quot;</span>: question&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">results</span>(<span class="params">request, question_id</span>):</span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;polls/results.html&quot;</span>, &#123;<span class="string">&quot;question&quot;</span>: question&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vote</span>(<span class="params">request, question_id</span>):</span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        selected_choice = question.choice_set.get(pk=request.POST[<span class="string">&quot;choice&quot;</span>])</span><br><span class="line">    <span class="keyword">except</span> (KeyError, Choice.DoesNotExist):</span><br><span class="line">        <span class="comment"># Redisplay the question voting form.</span></span><br><span class="line">        <span class="keyword">return</span> render(</span><br><span class="line">            request,</span><br><span class="line">            <span class="string">&quot;polls/detail.html&quot;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;question&quot;</span>: question,</span><br><span class="line">                <span class="string">&quot;error_message&quot;</span>: <span class="string">&quot;You didn&#x27;t select a choice.&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        selected_choice.votes += <span class="number">1</span></span><br><span class="line">        selected_choice.save()</span><br><span class="line">        <span class="comment"># Always return an HttpResponseRedirect after successfully dealing</span></span><br><span class="line">        <span class="comment"># with POST data. This prevents data from being posted twice if a</span></span><br><span class="line">        <span class="comment"># user hits the Back button.</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">&quot;polls:results&quot;</span>, args=(question.<span class="built_in">id</span>,)))</span><br></pre></td></tr></table></figure>
</blockquote>
<p>并将它修改成：</p>
<p><code>polls/views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> generic</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Choice, Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IndexView</span>(generic.ListView):</span><br><span class="line">    template_name = <span class="string">&quot;polls/index.html&quot;</span></span><br><span class="line">    context_object_name = <span class="string">&quot;latest_question_list&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_queryset</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Return the last five published questions.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> Question.objects.order_by(<span class="string">&quot;-pub_date&quot;</span>)[:<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DetailView</span>(generic.DetailView):</span><br><span class="line">    model = Question</span><br><span class="line">    template_name = <span class="string">&quot;polls/detail.html&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ResultsView</span>(generic.DetailView):</span><br><span class="line">    model = Question</span><br><span class="line">    template_name = <span class="string">&quot;polls/results.html&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vote</span>(<span class="params">request, question_id</span>):</span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        selected_choice = question.choice_set.get(pk=request.POST[<span class="string">&quot;choice&quot;</span>])</span><br><span class="line">    <span class="keyword">except</span> (KeyError, Choice.DoesNotExist):</span><br><span class="line">        <span class="comment"># Redisplay the question voting form.</span></span><br><span class="line">        <span class="keyword">return</span> render(</span><br><span class="line">            request,</span><br><span class="line">            <span class="string">&quot;polls/detail.html&quot;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;question&quot;</span>: question,</span><br><span class="line">                <span class="string">&quot;error_message&quot;</span>: <span class="string">&quot;You didn&#x27;t select a choice.&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        selected_choice.votes += <span class="number">1</span></span><br><span class="line">        selected_choice.save()</span><br><span class="line">        <span class="comment"># Always return an HttpResponseRedirect after successfully dealing</span></span><br><span class="line">        <span class="comment"># with POST data. This prevents data from being posted twice if a</span></span><br><span class="line">        <span class="comment"># user hits the Back button.</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">&quot;polls:results&quot;</span>, args=(question.<span class="built_in">id</span>,)))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们在这里使用两个通用视图： <code>ListView</code>和 <code>DetailView</code>。</p>
<p>这两个视图分别抽象“<strong>显示一个对象列表</strong>”和“<strong>显示一个特定类型对象的详细信息页面</strong>”这两种概念。</p>
<ul>
<li>每个通用视图需要知道它将作用于哪个模型。 这由 <code>model</code> 属性提供。</li>
<li><code>DetailView</code>期望从 URL 中捕获名为 <code>&quot;pk&quot;</code> 的主键值，所以我们为通用视图把 <code>question_id</code> 改成 <code>pk</code> 。</li>
</ul>
<p>默认情况下，通用视图 <code>DetailView</code>使用一个叫做 <code>&lt;app name&gt;/&lt;model name&gt;_detail.html</code> 的模板。</p>
<p>在我们的例子中，它将使用 <code>&quot;polls/question_detail.html&quot;</code> 模板。</p>
<ul>
<li><p><code>template_name</code> 属性是用来告诉 Django 使用一个指定的模板名字，而不是自动生成的默认名字。 </p>
<p>我们也为 <code>results</code> 列表视图指定了 <code>template_name</code> —— 这确保 results 视图和 detail 视图在渲染时具有不同的外观，即使它们在后台都是同一个 <code>DetailView</code>。</p>
</li>
</ul>
<p>类似地，<code>ListView</code>使用一个叫做 <code>&lt;app name&gt;/&lt;model name&gt;_list.html</code> 的默认模板；</p>
<ul>
<li>我们使用 <code>template_name</code> 来告诉 <code>ListView</code>使用我们创建的已经存在的 <code>&quot;polls/index.html&quot;</code> 模板。</li>
</ul>
</li>
<li><p>在之前的教程中，提供模板文件时都带有一个包含 <code>question</code> 和 <code>latest_question_list</code> 变量的 context。</p>
<p>对于 <code>DetailView</code> ， <code>question</code> 变量会自动提供—— 因为我们使用 Django 的模型（Question）， Django 能够为 context 变量决定一个合适的名字。</p>
<p>然而对于 ListView， 自动生成的 context 变量是 <code>question_list</code>。为了覆盖这个行为，我们提供 <code>context_object_name</code> 属性，表示我们想使用 <code>latest_question_list</code>。</p>
<p>作为一种替换方案，你可以改变你的模板来匹配新的 context 变量 —— 这是一种更便捷的方法，告诉 Django 使用你想使用的变量名。</p>
</li>
<li><p>启动服务器，使用一下基于通用视图的新投票应用。</p>
<blockquote>
<p>效果与前面一样。</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>更多关于通用视图的详细信息，请查看 <a href="https://docs.djangoproject.com/zh-hans/4.2/topics/class-based-views/">通用视图的文档</a></p>
<p>当你对你所写的表单和通用视图感到满意后，请阅读 <a href="https://docs.djangoproject.com/zh-hans/4.2/intro/tutorial05/">教程的第 5 部分</a> 来了解如何测试我们的投票应用。</p>
</blockquote>
<h2 id="第-5-部分"><a href="#第-5-部分" class="headerlink" title="第 5 部分"></a>第 5 部分</h2><blockquote>
<p>本教程从 教程第 4 部分结束的地方开始。我们已经建立了一个网络投票应用程序，现在我们将为它创建一些自动化测试。</p>
</blockquote>
<h3 id="5-1-自动化测试简介"><a href="#5-1-自动化测试简介" class="headerlink" title="5.1 自动化测试简介"></a>5.1 自动化测试简介</h3><h4 id="自动化测试是什么？"><a href="#自动化测试是什么？" class="headerlink" title="自动化测试是什么？"></a>自动化测试是什么？</h4><ul>
<li><p>测试代码，是用来检查你的代码能否正常运行的程序。</p>
</li>
<li><p>测试在不同的层次中都存在。有些测试只关注某个很小的细节（某个模型的某个方法的返回值是否满足预期？），而另一些测试可能检查对某个软件的一系列操作（<em>某一用户输入序列是否造成了预期的结果？</em>）。其实这和我们在 教程第 2 部分，里做的并没有什么不同，我们使用 <code>shell</code>来测试某一方法的功能，或者运行某个应用并输入数据来检查它的行为。</p>
</li>
<li><p>真正不同的地方在于，<em>自动化</em> 测试是由某个系统帮你自动完成的。当你创建好了一系列测试，每次修改应用代码后，就可以自动检查出修改后的代码是否还像你曾经预期的那样正常工作。你不需要花费大量时间来进行手动测试。</p>
</li>
</ul>
<h4 id="为什么你需要写测试"><a href="#为什么你需要写测试" class="headerlink" title="为什么你需要写测试"></a>为什么你需要写测试</h4><ul>
<li><p>但是，为什么需要测试呢？又为什么是现在呢？</p>
</li>
<li><p>你可能觉得学 Python&#x2F;Django 对你来说已经很满足了，再学一些新东西的话看起来有点负担过重并且没什么必要。毕竟，我们的投票应用看起来已经完美工作了。写一些自动测试并不能让它工作的更好。如果写一个投票应用是你想用 Django 完成的唯一工作，那你确实没必要学写测试。但是如果你还想写更复杂的项目，现在就是学习测试写法的最好时机了。</p>
</li>
<li><p>测试将节约你的时间</p>
<blockquote>
<p>在某种程度上，能够「判断出代码是否正常工作」的测试，就称得上是个令人满意的了。在更复杂的应用程序中，组件之间可能会有数十个复杂的交互。</p>
<p>对其中某一组件的改变，也有可能会造成意想不到的结果。判断「代码是否正常工作」意味着你需要用大量的数据来完整的测试全部代码的功能，以确保你的小修改没有对应用整体造成破坏——这太费时间了。</p>
<p>尤其是当你发现自动化测试能在几秒钟之内帮你完成这件事时，就更会觉得手动测试实在是太浪费时间了。当某人写出错误的代码时，自动化测试还能帮助你定位错误代码的位置。</p>
<p>有时候你会觉得，和富有创造性和生产力的业务代码比起来，编写枯燥的测试代码实在是太无聊了，特别是当你知道你的代码完全没有问题的时候。</p>
<p>然而，编写测试还是要比花费几个小时手动测试你的应用，或者为了找到某个小错误而胡乱翻看代码要有意义的多。</p>
</blockquote>
</li>
<li><p>测试不仅能发现错误，而且能预防错误</p>
<blockquote>
<p>「测试是开发的对立面」，这种思想是不对的。</p>
<p>如果没有测试，整个应用的行为意图会变得更加的不清晰。甚至当你在看自己写的代码时也是这样，有时候你需要仔细研读一段代码才能搞清楚它有什么用。</p>
<p>而测试的出现改变了这种情况。测试就好像是从内部仔细检查你的代码，当有些地方出错时，这些地方将会变得很显眼——<em>就算你自己没有意识到那里写错了</em>。</p>
</blockquote>
</li>
<li><p>测试使你的代码更有吸引力</p>
<blockquote>
<p>你也许遇到过这种情况：你编写了一个绝赞的软件，但是其他开发者看都不看它一眼，因为它缺少测试。没有测试的代码不值得信任。 Django 最初开发者之一的 Jacob Kaplan-Moss 说过：“项目规划时没有包含测试是不科学的。”</p>
<p>其他的开发者希望在正式使用你的代码前看到它通过了测试，这是你需要写测试的另一个重要原因。</p>
</blockquote>
</li>
<li><p>测试有利于团队协作</p>
<blockquote>
<p>前面的几点都是从单人开发的角度来说的。复杂的应用可能由团队维护。测试的存在保证了协作者不会不小心破坏了了你的代码（也保证你不会不小心弄坏他们的）。如果你想作为一个 Django 程序员谋生的话，你必须擅长编写测试！</p>
</blockquote>
</li>
</ul>
<h3 id="5-2-基础测试策略"><a href="#5-2-基础测试策略" class="headerlink" title="5.2 基础测试策略"></a>5.2 基础测试策略</h3><ul>
<li><p>有好几种不同的方法可以写测试。</p>
<p>一些开发者遵循 “<a href="https://en.wikipedia.org/wiki/Test-driven_development">测试驱动</a>“ 的开发原则，他们在写代码之前先写测试。这种方法看起来有点反直觉，但事实上，这和大多数人日常的做法是相吻合的。我们会先描述一个问题，然后写代码来解决它。「测试驱动」的开发方法只是将问题的描述抽象为了 Python 的测试样例。</p>
</li>
<li><p>更普遍的情况是，一个刚接触自动化测试的新手更倾向于先写代码，然后再写测试。虽然提前写测试可能更好，但是晚点写起码也比没有强。</p>
<p>有时候很难决定从哪里开始下手写测试。如果你才写了几千行 Python 代码，选择从哪里开始写测试确实不怎么简单。如果是这种情况，那么在你下次修改代码（比如加新功能，或者修复 Bug）之前写个测试是比较合理且有效的。</p>
</li>
<li><p>所以，我们现在就开始写吧。</p>
</li>
</ul>
<h3 id="5-3-开始写我们的第一个测试"><a href="#5-3-开始写我们的第一个测试" class="headerlink" title="5.3 开始写我们的第一个测试"></a>5.3 开始写我们的第一个测试</h3><h4 id="首先得有个-Bug"><a href="#首先得有个-Bug" class="headerlink" title="首先得有个 Bug"></a>首先得有个 Bug</h4><ul>
<li><p>幸运的是，我们的 <code>polls</code> 应用现在就有一个小 bug 需要被修复：</p>
<p>我们的要求是如果 Question 是在一天之内发布的， <code>Question.was_published_recently()</code> 方法将会返回 <code>True</code> ，</p>
<p>然而现在这个方法在 <code>Question</code> 的 <code>pub_date</code> 字段比当前时间还晚时也会返回 True（这是个 Bug）。</p>
</li>
<li><p>用djadmin:<code>shell</code>命令确认一下这个方法的日期bug</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; py manage.py shell</span><br></pre></td></tr></table></figure>

<blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; import datetime</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from django.utils import timezone</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from polls.models import Question</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment"># create a Question instance with pub_date 30 days in the future</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; future_question = Question(pub_date=timezone.now() + datetime.timedelta(days=30))</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment"># was it published recently?</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; future_question.was_published_recently()</span></span><br><span class="line">True</span><br></pre></td></tr></table></figure>

<p>因为将来发生的是肯定不是最近发生的，所以代码明显是错误的。</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512085658552.png" alt="image-20230512085658552" style="zoom:50%;" /></blockquote>
</li>
</ul>
<h4 id="创建一个测试来暴露这个-bug"><a href="#创建一个测试来暴露这个-bug" class="headerlink" title="创建一个测试来暴露这个 bug"></a>创建一个测试来暴露这个 bug</h4><ul>
<li><p>我们刚刚在 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/django-admin/#django-admin-shell"><code>shell</code></a> 里做的测试也就是自动化测试应该做的工作。所以我们来把它改写成自动化的吧。</p>
</li>
<li><p>按照惯例，Django 应用的测试应该写在应用的 <code>tests.py</code> 文件里。测试系统会自动的在所有以 <code>tests</code> 开头的文件里寻找并执行测试代码。</p>
<p>将下面的代码写入 <code>polls</code> 应用里的 <code>tests.py</code> 文件内：</p>
<p><code>polls/tests.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.test <span class="keyword">import</span> TestCase</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QuestionModelTests</span>(<span class="title class_ inherited__">TestCase</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_was_published_recently_with_future_question</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        was_published_recently() returns False for questions whose pub_date</span></span><br><span class="line"><span class="string">        is in the future.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        time = timezone.now() + datetime.timedelta(days=<span class="number">30</span>)</span><br><span class="line">        future_question = Question(pub_date=time)</span><br><span class="line">        self.assertIs(future_question.was_published_recently(), <span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>我们创建了一个 <code>django.test.TestCase</code>的子类，并添加了一个方法，此方法创建一个 <code>pub_date</code> 时未来某天的 <code>Question</code> 实例。然后检查它的 <code>was_published_recently()</code> 方法的返回值——它 <em>应该</em> 是 False。</p>
</blockquote>
</li>
</ul>
<h4 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h4><ul>
<li><p>在终端中，我们通过输入以下代码运行测试:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; py manage.py test polls</span><br></pre></td></tr></table></figure>

<p>测试情况：</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512090624341.png" alt="image-20230512090624341" style="zoom:50%;" /> 

<blockquote>
<p>不一样的错误？</p>
<p>若在此处你得到了一个 <code>NameError</code> 错误，你可能漏了 第二步 中将 <code>datetime</code> 和 <code>timezone</code> 导入 <code>polls/model.py</code> 的步骤。复制这些语句，然后试着重新运行测试。</p>
</blockquote>
<blockquote>
<p>发生了什么呢？以下是自动化测试的运行过程：</p>
<ul>
<li><code>python manage.py test polls</code> 将会寻找 <code>polls</code> 应用里的测试代码</li>
<li>它找到了 <code>django.test.TestCase</code> 的一个子类</li>
<li>它创建一个特殊的数据库供测试使用</li>
<li>它在类中寻找测试方法——以 <code>test</code> 开头的方法。</li>
<li>在 <code>test_was_published_recently_with_future_question</code> 方法中，它创建了一个 <code>pub_date</code> 值为 30 天后的 <code>Question</code> 实例。</li>
<li>接着使用 <code>assertls()</code> 方法，发现 <code>was_published_recently()</code> 返回了 <code>True</code>，而我们期望它返回 <code>False</code>。</li>
</ul>
<p>测试系统通知我们哪些测试样例失败了，和造成测试失败的代码所在的行号。</p>
</blockquote>
</li>
</ul>
<h4 id="修复这个-bug"><a href="#修复这个-bug" class="headerlink" title="修复这个 bug"></a>修复这个 bug</h4><ul>
<li><p>我们早已知道，当 <code>pub_date</code> 为未来某天时， <code>Question.was_published_recently()</code> 应该返回 <code>False</code>。</p>
<p>我们修改 <code>models.py</code> 里的方法，让它只在日期是过去式的时候才返回 <code>True</code>：</p>
<p><code>polls/models.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">was_published_recently</span>(<span class="params">self</span>):</span><br><span class="line">    now = timezone.now()</span><br><span class="line">    <span class="keyword">return</span> now - datetime.timedelta(days=<span class="number">1</span>) &lt;= self.pub_date &lt;= now</span><br></pre></td></tr></table></figure>

<blockquote>
<p>原来是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">was_published_recently</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.pub_date &gt;= timezone.now() - datetime.timedelta(days=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>再次测试：</p>
<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512091346086.png" alt="image-20230512091346086" style="zoom:67%;" /> 
</blockquote>
<p>发现 bug 后，我们编写了能够暴露这个 bug 的自动化测试。在修复 bug 之后，我们的代码顺利的通过了测试。</p>
<p>将来，我们的应用可能会出现其他的问题，但是我们可以肯定的是，一定不会再次出现这个 bug，因为只要运行一遍测试，就会立刻收到警告。我们可以认为应用的这一小部分代码永远是安全的。</p>
</li>
</ul>
<h4 id="更全面的测试"><a href="#更全面的测试" class="headerlink" title="更全面的测试"></a>更全面的测试</h4><ul>
<li><p>我们已经搞定一小部分了，现在可以考虑全面的测试 <code>was_published_recently()</code> 这个方法以确定它的安全性，然后就可以把这个方法稳定下来了。事实上，在修复一个 bug 时不小心引入另一个 bug 会是非常令人尴尬的。</p>
<p>我们在上次写的类里再增加两个测试，来更全面的测试这个方法：</p>
<p><code>polls/test.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_was_published_recently_with_old_question</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    was_published_recently() returns False for questions whose pub_date</span></span><br><span class="line"><span class="string">    is older than 1 day.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    time = timezone.now() - datetime.timedelta(days=<span class="number">1</span>, seconds=<span class="number">1</span>)</span><br><span class="line">    old_question = Question(pub_date=time)</span><br><span class="line">    self.assertIs(old_question.was_published_recently(), <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_was_published_recently_with_recent_question</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    was_published_recently() returns True for questions whose pub_date</span></span><br><span class="line"><span class="string">    is within the last day.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    time = timezone.now() - datetime.timedelta(hours=<span class="number">23</span>, minutes=<span class="number">59</span>, seconds=<span class="number">59</span>)</span><br><span class="line">    recent_question = Question(pub_date=time)</span><br><span class="line">    self.assertIs(recent_question.was_published_recently(), <span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>现在，我们有三个测试来确保 <code>Question.was_published_recently()</code> 方法对于过去，最近，和将来的三种情况都返回正确的值。</p>
<p>再次申明，尽管 <code>polls</code> 现在是个小型的应用，但是无论它以后变得到多么复杂，无论他和其他代码如何交互，我们可以在一定程度上保证我们为之编写测试的方法将按照预期的方式运行。</p>
<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512091837995.png" alt="image-20230512091837995" style="zoom:67%;" /></blockquote>
</li>
</ul>
<h3 id="5-4-测试视图"><a href="#5-4-测试视图" class="headerlink" title="5.4 测试视图"></a>5.4 测试视图</h3><blockquote>
<p>我们的投票应用对所有问题都一视同仁：它将会发布所有的问题，也包括那些 <code>pub_date</code> 字段值是未来的问题。</p>
<p>我们应该改善这一点。如果 <code>pub_date</code> 设置为未来某天，这应该被解释为这个问题将在所填写的时间点才被发布，而在之前是不可见的。</p>
</blockquote>
<h4 id="针对视图的测试"><a href="#针对视图的测试" class="headerlink" title="针对视图的测试"></a>针对视图的测试</h4><ul>
<li><p>为了修复上述 bug ，我们这次先编写测试，然后再去改代码。事实上，这是一个「测试驱动」开发模式的实例，但其实这两者的顺序不太重要。</p>
</li>
<li><p>在我们的第一个测试中，我们关注代码的内部行为。我们通过模拟用户使用浏览器访问被测试的应用来检查代码行为是否符合预期。</p>
<p>在我们动手之前，先看看需要用到的工具们。</p>
</li>
</ul>
<h4 id="Django-测试工具之-Client"><a href="#Django-测试工具之-Client" class="headerlink" title="Django 测试工具之 Client"></a>Django 测试工具之 Client</h4><ul>
<li><p>Django 提供了一个供测试使用的 <code>Client</code> 来模拟用户和视图层代码的交互。我们能在 <code>tests.py</code> 甚至是 <code>shell</code>中使用它。</p>
<p>我们依照惯例从 <code>shell</code> 开始，首先我们要做一些在 <code>tests.py</code> 里不是必须的准备工作。</p>
<ul>
<li><p>第一步是在 <code>shell</code>中配置测试环境:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; py manage.py shell</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from django.test.utils import setup_test_environment</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; setup_test_environment()</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>setup_test_environment()</code>安装了一个模板渲染器，</p>
<p>这将使我们能够检查响应上的一些额外属性，如 <code>response.context</code>，否则将无法使用此功能。</p>
<p>请注意，这个方法 <em>不会</em> 建立一个测试数据库，所以下面的内容将针对现有的数据库运行，输出结果可能略有不同，这取决于你已经创建了哪些问题。如果你在 <code>settings.py</code> 中的 <code>TIME_ZONE</code> 不正确，你可能会得到意外的结果。如果你不记得之前的配置，请在继续之前检查。</p>
</blockquote>
<p>准备：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from django.test import Client</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment"># create an instance of the client for our use</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; client = Client()</span></span><br></pre></td></tr></table></figure>

<p>让client 开始工作：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment"># get a response from &#x27;/&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; response = client.get(<span class="string">&quot;/&quot;</span>)</span></span><br><span class="line">Not Found: /</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment"># we should expect a 404 from that address; if you instead see an</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment"># &quot;Invalid HTTP_HOST header&quot; error and a 400 response, you probably</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment"># omitted the setup_test_environment() call described earlier.</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; response.status_code</span></span><br><span class="line">404</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment"># on the other hand we should expect to find something at &#x27;/polls/&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment"># we&#x27;ll use &#x27;reverse()&#x27; rather than a hardcoded URL</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from django.urls import reverse</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; response = client.get(reverse(<span class="string">&quot;polls:index&quot;</span>))</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; response.status_code</span></span><br><span class="line">200</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; response.content</span></span><br><span class="line">b&#x27;\n    &lt;ul&gt;\n    \n        &lt;li&gt;&lt;a href=&quot;/polls/1/&quot;&gt;What&amp;#x27;s up?&lt;/a&gt;&lt;/li&gt;\n    \n    &lt;/ul&gt;\n\n&#x27;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; response.context[<span class="string">&quot;latest_question_list&quot;</span>]</span></span><br><span class="line">&lt;QuerySet [&lt;Question: What&#x27;s up?&gt;]&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>我的测试效果：</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512093201305.png" alt="image-20230512093201305" style="zoom: 67%;" /></blockquote>
</li>
</ul>
</li>
</ul>
<h4 id="改善视图代码"><a href="#改善视图代码" class="headerlink" title="改善视图代码"></a>改善视图代码</h4><ul>
<li><p>现在的投票列表会显示将来的投票（ <code>pub_date</code> 值是未来的某天)。我们来修复这个问题。</p>
<p>在 教程的第 4 部分里，我们介绍了基于 <code>ListView</code> 的视图类：</p>
<p><code>polls/views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">IndexView</span>(generic.ListView):</span><br><span class="line">    template_name = <span class="string">&quot;polls/index.html&quot;</span></span><br><span class="line">    context_object_name = <span class="string">&quot;latest_question_list&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_queryset</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Return the last five published questions.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> Question.objects.order_by(<span class="string">&quot;-pub_date&quot;</span>)[:<span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<p>我们需要改进 <code>get_queryset()</code> 方法，让他它能通过将 Question 的 pub_data 属性与 <code>timezone.now()</code> 相比较来判断是否应该显示此 Question。首先我们需要一行 import 语句，然后我们把 <code>get_queryset</code> 方法改写成下面这样：</p>
<p><code>polls/views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_queryset</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Return the last five published questions (not including those set to be</span></span><br><span class="line"><span class="string">    published in the future).</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> Question.objects.<span class="built_in">filter</span>(pub_date__lte=timezone.now()).order_by(<span class="string">&quot;-pub_date&quot;</span>)[:<span class="number">5</span>]</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="测试新视图"><a href="#测试新视图" class="headerlink" title="测试新视图"></a>测试新视图</h4><ul>
<li><p>启动服务器、在浏览器中载入站点、创建一些发布时间在过去和将来的 <code>Questions</code> ，然后检验只有已经发布的 <code>Questions</code> 会展示出来，现在你可以对自己感到满意了。<em>你不想每次修改可能与这相关的代码时都重复这样做</em> —— 所以让我们基于以上 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/django-admin/#django-admin-shell"><code>shell</code></a> 会话中的内容，再编写一个测试。</p>
<p>将下面的代码添加到 <code>polls/tests.py</code> ：（我们写一个公用的快捷函数用于创建投票问题，再为视图创建一个测试类：）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_question</span>(<span class="params">question_text, days</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Create a question with the given `question_text` and published the</span></span><br><span class="line"><span class="string">    given number of `days` offset to now (negative for questions published</span></span><br><span class="line"><span class="string">    in the past, positive for questions that have yet to be published).</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    time = timezone.now() + datetime.timedelta(days=days)</span><br><span class="line">    <span class="keyword">return</span> Question.objects.create(question_text=question_text, pub_date=time)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QuestionIndexViewTests</span>(<span class="title class_ inherited__">TestCase</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_no_questions</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        If no questions exist, an appropriate message is displayed.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        response = self.client.get(reverse(<span class="string">&quot;polls:index&quot;</span>))</span><br><span class="line">        self.assertEqual(response.status_code, <span class="number">200</span>)</span><br><span class="line">        self.assertContains(response, <span class="string">&quot;No polls are available.&quot;</span>)</span><br><span class="line">        self.assertQuerySetEqual(response.context[<span class="string">&quot;latest_question_list&quot;</span>], [])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_past_question</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Questions with a pub_date in the past are displayed on the</span></span><br><span class="line"><span class="string">        index page.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        question = create_question(question_text=<span class="string">&quot;Past question.&quot;</span>, days=-<span class="number">30</span>)</span><br><span class="line">        response = self.client.get(reverse(<span class="string">&quot;polls:index&quot;</span>))</span><br><span class="line">        self.assertQuerySetEqual(</span><br><span class="line">            response.context[<span class="string">&quot;latest_question_list&quot;</span>],</span><br><span class="line">            [question],</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_future_question</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Questions with a pub_date in the future aren&#x27;t displayed on</span></span><br><span class="line"><span class="string">        the index page.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        create_question(question_text=<span class="string">&quot;Future question.&quot;</span>, days=<span class="number">30</span>)</span><br><span class="line">        response = self.client.get(reverse(<span class="string">&quot;polls:index&quot;</span>))</span><br><span class="line">        self.assertContains(response, <span class="string">&quot;No polls are available.&quot;</span>)</span><br><span class="line">        self.assertQuerySetEqual(response.context[<span class="string">&quot;latest_question_list&quot;</span>], [])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_future_question_and_past_question</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Even if both past and future questions exist, only past questions</span></span><br><span class="line"><span class="string">        are displayed.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        question = create_question(question_text=<span class="string">&quot;Past question.&quot;</span>, days=-<span class="number">30</span>)</span><br><span class="line">        create_question(question_text=<span class="string">&quot;Future question.&quot;</span>, days=<span class="number">30</span>)</span><br><span class="line">        response = self.client.get(reverse(<span class="string">&quot;polls:index&quot;</span>))</span><br><span class="line">        self.assertQuerySetEqual(</span><br><span class="line">            response.context[<span class="string">&quot;latest_question_list&quot;</span>],</span><br><span class="line">            [question],</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_two_past_questions</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        The questions index page may display multiple questions.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        question1 = create_question(question_text=<span class="string">&quot;Past question 1.&quot;</span>, days=-<span class="number">30</span>)</span><br><span class="line">        question2 = create_question(question_text=<span class="string">&quot;Past question 2.&quot;</span>, days=-<span class="number">5</span>)</span><br><span class="line">        response = self.client.get(reverse(<span class="string">&quot;polls:index&quot;</span>))</span><br><span class="line">        self.assertQuerySetEqual(</span><br><span class="line">            response.context[<span class="string">&quot;latest_question_list&quot;</span>],</span><br><span class="line">            [question2, question1],</span><br><span class="line">        )</span><br></pre></td></tr></table></figure>

<blockquote>
<p>让我们更详细地看下以上这些内容。</p>
<p>首先是一个快捷函数 <code>create_question</code>，它封装了创建投票的流程，减少了重复代码。</p>
<p>在 <code>test_past_question</code> 方法中，我们创建了一个投票并检查它是否出现在列表中。</p>
<p>在 <code>test_future_question</code> 中，我们创建 <code>pub_date</code> 在未来某天的投票。数据库会在每次调用测试方法前被重置，所以第一个投票已经没了，所以主页中应该没有任何投票。</p>
<p>剩下的那些也都差不多。实际上，测试就是假装一些管理员的输入，然后通过用户端的表现是否符合预期来判断新加入的改变是否破坏了原有的系统状态。</p>
</blockquote>
</li>
</ul>
<h4 id="测试-DetailView"><a href="#测试-DetailView" class="headerlink" title="测试 DetailView"></a>测试 <code>DetailView</code></h4><ul>
<li><p>我们的工作似乎已经很完美了？不，还有一个问题：就算在发布日期时未来的那些投票不会在目录页 <em>index</em> 里出现，但是如果用户知道或者猜到正确的 URL ，还是可以访问到它们。所以我们得在 <code>DetailView</code> 里增加一些约束：</p>
<p><code>polls/views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DetailView</span>(generic.DetailView):</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_queryset</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Excludes any questions that aren&#x27;t published yet.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> Question.objects.<span class="built_in">filter</span>(pub_date__lte=timezone.now())</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后，我们应该增加一些测试来检验 <code>pub_date</code> 在过去的 <code>Question</code> 能够被显示出来，而 <code>pub_date</code> 在未来的则不可以：</p>
<p><code>polls/test.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">QuestionDetailViewTests</span>(<span class="title class_ inherited__">TestCase</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_future_question</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        The detail view of a question with a pub_date in the future</span></span><br><span class="line"><span class="string">        returns a 404 not found.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        future_question = create_question(question_text=<span class="string">&quot;Future question.&quot;</span>, days=<span class="number">5</span>)</span><br><span class="line">        url = reverse(<span class="string">&quot;polls:detail&quot;</span>, args=(future_question.<span class="built_in">id</span>,))</span><br><span class="line">        response = self.client.get(url)</span><br><span class="line">        self.assertEqual(response.status_code, <span class="number">404</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_past_question</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        The detail view of a question with a pub_date in the past</span></span><br><span class="line"><span class="string">        displays the question&#x27;s text.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        past_question = create_question(question_text=<span class="string">&quot;Past Question.&quot;</span>, days=-<span class="number">5</span>)</span><br><span class="line">        url = reverse(<span class="string">&quot;polls:detail&quot;</span>, args=(past_question.<span class="built_in">id</span>,))</span><br><span class="line">        response = self.client.get(url)</span><br><span class="line">        self.assertContains(response, past_question.question_text)</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<blockquote>
<p>我的测试结果：</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512095545574.png" alt="image-20230512095545574" style="zoom:80%;" /></blockquote>
</li>
</ul>
<h4 id="更多的测试思路"><a href="#更多的测试思路" class="headerlink" title="更多的测试思路"></a>更多的测试思路</h4><ul>
<li><p>我们应该给 <code>ResultsView</code> 也增加一个类似的 <code>get_queryset</code> 方法，并且为它创建测试。这和我们之前干的差不多，事实上，基本就是重复一遍。</p>
</li>
<li><p>我们还可以从各个方面改进投票应用，但是测试会一直伴随我们。比方说，在目录页上显示一个没有选项 <code>Choices</code> 的投票问题就没什么意义。我们可以检查并排除这样的投票题。测试可以创建一个没有选项的投票，然后检查它是否被显示在目录上。当然也要创建一个有选项的投票，然后确认它确实被显示了。</p>
<p>恩，也许你想让管理员能在目录上看见未被发布的那些投票，但是普通用户看不到。不管怎么说，如果你想要增加一个新功能，那么同时一定要为它编写测试。不过你是先写代码还是先写测试那就随你了。</p>
</li>
<li><p>在未来的某个时刻，你一定会去查看测试代码，然后开始怀疑：「这么多的测试不会使代码越来越复杂吗？」。别着急，我们马上就会谈到这一点。</p>
</li>
</ul>
<h3 id="5-5-当需要测试的时候，测试用例越多越好"><a href="#5-5-当需要测试的时候，测试用例越多越好" class="headerlink" title="5.5 当需要测试的时候，测试用例越多越好"></a>5.5 当需要测试的时候，测试用例越多越好</h3><ul>
<li><p>貌似我们的测试多的快要失去控制了。按照这样发展下去，测试代码就要变得比应用的实际代码还要多了。而且测试代码大多都是重复且不优雅的，特别是在和业务代码比起来的时候，这种感觉更加明显。</p>
<p><strong>但是这没关系！</strong> 就让测试代码继续肆意增长吧。大部分情况下，你写完一个测试之后就可以忘掉它了。在你继续开发的过程中，它会一直默默无闻地为你做贡献的。</p>
</li>
<li><p>但有时测试也需要更新。想象一下如果我们修改了视图，只显示有选项的那些投票，那么只前写的很多测试就都会失败。<em>但这也明确地告诉了我们哪些测试需要被更新</em>，所以测试也会测试自己。</p>
<p>最坏的情况是，当你继续开发的时候，发现之前的一些测试现在看来是多余的。但是这也不是什么问题，多做些测试也 <em>不错</em>。</p>
<p>如果你对测试有个整体规划，那么它们就几乎不会变得混乱。下面有几条好的建议：</p>
<ul>
<li>对于每个模型和视图都建立单独的 <code>TestClass</code></li>
<li>每个测试方法只测试一个功能</li>
<li>给每个测试方法起个能描述其功能的名字</li>
</ul>
</li>
</ul>
<h3 id="5-6-深入代码测试"><a href="#5-6-深入代码测试" class="headerlink" title="5.6 深入代码测试"></a>5.6 深入代码测试</h3><ul>
<li><p>在本教程中，我们仅仅是了解了测试的基础知识。你能做的还有很多，而且世界上有很多有用的工具来帮你完成这些有意义的事。</p>
<p>举个例子，在上述的测试中，我们已经从代码逻辑和视图响应的角度检查了应用的输出，现在你可以从一个更加 “in-browser” 的角度来检查最终渲染出的 HTML 是否符合预期，使用 Selenium 可以很轻松的完成这件事。这个工具不仅可以测试 Django 框架里的代码，还可以检查其他部分，比如说你的 JavaScript。它假装成是一个正在和你站点进行交互的浏览器，就好像有个真人在访问网站一样！Django 它提供了 <code>LiveServerTestCase</code> 来和 Selenium 这样的工具进行交互。</p>
</li>
<li><p>如果你在开发一个很复杂的应用的话，</p>
<p>你也许想在每次提交代码时自动运行测试，也就是我们所说的持续集成 continuous integration，</p>
<p>这样就能实现质量控制的自动化，起码是部分自动化。</p>
</li>
<li><p>一个找出代码中未被测试部分的方法是检查代码覆盖率。它有助于找出代码中的薄弱部分和无用部分。如果你无法测试一段代码，通常说明这段代码需要被重构或者删除。想知道代码覆盖率和无用代码的详细信息，查看文档 <a href="https://docs.djangoproject.com/zh-hans/4.2/topics/testing/advanced/#topics-testing-code-coverage">集成 coverage.py</a> 获取详细信息。</p>
</li>
</ul>
<blockquote>
<p>文档 <a href="https://docs.djangoproject.com/zh-hans/4.2/topics/testing/">Django 中的测试</a> 里有关于测试的更多信息。</p>
</blockquote>
<h3 id="5-7-接下来要做什么？"><a href="#5-7-接下来要做什么？" class="headerlink" title="5.7 接下来要做什么？"></a>5.7 接下来要做什么？</h3><blockquote>
<p>如果你想深入了解测试，就去看 <a href="https://docs.djangoproject.com/zh-hans/4.2/topics/testing/">Django 中的测试</a> 。</p>
<p>当你已经比较熟悉测试 Django 视图的方法后，就可以继续阅读 教程第 6 部分 ，学习静态文件管理的相关知识。</p>
</blockquote>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>《Cisco计网实验》Notes</title>
    <url>/butterflyblog/2023/08/11/%E3%80%8ACisco%E8%AE%A1%E7%BD%91%E5%AE%9E%E9%AA%8C%E3%80%8BNotes/</url>
    <content><![CDATA[<h1 id="《Cisco计网实验》Notes"><a href="#《Cisco计网实验》Notes" class="headerlink" title="《Cisco计网实验》Notes"></a>《Cisco计网实验》Notes</h1><blockquote>
<h3 id="长文警告！！！"><a href="#长文警告！！！" class="headerlink" title="长文警告！！！"></a>长文警告！！！</h3></blockquote>
<blockquote>
<p>来源：<a href="https://www.bilibili.com/video/BV1Xb411Y7i7/">【教辅视频】Cisco Packet Tracer视频教程</a></p>
<p>2023.8.8@Seymour0314</p>
</blockquote>
<h2 id="第一章、认识软件"><a href="#第一章、认识软件" class="headerlink" title="第一章、认识软件"></a>第一章、认识软件</h2><h3 id="1-1-实验"><a href="#1-1-实验" class="headerlink" title="1.1 实验"></a>1.1 实验</h3><ul>
<li>一台二层交换机</li>
<li>两台PC机</li>
<li>直连线互联（连接 FastEthernet 口）</li>
<li>配置PC0、PC1的 IP 分别为 <code>192.168.1.2</code>和<code>192.168.1.3</code></li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230808140520077.png" alt="image-20230808140520077" style="zoom: 80%;" /> 

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230808140546448.png" alt="image-20230808140546448" style="zoom: 67%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230808140613869.png" alt="image-20230808140613869" style="zoom: 67%;" /></p>
<h3 id="1-2-测试"><a href="#1-2-测试" class="headerlink" title="1.2 测试"></a>1.2 测试</h3><ul>
<li>打开PC0的cmd，ping PC1</li>
<li>同理 PC1 ping PC0</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230808140913617.png" alt="image-20230808140913617" style="zoom: 67%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230808140940635.png" alt="image-20230808140940635" style="zoom:67%;" /></p>
<h3 id="1-3-说明"><a href="#1-3-说明" class="headerlink" title="1.3 说明"></a>1.3 说明</h3><ul>
<li>二层交换机下同属一个广播域，PC0与PC1可以互相通信</li>
</ul>
<h2 id="第二、三章、交换机管理"><a href="#第二、三章、交换机管理" class="headerlink" title="第二、三章、交换机管理"></a>第二、三章、交换机管理</h2><h3 id="2-1-原理"><a href="#2-1-原理" class="headerlink" title="2.1 原理"></a>2.1 原理</h3><ul>
<li><p>交换机有两种管理方法</p>
<ul>
<li><p>带内管理</p>
<p>通过Console 端口进行管理</p>
</li>
<li><p>带外管理</p>
<p>通过Telnet、拨号等方法远程登录进行管理</p>
</li>
</ul>
<p>第一次配置只能是带内管理。</p>
</li>
</ul>
<h4 id="交换机命令行模式"><a href="#交换机命令行模式" class="headerlink" title="交换机命令行模式"></a>交换机命令行模式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用户模式	Switch&gt;</span><br><span class="line">特权模式	Switch#</span><br><span class="line">全局配置	Switch(config)#</span><br><span class="line">端口模式	Switch(config-if)#</span><br><span class="line"></span><br><span class="line">en			进入特权模式</span><br><span class="line">conf t		进入全局配置</span><br><span class="line">int fa 0/1	进入交换机端口</span><br><span class="line"></span><br><span class="line">exit		退回上一级模式</span><br><span class="line">end			退到全局模式</span><br><span class="line">shutdown	关闭</span><br><span class="line">no shutdown	开启</span><br><span class="line"></span><br><span class="line">ip routing  #开启三层交换机路由功能（#下）</span><br><span class="line"></span><br><span class="line">show run	查看当前生效的配置信息（#下）</span><br><span class="line">show vlan	查看vlan配置信息（#下）</span><br><span class="line"></span><br><span class="line">show int vlan 1		查看vlan1的具体信息（#下）</span><br><span class="line">show ip route 		查看ip路由配置信息（#下）</span><br><span class="line">show ip protocols	查看路由协议（#下）</span><br><span class="line"></span><br><span class="line">speed		配置交换机端口参数，带宽</span><br><span class="line">duplex		配置交换机端口参数，全双工</span><br><span class="line"></span><br><span class="line">clock rate 64000	设置serial串口时钟频率（进入int se设置）</span><br><span class="line"></span><br><span class="line">reload		重启</span><br><span class="line"></span><br><span class="line">?			帮助信息</span><br><span class="line">houstname	设备重新命名</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><p>命令可以简写</p>
<p>如 <code>int fa 0/1</code> 是 <code>interface fastEthernet 0/1</code>的简写</p>
<p>解释：</p>
<ul>
<li><p>fa 0&#x2F;1</p>
<p>fa是fastEthernet线，最高100Mbps</p>
<p>0是这个板卡上的0槽位</p>
<p>1是这个槽位上的1端口</p>
</li>
</ul>
<blockquote>
<p>Gi 0&#x2F;1的G指Gigabit，千兆以太网接口。</p>
</blockquote>
</li>
<li><p>Tab 键可以补全</p>
</li>
</ul>
</blockquote>
<h3 id="2-2-实验"><a href="#2-2-实验" class="headerlink" title="2.2 实验"></a>2.2 实验</h3><p>采用 Telnet 远程登录配置交换机</p>
<ul>
<li><p>配置交换机 IP 地址（计算机 IP 和交换机 IP 必须属于同一个网段）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Switch(config)#int vlan 1</span><br><span class="line">Switch(config-if)#ip address 192.168.1.1 255.255.255.0</span><br><span class="line">Switch(config-if)#no shutdown</span><br></pre></td></tr></table></figure>

<blockquote>
<p>一般来说，二层交换机是不需要 IP 地址的，因为没有网络层功能。</p>
<p>这里却配置了IP地址，是因为要通过PC机远程登陆交换机，所以需要设置 IP 地址。</p>
</blockquote>
</li>
<li><p>为 Telnet 用户配置用户名、登陆口令</p>
<ul>
<li><p>密码1：进入特权模式的密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Switch(config)#enable password 123456</span><br></pre></td></tr></table></figure>
</li>
<li><p>密码2：console口连接、Telnet远程登录等的密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Switch(config)#line console 0</span><br><span class="line">Switch(config-line)#password 123abc</span><br><span class="line">Switch(config-line)#login</span><br><span class="line"></span><br><span class="line">Switch(config)#line vty 0 4</span><br><span class="line">Switch(config-line)#password 123abc</span><br><span class="line">Switch(config-line)#login</span><br><span class="line"></span><br><span class="line">配置好了之后，可以查看一下</span><br><span class="line">Switch#show run</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>实验步骤</p>
<ul>
<li><p>一台交换机2960</p>
</li>
<li><p>一台PC机</p>
</li>
<li><p>Consle线连接（PC机-RS232口、交换机-Console口）</p>
</li>
<li><p>直连线（fastEthernet口）</p>
</li>
<li><p>打开PC 终端，是Switch 的配置终端</p>
</li>
<li><p>配置 Switch IP地址为<code>192.168.1.1</code></p>
</li>
<li><p>配置特权模式密码、配置Telent远程登录密码</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230808145419593.png" alt="image-20230808145419593" style="zoom:67%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230808145358929.png" alt="image-20230808145358929" style="zoom:67%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230808145451238.png" alt="image-20230808145451238" style="zoom:67%;" /></p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230808145708527.png" alt="image-20230808145708527" style="zoom:67%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230808145734877.png" alt="image-20230808145734877" style="zoom:67%;" /></p>
<h3 id="2-3-测试"><a href="#2-3-测试" class="headerlink" title="2.3 测试"></a>2.3 测试</h3><ul>
<li><p>配置PC机自己的 IP 在同一个网段下</p>
<blockquote>
<p>此时已经可以吧Console线去掉了，不需要了。</p>
</blockquote>
</li>
<li><p>ping 交换机测试</p>
</li>
<li><p>telnet登陆测试</p>
<p>登陆密码是前面设置的abc123</p>
<p>特权模式密码是前面设置的123456</p>
<blockquote>
<p>输入密码时，会看不到输入，但是实际上输入了</p>
</blockquote>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230808145935899.png" alt="image-20230808145935899" style="zoom:67%;" />  <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230808150049471.png" alt="image-20230808150049471" style="zoom:67%;" /></p>
<h2 id="第四章、交换机VLAN划分"><a href="#第四章、交换机VLAN划分" class="headerlink" title="第四章、交换机VLAN划分"></a>第四章、交换机VLAN划分</h2><h3 id="4-1-原理"><a href="#4-1-原理" class="headerlink" title="4.1 原理"></a>4.1 原理</h3><ul>
<li><p>VLAN</p>
<p>Virtual LAN，虚拟局域网</p>
</li>
<li><p>通过二层交换机的VLAN设置，使得同一物理区域的PC机，属于不同的逻辑区域，隔离广播域、冲突域。</p>
<p>同一VLAN下的PC可以相互通信，不同VLAN下的PC不能直接通信。</p>
<p>不同VLAN下的PC的通信需要经过三层交换机，后面介绍，这里只做二层交换机实验。</p>
</li>
<li><p>划分VLAN的两种方法</p>
<ul>
<li><p>Port VLAN</p>
<p>交换机的同一端口下的PC只能属于同一个VALN</p>
</li>
<li><p>Tag VLAN</p>
<p>遵循 IEEE802.1q 协议标准，数据帧内添加4字节的802.1q标签信息，用于标识该数据帧属于哪个VLAN，便于对端交换机接收到后进行过滤。</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>交换机的端口类型，可以分为以下两种：</p>
<ul>
<li><p><strong>（1）访问链接（Access Link）</strong></p>
<p>访问链接，指的是“只属于一个VLAN，且仅向该VLAN转发数据帧”的端口。在大多数情况下，访问链接所连的是客户机。</p>
<p>通常设置VLAN的顺序是：（1）生成VLAN（2）设定访问链接（决定各端口<strong>属于</strong>哪一个VLAN）</p>
<p>设定访问链接的手法，可以是事先固定的、也可以是根据所连的计算机而动态改变设定。</p>
<ul>
<li><p>前者被称为“静态VLAN”</p>
<p>静态VLAN又被称为基于端口的VLAN（PortBased VLAN）。</p>
<p>顾名思义，就是明确指定各端口属于哪个VLAN的设定方法。</p>
</li>
<li><p>后者自然就是“动态VLAN”</p>
<p>动态VLAN则是根据每个端口所连的计算机，随时改变端口所属的VLAN。</p>
<p>分为3类：（1）基于MAC地址的VLAN（MAC Based VLAN）（2）基于子网的VLAN（Subnet Based VLAN）（3）基于用户的VLAN（User Based VLAN）</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230809002315109.png" alt="image-20230809002315109" style="zoom: 67%;" /> 

<p>其间的差异，主要在于根据OSI参照模型哪一层的信息决定端口所属的VLAN。</p>
</li>
</ul>
</li>
<li><p><strong>（2）汇聚链接（Trunk Link）</strong></p>
<p>汇聚链接（Trunk Link）指的是能够转发多个不同VLAN的通信的端口。</p>
<p>在交换机的汇聚链接上，可以通过对数据帧附加VLAN信息，构建跨越多台交换机的VLAN。</p>
<p>附加VLAN信息的方法，最具有代表性的有：</p>
<ul>
<li><p>IEEE 802.1Q</p>
<p>俗称“Dot One Q”，是经过IEEE认证的对数据帧附加VLAN识别信息的协议。</p>
</li>
<li><p>ISL</p>
<p>Cisco产品支持的一种与IEEE 802.1Q类似的、用于在汇聚链路上附加VLAN信息的协议。</p>
</li>
</ul>
<p>另外，汇聚链路上流通着多个VLAN的数据，自然负载较重。</p>
<p>因此，在设定汇聚链接时，有一个<strong>前提</strong>就是必须支持100Mbps以上的传输速度。</p>
</li>
</ul>
</blockquote>
<h3 id="4-2-实验"><a href="#4-2-实验" class="headerlink" title="4.2 实验"></a>4.2 实验</h3><ul>
<li>两台交换机2960</li>
<li>四台PC机</li>
<li>直连线连接（fastEthernet，交换机之间连fa0&#x2F;24）</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230808153231479.png" alt="image-20230808153231479" style="zoom:67%;" /> 

<ul>
<li><p>配置PC机IP地址为<code>192.168.1.1</code>到<code>192.168.1.4</code>，不用设置网关。</p>
</li>
<li><p>测试ping</p>
<p>从PC0去ping其他所有PC，都是能通的。</p>
<p>也就是说，同属于一个LAN。</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230808153409161.png" alt="image-20230808153409161" style="zoom:67%;" /> 
</li>
<li><p>交换机划分VLAN</p>
<p>打开Switch-CLI窗口，划分vlan如下：</p>
<p>创建vlan2、vlan3，把端口划分进对应vlan，交换机之间设置trunk模式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Switch&gt;en</span><br><span class="line">Switch#conf t</span><br><span class="line">Enter configuration commands, one per line.  End with CNTL/Z.</span><br><span class="line">Switch(config)#vlan 2</span><br><span class="line">Switch(config-vlan)#exit</span><br><span class="line">Switch(config)#vlan 3</span><br><span class="line">Switch(config-vlan)#exit</span><br><span class="line">Switch(config)#int fa 0/1</span><br><span class="line">Switch(config-if)#switchport access vlan 2</span><br><span class="line">Switch(config-if)#exit</span><br><span class="line">Switch(config)#int fa 0/2</span><br><span class="line">Switch(config-if)#switchport access vlan 3</span><br><span class="line">Switch(config-if)#exit</span><br><span class="line">Switch(config)#int fa 0/24</span><br><span class="line">Switch(config-if)#switchport mode trunk</span><br></pre></td></tr></table></figure>
</li>
<li><p>两个交换机都操作（完全相同操作）</p>
<p><code>show vlan</code>查看vlan设置</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230808154004077.png" alt="image-20230808154004077" style="zoom:67%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230808154109397.png" alt="image-20230808154109397" style="zoom:67%;" /></p>
</li>
</ul>
<h3 id="4-3-测试"><a href="#4-3-测试" class="headerlink" title="4.3 测试"></a>4.3 测试</h3><ul>
<li><p>实验过程中已经测过一次</p>
<p>PC0到其他所有PC都能通</p>
</li>
<li><p>现在重新测试PC0到其他所有PC</p>
<ul>
<li>PC0属于vlan 2</li>
<li>只能ping通同属于vlan 2 的PC2</li>
<li>其他ping 不通</li>
</ul>
</li>
<li><p>换一个，PC1同理只能ping通 PC3</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230808155142189.png" alt="image-20230808155142189" style="zoom:67%;" />  <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230808155034124.png" alt="image-20230808155034124" style="zoom:67%;" /></p>
<h2 id="第五章、三层交换机实现VLAN间路由"><a href="#第五章、三层交换机实现VLAN间路由" class="headerlink" title="第五章、三层交换机实现VLAN间路由"></a>第五章、三层交换机实现VLAN间路由</h2><blockquote>
<p>详细资料：</p>
<ul>
<li><p><a href="https://www.cnblogs.com/pwc1996/p/5957858.html">不同VLAN之间互相通信</a></p>
</li>
<li><p><a href="https://blog.csdn.net/phunxm/article/details/9498829">VLAN原理详解</a></p>
</li>
</ul>
</blockquote>
<h3 id="5-1-原理"><a href="#5-1-原理" class="headerlink" title="5.1 原理"></a>5.1 原理</h3><ul>
<li><p>VLAN是广播域。</p>
<p>而通常两个广播域之间由路由器连接，广播域之间来往的数据包都是由<strong>路由器中继</strong>的。</p>
<p>因此，VLAN间的通信也需要路由器提供中继服务，这被称作“<strong>VLAN间路由</strong>”。</p>
<p>VLAN间路由，可以使用普通的路由器，也可以使用三层交换机。</p>
</li>
<li><p>三层交换机具备网络层功能，能够实现 VLAN 间的访问。</p>
<p>利用三层交换机的路由功能，通过识别数据包的 IP 地址，查找路由表并选路转发。</p>
</li>
<li><p>三层交换机给接口配置 IP 地址，采用 SVI（交换机虚拟接口）的方式实现 VLAN 间互联。</p>
<p>SVI 是指为交换机中的 VLAN 创建虚拟接口，并配置 IP 地址。</p>
</li>
</ul>
<h4 id="VLAN间路由原理"><a href="#VLAN间路由原理" class="headerlink" title="VLAN间路由原理"></a>VLAN间路由原理</h4><blockquote>
<ul>
<li><p>两台计算机即使连接在同一台交换机上，只要所属的VLAN不同就无法直接通信。</p>
<p>为什么？</p>
<p>在LAN内的通信，必须在数据帧头中指定通信目标的MAC地址。而为了获取MAC地址，TCP&#x2F;IP协议下使用的是ARP。ARP解析MAC地址的方法，则是通过广播。计算机分属不同的VLAN，也就意味着分属不同的广播域，自然收不到彼此的广播报文。</p>
</li>
<li><p>为了能够在VLAN间通信，需要利用OSI参照模型中<strong>更高一层</strong>——网络层的信息（IP地址）来进行<strong>路由</strong>。</p>
</li>
<li><p>方法</p>
<p>先将用于连接路由器的交换机端口设为汇聚链接（Trunk Link），而路由器上的端口也必须支持汇聚链路。双方用于汇聚链路的协议自然也必须相同。接着在路由器上定义对应各个VLAN的“子接口”（Sub Interface）。</p>
<p>尽管实际路由器与交换机连接的物理端口只有一个，但在理论上我们可以把它分割为多个虚拟端口。</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230809003629996.png" alt="image-20230809003629996" style="zoom:67%;" /> 

<p>交换机通过对各端口所连计算机MAC地址的学习，生成如下的MAC地址列表。</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230809003651516.png" alt="image-20230809003651516" style="zoom: 50%;" /> 

<p> 分析：</p>
<ul>
<li><p>同一VLAN内的通信：A –&gt; B</p>
<p>交换机查VLAN1下的MAC表，直接发给了B</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230809003844623.png" alt="image-20230809003844623" style="zoom:67%;" /> 
</li>
<li><p>不同VLAN间的通信：A –&gt; C</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230809003956228.png" alt="image-20230809003956228" style="zoom:67%;" /> 

<p>计算机A从通信目标的IP地址（192.168.2.1）得出C与本机不属于同一个网段。</p>
<p>因此会向设定的默认网关（DefaultGateway，GW）转发数据帧。在发送数据帧前，需要先用<strong>ARP</strong>获取路由器的MAC地址。</p>
<p>得到路由器的MAC地址R后，接下来就是按图中所示的步骤发送往C去的数据帧。①的数据帧中，目标<strong>MAC地址</strong>是路由器的地址R、但内含的<strong>目标IP地址</strong>仍是最终要通信的对象C的地址。</p>
<p>交换机在端口1上收到①的数据帧后，检索MAC地址列表中与端口1同属一个VLAN的表项。由于汇聚链路会被看作属于所有的VLAN，因此这时交换机的端口6也属于被参照对象。这样交换机就知道往<strong>MAC地址</strong>R发送数据帧，需要经过端口6转发。</p>
<p>从端口6发送数据帧时，由于它是<strong>汇聚链接</strong>，因此会被<strong>附加</strong>上VLAN识别信息。由于原先是<strong>来自红色</strong>VLAN的数据帧，因此如图中②所示，会被<strong>加上红色</strong>VLAN的识别信息后进入汇聚链路。路由器收到②的数据帧后，确认其VLAN识别信息，由于它是<strong>属于红色</strong>VLAN的数据帧，因此<strong>交由负责红色</strong>VLAN的子接口接收。</p>
<p>接着，根据路由器内部的<strong>路由表</strong>，判断该向哪里中继。</p>
<p>由于目标网络192.168.2.0&#x2F;24是蓝色VLAN，，且该网络通过<strong>子接口</strong>与路由器直连，因此只要从<strong>负责蓝色</strong>VLAN的<strong>子接口转发</strong>就可以了。这时，数据帧的目标MAC地址被<strong>改写</strong>成计算机C的目标地址；并且由于需要<strong>经过汇聚链路转发</strong>，因此被<strong>附加</strong>了属于<strong>蓝色</strong>VLAN的识别信息。这就是图中③的数据帧。</p>
<p>交换机收到③的数据帧后，根据VLAN标识信息从MAC地址列表中检索属于蓝色VLAN的表项。由于通信目标——计算机C连接在端口3上、且端口3为普通的访问链接，因此交换机会将数据帧<strong>去除</strong>VLAN识别信息后（数据帧④）转发给端口3，最终计算机C才能成功地收到这个数据帧。</p>
<p>注：进行VLAN间通信时，即使通信双方都连接在同一台交换机上，也必须经过：“发送方——交换机——路由器——交换机——接收方”这样一个流程。</p>
</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="路由器与交换机"><a href="#路由器与交换机" class="headerlink" title="路由器与交换机"></a>路由器与交换机</h4><blockquote>
<ul>
<li><p>路由器，则基本上是基于软件处理的。</p>
</li>
<li><p>三层交换机，本质上就是“有第三层路由功能的（二层）交换机”。</p>
<p>与传统的路由器相比，可以实现高速路由。</p>
<p>并且，路由与交换模块是汇聚链接的，由于是内部连接，可以确保相当大的带宽。</p>
<p><strong>VLAN接口</strong>，是用于各VLAN收发数据的接口。</p>
<p>（注：在Cisco的Catalyst系列交换机上，VLAN Interface被称为SVI——Switched Virtual Interface）</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230809004858899.png" alt="image-20230809004858899" style="zoom:50%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230809005057754.png" alt="image-20230809005057754" style="zoom: 50%;" /> </p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230809005359698.png" alt="image-20230809005359698" style="zoom:67%;" /> 

<ul>
<li><p>既然三层交换机能够提供比传统型路由器更为高速的路由处理，那么网络中还有使用路由器的必要吗？</p>
<p>使用路由器的必要性，主要表现在以下几个方面：</p>
<p>（1）用于与WAN连接</p>
<p>（2）保证网络安全</p>
<p>（3）支持除TCP&#x2F;IP以外的异构网络架构</p>
</li>
<li><p>下面让我们来看一个路由器和交换机搭配构建LAN的实例。</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230809010007772.png" alt="image-20230809010007772" style="zoom:80%;" /> 

<p>利用在各楼层配置的二层交换机定义VLAN，连接TCP&#x2F;IP客户计算机。各楼层间的VLAN间通信，利用三层交换机的高速路由加以实现。如果网络环境要求高可靠性，还可以考虑冗余配置三层交换机。</p>
<p>与WAN的连接，则通过带有各种网络接口的路由器进行。并且，通过路由器的数据包过滤和VPN等功能实现网络安全。此外，使用路由器还能支持Novell Netware等TCP&#x2F;IP之外的网络。</p>
<p>只有在充分掌握了二层、三层交换机以及传统路由器的基础上，才能做到物竞其用，构筑出高效率、高性价比的网络。</p>
</li>
<li><p>例：分析下面的网络</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230809011747934.png" alt="image-20230809011747934" style="zoom:50%;" /></li>
</ul>
</blockquote>
<h3 id="5-2-实验"><a href="#5-2-实验" class="headerlink" title="5.2 实验"></a>5.2 实验</h3><ul>
<li>三层交换机3560一台</li>
<li>二层交换机2960一台</li>
<li>PC机三台</li>
<li>直连线连接</li>
<li>设置PC机 IP 和网关</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230808184117306.png" alt="image-20230808184117306" style="zoom:67%;" /> 

<ul>
<li>配置二层交换机的vlan2、vlan3并连接到对应接口</li>
<li>配置二层交换机trunk口</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Switch&gt;en</span><br><span class="line">Switch#conf t</span><br><span class="line">Enter configuration commands, one per line.  End with CNTL/Z.</span><br><span class="line">Switch(config)#vlan 2</span><br><span class="line">Switch(config-vlan)#exit</span><br><span class="line">Switch(config)#vlan 3</span><br><span class="line">Switch(config-vlan)#exit</span><br><span class="line">Switch(config)#int fa 0/2</span><br><span class="line">Switch(config-if)#switchport access vlan 2</span><br><span class="line">Switch(config-if)#exit</span><br><span class="line">Switch(config)#int fa 0/3</span><br><span class="line">Switch(config-if)#switchport access vlan 3</span><br><span class="line">Switch(config-if)#exit</span><br><span class="line">Switch(config)#int fa 0/1</span><br><span class="line">Switch(config-if)#switchport mode trunk </span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230808190553126.png" alt="image-20230808190553126" style="zoom:67%;" /> 

<ul>
<li><p>配置三层交换机</p>
<p>创建vlan2、vlan3，连接vlan下的PC机</p>
<p>创建vlan2、vlan3的SVI，配置 IP 地址，并开启</p>
<p>开启三层交换机的路由功能，开始工作</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Switch&gt;en</span><br><span class="line">Switch#conf t</span><br><span class="line">Enter configuration commands, one per line.  End with CNTL/Z.</span><br><span class="line">Switch(config)#vlan 2</span><br><span class="line">Switch(config-vlan)#exit</span><br><span class="line">Switch(config)#vlan 3</span><br><span class="line">Switch(config-vlan)#exit</span><br><span class="line">Switch(config)#int fa 0/2</span><br><span class="line">Switch(config-if)#switchport access vlan 2</span><br><span class="line">Switch(config-if)#exit</span><br><span class="line"></span><br><span class="line">Switch(config)#int vlan 2</span><br><span class="line">Switch(config-if)#ip address 192.168.1.1 255.255.255.0</span><br><span class="line">Switch(config-if)#no shutdown</span><br><span class="line">Switch(config-if)#exit</span><br><span class="line">Switch(config)#int vlan 3</span><br><span class="line">Switch(config-if)#ip address 192.168.2.1 255.255.255.0</span><br><span class="line">Switch(config-if)#no shutdown</span><br><span class="line">Switch(config-if)#exit</span><br><span class="line"></span><br><span class="line">Switch(config)#ip routing  #开启三层交换机路由功能</span><br><span class="line">Switch(config)#end</span><br><span class="line"></span><br><span class="line">Switch#show ip route	#查看路由配置</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230808190347880.png" alt="image-20230808190347880" style="zoom:67%;" /> 

<h3 id="5-3-测试"><a href="#5-3-测试" class="headerlink" title="5.3 测试"></a>5.3 测试</h3><ul>
<li>由PC0 去ping其他主机，均能通</li>
<li>由PC1 去ping其他主机，均能通</li>
<li>由PC2 去ping其他主机，均能通</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230808190749565.png" alt="image-20230808190749565" style="zoom:67%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230808190834265.png" alt="image-20230808190834265" style="zoom:67%;" /> </p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230808191018147.png" alt="image-20230808191018147" style="zoom:67%;" /> 



<h2 id="第六章、快速生成树RSTP"><a href="#第六章、快速生成树RSTP" class="headerlink" title="第六章、快速生成树RSTP"></a>第六章、快速生成树RSTP</h2><h3 id="6-1-原理"><a href="#6-1-原理" class="headerlink" title="6.1 原理"></a>6.1 原理</h3><ul>
<li><p>生成树协议（spanning-tree）</p>
<p>作用是在交换网络中提供冗余备份链路，并且解决交换网络中的环路问题。</p>
</li>
<li><p>生成树协议是利用SPA算法，在存在交换环路的网络中生成一个没有环路的树形网络。</p>
<p>运用该算法将交换网络的冗余备份链路从逻辑上断开，当主链路出现故障时，能够自动的切换到备份链路，保证数据的正常转发。</p>
</li>
<li><p>生成树协议版本</p>
<ul>
<li>STP</li>
<li>RSTP（快速生成树协议）</li>
<li>MSTP（多生成树协议）</li>
</ul>
</li>
<li><p>生成树协议特点</p>
<p>收敛时间长，从主要链路出现故障，到切换至备份链路需要50秒的时间。</p>
<p>快速生成树协议在生成树协议的基础上，增加了两种端口角色：替换端口、备份端口，分别作为根端口和指定端口的冗余端口。</p>
<p>当根端口或指定端口出现故障时，冗余端口不需要经过50秒的收敛时间，可以直接切换到替换端口或备份端口，从而实现RSTP的小于1秒的快速收敛。</p>
</li>
</ul>
<h3 id="6-2-实验"><a href="#6-2-实验" class="headerlink" title="6.2 实验"></a>6.2 实验</h3><ul>
<li>二层交换机2960两台</li>
<li>PC机两台</li>
<li>直连线连接（二层交换机之间连两次）</li>
<li>设置PC机 IP 地址</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230809020343067.png" alt="image-20230809020343067" style="zoom:67%;" /> 

<ul>
<li><p>二层交换机配置</p>
<ul>
<li>划分vlan10进对应端口</li>
<li>把汇聚端口的一组端口，设置为trunk模式</li>
<li>打开spanning-tree的RSTP协议</li>
<li>查看spanning-tree状态</li>
</ul>
<p>两台二层交换机一样的设置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Switch&gt;en</span><br><span class="line">Switch#conf t</span><br><span class="line">Enter configuration commands, one per line.  End with CNTL/Z.</span><br><span class="line">Switch(config)#int fa 0/10</span><br><span class="line">Switch(config-if)#switchport access vlan 10</span><br><span class="line">% Access VLAN does not exist. Creating vlan 10</span><br><span class="line">Switch(config-if)#exit</span><br><span class="line">Switch(config)#int range fa 0/1 - 2</span><br><span class="line">Switch(config-if-range)#switchport mode trunk</span><br><span class="line">Switch(config-if-range)#exit</span><br><span class="line">Switch(config)#spanning-tree mode rapid-pvst </span><br><span class="line">Switch(config)#end</span><br><span class="line">Switch#show spanning-tree </span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230809020226590.png" alt="image-20230809020226590" style="zoom:50%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230809020325914.png" alt="image-20230809020325914" style="zoom:50%;" /></p>
</li>
</ul>
<h3 id="6-3-测试"><a href="#6-3-测试" class="headerlink" title="6.3 测试"></a>6.3 测试</h3><ul>
<li><p>可以看到上面的spanning-tree的状态</p>
<p>目前是S0的Fa 0&#x2F;2是Block堵塞状态，所以说，并不会出现环路，网络通信正常。</p>
</li>
<li><p>我们让PC0去不停的ping PC1</p>
<p>在此期间，把S1原来用来通信的fa 0&#x2F;1给关闭shutdown，</p>
<p>那么S1只能使用fa 0&#x2F;2通信了，而对应的S0必须把原来堵塞的fa 0&#x2F;2给打开。</p>
<p>我们测试一下，看看是不是很快就会自动打开了</p>
<p>（通过看PC0 不停ping PC1的过程中，有没有丢包）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># PC0打开cmd</span><br><span class="line">C:\&gt;ping -t 192.168.1.2</span><br><span class="line"></span><br><span class="line"># 然后S1断开fa 0/1</span><br><span class="line">Switch#conf t</span><br><span class="line">Switch(config)#int fa 0/1</span><br><span class="line">Switch(config-if)#shutdown</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230809020946725.png" alt="image-20230809020946725" style="zoom:67%;" /> 
</li>
<li><p>可以看到，整个过程中，都没有丢包。</p>
<p>在拓扑图也可以发现，S0与S1之间的路线变了（绿色、红色点变了），说明确实更换了路线。</p>
<p>可见，快速生成树协议切换速度很快，快到甚至不会丢包（小于1秒）。</p>
</li>
</ul>
<h2 id="第七章、路由器的基本配置"><a href="#第七章、路由器的基本配置" class="headerlink" title="第七章、路由器的基本配置"></a>第七章、路由器的基本配置</h2><h3 id="7-1-原理"><a href="#7-1-原理" class="headerlink" title="7.1 原理"></a>7.1 原理</h3><ul>
<li><p>管理，与交换机一样</p>
<ul>
<li>带内管理，Console 端口</li>
<li>带外管理，telent 远程连接</li>
</ul>
</li>
<li><p>路由器与三层交换机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">三层交换机配置端口IP：创建vlan，划分端口进vlan，再进入int vlan配置网关IP，开启端口</span><br><span class="line">（且需要ip routing 命令打开三层交换机的路由功能）</span><br><span class="line">ip routing</span><br><span class="line">vlan 10</span><br><span class="line">exit</span><br><span class="line">int fa 0/1</span><br><span class="line">switch access vlan 10</span><br><span class="line">exit</span><br><span class="line">int vlan 10</span><br><span class="line">ip address 192.168.1.1 255.255.255.0</span><br><span class="line">no shutdown</span><br><span class="line"></span><br><span class="line">路由器配置端口IP：直接进入对应端口，开启物理端口，配置端口IP作为网关</span><br><span class="line">int fa 0/0</span><br><span class="line">no shutdown</span><br><span class="line">ip address 192.168.1.1 255.255.255.0</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="路由器命令行模式"><a href="#路由器命令行模式" class="headerlink" title="路由器命令行模式"></a>路由器命令行模式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 与交换机一样</span><br><span class="line"># 还有</span><br><span class="line">router rip				配置RIP协议信息</span><br><span class="line">router ospf				配置OSPF协议信息</span><br><span class="line">show ip route			查看路由信息（#下）</span><br><span class="line">show ip protocols		查看路由协议（#下）</span><br></pre></td></tr></table></figure>

<h3 id="7-2-实验"><a href="#7-2-实验" class="headerlink" title="7.2 实验"></a>7.2 实验</h3><ul>
<li><p>路由器2811一台</p>
</li>
<li><p>PC机一台</p>
</li>
<li><p>console线（蓝色线）连接PC-RS232口、路由器-console口</p>
</li>
<li><p>交叉线（黑色虚线）连接PC-fa口、路由器fa口</p>
<blockquote>
<ul>
<li><p>PC机与交换机直接相连，是用直连线（黑色实线）</p>
</li>
<li><p>PC机与路由器直接相连，是用交叉线（黑色虚线）</p>
</li>
</ul>
</blockquote>
</li>
<li><p>设置PC机IP配置</p>
<p>IPv4：192.168.1.2</p>
<p>子网掩码：255.255.255.0</p>
<p>网关：192.168.1.1</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230809131005748.png" alt="image-20230809131005748" style="zoom:67%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230809131026999.png" alt="image-20230809131026999" style="zoom:67%;" /> </p>
<ul>
<li><p>路由器配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Router&gt;en</span><br><span class="line">Router#conf t</span><br><span class="line">Enter configuration commands, one per line.  End with CNTL/Z.</span><br><span class="line">Router(config)#int fa 0/0</span><br><span class="line">Router(config-if)#ip address 192.168.1.1 255.255.255.0</span><br><span class="line">Router(config-if)#no shutdown </span><br><span class="line"></span><br><span class="line">查看配置情况</span><br><span class="line">Router(config-if)#end</span><br><span class="line">Router#show running-config </span><br><span class="line">看到有以下的内容即可</span><br><span class="line">interface FastEthernet0/0</span><br><span class="line"> ip address 192.168.1.1 255.255.255.0</span><br><span class="line"> duplex auto</span><br><span class="line"> speed auto</span><br><span class="line"> </span><br><span class="line">配置远程登录密码</span><br><span class="line">Router#conf t</span><br><span class="line">Enter configuration commands, one per line.  End with CNTL/Z.</span><br><span class="line">Router(config)#enable password 123456	设置特权模式密码</span><br><span class="line">Router(config)#line vty 0 4				设置远程登录密码</span><br><span class="line">Router(config-line)#password 123abc</span><br><span class="line">Router(config-line)#login</span><br><span class="line">Router(config-line)#exit</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="7-3-测试"><a href="#7-3-测试" class="headerlink" title="7.3 测试"></a>7.3 测试</h3><ul>
<li><p>可以把console线（蓝色）取消了</p>
</li>
<li><p>先在PC机cmd窗口ping网关192.168.1.1</p>
<p>能ping通</p>
</li>
<li><p>再尝试远程登陆路由器</p>
<p>telent 192.168.1.1</p>
<p>登陆密码是刚刚设置的123abc</p>
<p>特权模式密码是刚刚设置的123456</p>
</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230809132109645.png" alt="image-20230809132109645" style="zoom:67%;" /> 



<h2 id="第八章、路由器单臂路由"><a href="#第八章、路由器单臂路由" class="headerlink" title="第八章、路由器单臂路由"></a>第八章、路由器单臂路由</h2><h3 id="8-1-原理"><a href="#8-1-原理" class="headerlink" title="8.1 原理"></a>8.1 原理</h3><ul>
<li><p>效果：可以实现原来不同VLAN之间的互联互通。</p>
</li>
<li><p>单臂路由（router-on-a-stick）</p>
<p>是指在路由器的一个接口上通过配置子接口（或“逻辑接口”，并不存在真正物理接口）的方式，实现原来相互隔离的不同VLAN之间的互联互通。</p>
</li>
<li><p>单臂路由子接口</p>
<p>路由器的物理接口可以被划分成多个<strong>逻辑接口</strong>，这些被划分后的逻辑接口被形象的称为<strong>子接口</strong>。值得注意的是这些逻辑子接口不能被单独的开启或关闭，也就是说，当物理接口被开启或关闭时，所有的该接口的子接口也随之被开启或关闭。</p>
</li>
<li><p>其实本质上，和前面的第五章原理类似</p>
<p>第五章是三层交换机的vlan间通信，通过虚拟接口SVI实现。</p>
<p>这里是路由器的vlan间通信，通过单臂路由实现。</p>
<p>两者都是通过第三层网络层实现的，只是实现细节不同，前面是通过vlan出现虚拟端口，这里是.1.2实现子端口。</p>
</li>
</ul>
<h3 id="8-2-实验"><a href="#8-2-实验" class="headerlink" title="8.2 实验"></a>8.2 实验</h3><ul>
<li><p>路由器2811一台</p>
</li>
<li><p>二层交换机2960一台</p>
</li>
<li><p>PC机两台</p>
</li>
<li><p>直连线连接PC机、二层交换机</p>
</li>
<li><p>交叉线连接二层交换机、路由器</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230809170922603.png" alt="image-20230809170922603" style="zoom: 67%;" /> 
</li>
<li><p>配置主机的IP</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230809165608173.png" alt="image-20230809165608173" style="zoom: 67%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230809165640405.png" alt="image-20230809165640405" style="zoom:67%;" /></p>
</li>
<li><p>二层交换机划分vlan、设置trunk</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Switch&gt;en</span><br><span class="line">Switch#conf t</span><br><span class="line">Enter configuration commands, one per line.  End with CNTL/Z.</span><br><span class="line">Switch(config)#vlan 10</span><br><span class="line">Switch(config-vlan)#exit</span><br><span class="line">Switch(config)#vlan 20</span><br><span class="line">Switch(config-vlan)#exit</span><br><span class="line">Switch(config)#int fa 0/2</span><br><span class="line">Switch(config-if)#switchport access vlan 10</span><br><span class="line">Switch(config-if)#exit</span><br><span class="line">Switch(config)#int fa 0/3</span><br><span class="line">Switch(config-if)#switchport access vlan 20</span><br><span class="line">Switch(config-if)#exit</span><br><span class="line">Switch(config)#int fa 0/1</span><br><span class="line">Switch(config-if)#switchport mode trunk </span><br><span class="line">Switch(config-if)#exit</span><br><span class="line">Switch(config)#end</span><br><span class="line"></span><br><span class="line">Switch#show running-config </span><br></pre></td></tr></table></figure>
</li>
<li><p>路由器开启物理端口，打开子端口、封装协议、配置 IP</p>
<blockquote>
<p>这里是进行vlan间路由的，所以打开子端口设置IP，</p>
<p>实际上，本身可以直接对 <code>int fa 0/0</code>进行<code>ip address</code>设置的。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Router&gt;en</span><br><span class="line">Router#conf t</span><br><span class="line">Router(config)#int fa 0/0</span><br><span class="line">Router(config-if)#no shutdown </span><br><span class="line">Router(config-if)#exit</span><br><span class="line">Router(config)#int fa 0/0.1</span><br><span class="line">Router(config-subif)#encapsulation dot1Q 10</span><br><span class="line">Router(config-subif)#ip address 192.168.1.1 255.255.255.0</span><br><span class="line">Router(config-subif)#exit</span><br><span class="line">Router(config)#int fa 0/0.2</span><br><span class="line">Router(config-subif)#encapsulation dot1Q 20</span><br><span class="line">Router(config-subif)#ip address 192.168.2.1 255.255.255.0</span><br><span class="line">Router(config-subif)#exit</span><br><span class="line">Router(config)#end</span><br><span class="line">查看配置</span><br><span class="line">Router#show running-config </span><br><span class="line">看到有下面的内容就可以了</span><br><span class="line">interface FastEthernet0/0</span><br><span class="line"> no ip address</span><br><span class="line"> duplex auto</span><br><span class="line"> speed auto</span><br><span class="line">!</span><br><span class="line">interface FastEthernet0/0.1</span><br><span class="line"> encapsulation dot1Q 10</span><br><span class="line"> ip address 192.168.1.1 255.255.255.0</span><br><span class="line">!</span><br><span class="line">interface FastEthernet0/0.2</span><br><span class="line"> encapsulation dot1Q 20</span><br><span class="line"> ip address 192.168.2.1 255.255.255.0</span><br><span class="line">!</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="8-3-测试"><a href="#8-3-测试" class="headerlink" title="8.3 测试"></a>8.3 测试</h3><ul>
<li><p>测试两个PC机相互ping，均能通。</p>
<p>我们先ping了网关，然后ping对方主机，发现ping对方主机的第一次是丢包的。</p>
<p>这是正常的，因为第一次路由器的路由表中还没有记录去往对方主机的路由，会丢包。</p>
<p>而之后PC1再来ping PC0时，为什么没有丢包呢？因为路由器在前面已经记录了路由，会自动学习。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230809171054136.png" alt="image-20230809171054136" style="zoom: 67%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230809171130835.png" alt="image-20230809171130835" style="zoom:67%;" /></p>
</li>
</ul>
<h2 id="第九章、路由器静态路由"><a href="#第九章、路由器静态路由" class="headerlink" title="第九章、路由器静态路由"></a>第九章、路由器静态路由</h2><blockquote>
<p>详细来源：<a href="https://blog.csdn.net/weixin_42857944/article/details/128247989">静态路由（Static Routing）</a></p>
</blockquote>
<h3 id="9-1-原理"><a href="#9-1-原理" class="headerlink" title="9.1 原理"></a>9.1 原理</h3><ul>
<li><p>路由表的形成</p>
<ul>
<li><p>直连路由</p>
<p>本地接口配置IP地址和子网掩码，端口开启后，形成的路由</p>
</li>
<li><p>非直连路由</p>
<p>不是本地接口配置IP地址和子网掩码，接口开启后，形成的路由</p>
<p><strong>对于非直连路由的学习，有两种方式：</strong></p>
<ul>
<li>静态路由（管理员手动添加）</li>
<li>动态路由（路由器通过路由协议自动学习）</li>
</ul>
</li>
</ul>
</li>
<li><p>静态路由的特点<br>管理员添加的路由的传输方向是单向的</p>
<ul>
<li><p>优点：配置灵活，管理员手工配置，节省链路开销</p>
</li>
<li><p>缺点：当拓扑发生改变时，需要管理员去每台路由器上修改路由配置</p>
</li>
</ul>
<p>建议五条以内的非直连路由用静态路由协议，五条以上的用动态路由协议<br>静态路由协议只能用于小规模的企业网络，大型企业网络用的是动态路由协议</p>
</li>
</ul>
<h4 id="案例剖析"><a href="#案例剖析" class="headerlink" title="案例剖析"></a>案例剖析</h4><blockquote>
<h5 id="案例1-静态路由配置"><a href="#案例1-静态路由配置" class="headerlink" title="案例1(静态路由配置)"></a>案例1(静态路由配置)</h5><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230809180642495.png" alt="image-20230809180642495" style="zoom: 67%;" /> 

<p> 图中，路由器R1和R2通过接口0和接口1所配置的IP地址和子网掩码，可自动得到每个接口所在的网络。同时，接口与网络直连，属于直接交付。R1，R2最基本的路由表如下表所示。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230809180709479.png" alt="image-20230809180709479" style="zoom:67%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230809180722817.png" alt="image-20230809180722817" style="zoom:67%;" /> </p>
<p>假设网络子网1中的主机A向子网3中的主机B发送数据报，从图中可以看出，数据报的转发顺序为：主机AR1接口0  R1接口1  R2接口0  R2接口1 主机B。</p>
<p>可是R1 现有的路由表中并没有关于子网3的路由条目，即R1并不知道目的网络的存在。因此，我们可以给路由器R1添加一条到达子网3的路由条目，如下表所示。</p>
<p>这样，子网1中的主机就可以将数据报发送至子网3的主机。</p>
<p>同理，若想子网3中的主机能向子网1中的主机发送数据报，则路由器R2的路由表应配置为如下所示。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230809180827358.png" alt="image-20230809180827358" style="zoom:67%;" />     <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230809180858227.png" alt="image-20230809180858227" style="zoom:67%;" /> </p>
<h5 id="案例2-默认路由配置"><a href="#案例2-默认路由配置" class="headerlink" title="案例2(默认路由配置)"></a>案例2(默认路由配置)</h5><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230809181104776.png" alt="image-20230809181104776" style="zoom:67%;" /> 

<p>假设子网1中的主机A向因特网发送数据报，从图中可以看出，数据报的转发顺序为：主机AR1接口0  R1接口1  R2接口0  R2接口3 因特网的某个主机。</p>
<p>正如案例1中总结，如果我们在路由器R1中逐个添加通往因特网的路由条目，一方面不符合实际需求，另一方面会使得路由器的路由表非常庞大，降低查表转发速度，因此我们可以通过添加默认路由解决这一问题。</p>
<p>默认路由条目用于替代具有相同下一跳的不同目的网络的路由条目，默认路由条目的目的网络为0.0.0.0，地址掩码为0.0.0.0，因此R1的路由表可配置为如下所示。</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230809181142879.png" alt="image-20230809181142879" style="zoom:67%;" /> 

<blockquote>
<ul>
<li><p>我们可以发现如果我们从子网1发送数据报到子网3，数据报既可以走目的网络为192.168.2.0&#x2F;24的路由条目，也可以走目的网络为0.0.0.0&#x2F;0的默认路由条目，那数据报到底会走哪一条路由条目呢？</p>
<p>由于192.168.2.0&#x2F;24的网络前缀更长，所以路由也就更具体。而默认路由的网络前缀较短，路由也就更模糊， 因此当路由器查表转发IP数据报时，若有多条路由条目可选，通常会采用<strong>最长前缀匹配原则</strong>，选择目的网络前缀最长的那条路由条目进行转发 。所以如果子网1的主机向子网3的主机发送数据报，<strong>会走192.168.2.0&#x2F;24</strong>这一路由条目。</p>
</li>
<li><p>路由环路问题的解决方案？</p>
<ul>
<li><p><strong>静态路由配置错误</strong></p>
<p>为了防止IP数据报在路由环路中永久兜圈，在 IP数据报首部中设置了生存时间TTL字段，数据报每进入一个路由器，TTL字段的值便会减1，若TTL的值不为0，则路由器继续转发该IP数据报，否则便丢弃这个IP数据报。</p>
</li>
<li><p><strong>聚合了不存在网络</strong></p>
<p>所谓聚合网络，就是将若干个网络的共同前缀保持不变，其余位取0，同时将相同前缀的个数写在斜线后面，如下图所示。</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230809181711255.png" alt="image-20230809181711255" style="zoom:50%;" /> 

<p>我们可以在路由表中用192.168.0.0&#x2F;22表示192.168.0.0&#x2F;24，192.168.1.0&#x2F;24，192.168.2.0&#x2F;24以及192.168.3.0&#x2F;24四个网络。</p>
<p>我们可以在路由表中针对不存在的网络添加黑洞路由来解决上述问题，黑洞路由的下一跳为null0，这是路由器内部的虚拟接口，IP数据报进入后便会被自动丢弃。 我们可以将路由器R2的路由表设置为如下所示：</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230809181819953.png" alt="image-20230809181819953" style="zoom: 67%;" /> 

<p> 若按上表配置，当路由器R2向一个不存在的子网(192.168.3.0&#x2F;24)发送数据报，路由器会根据最长前缀匹配原则选择目的网络为192.168.3.0&#x2F;24的路由条目，该条目的下一跳为虚拟接口null0，这样，该IP数据报便会被快速丢弃。 </p>
</li>
<li><p><strong>网络故障</strong></p>
<p>我们可以针对故障的网络(192.168.1.0&#x2F;24)添加黑洞路由。经过一段时间后，路由器R1的0号接口网络恢复正常，R1又自动得到了192.168.1.0&#x2F;24的直连路由条目， 则我们先前设置的黑洞路由会自动失效。</p>
</li>
</ul>
</li>
</ul>
</blockquote>
</blockquote>
<h3 id="9-2-实验"><a href="#9-2-实验" class="headerlink" title="9.2 实验"></a>9.2 实验</h3><h4 id="搭建拓扑"><a href="#搭建拓扑" class="headerlink" title="搭建拓扑"></a>搭建拓扑</h4><ul>
<li>路由器Router-PT两台</li>
<li>二层交换机2960两台</li>
<li>PC机两台</li>
<li>直连线（黑色直线Copper Straight-Through）连接PC机、二层交换机（Fa口）</li>
<li>交叉线（黑色虚线Copper Cross-Over）连接二层交换机、路由器（Fa口）</li>
<li>串口线（红色带钟Serial DCE）连接两台路由器（Serial口）</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230809190642907.png" alt="image-20230809190642907" style="zoom:67%;" /> 

<h4 id="配置IP"><a href="#配置IP" class="headerlink" title="配置IP"></a>配置IP</h4><ul>
<li><p>配置主机IP</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230809184722567.png" alt="image-20230809184722567" style="zoom:67%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230809184748606.png" alt="image-20230809184748606" style="zoom:67%;" /> </p>
</li>
<li><p>二层交换机不用配置</p>
</li>
<li><p>路由器配置</p>
<p>开启fa端口，配置 IP</p>
<p>开启se端口，配置IP，设置时钟</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Router&gt;en</span><br><span class="line">Router#conf t</span><br><span class="line">Router(config)#int fa 0/0</span><br><span class="line">Router(config-if)#no shutdown</span><br><span class="line">Router(config-if)#ip address 192.168.1.1 255.255.255.0</span><br><span class="line">Router(config-if)#exit</span><br><span class="line">Router(config)#int se 2/0</span><br><span class="line">Router(config-if)#no shutdown</span><br><span class="line">Router(config-if)#ip address 192.168.3.1 255.255.255.0</span><br><span class="line">Router(config-if)#clock rate 64000</span><br><span class="line">Router(config-if)#exit</span><br><span class="line">Router(config)#end</span><br><span class="line"></span><br><span class="line">Router#show run</span><br><span class="line">看到有以下内容即可</span><br><span class="line">interface FastEthernet0/0</span><br><span class="line"> ip address 192.168.1.1 255.255.255.0</span><br><span class="line"> duplex auto</span><br><span class="line"> speed auto</span><br><span class="line">!</span><br><span class="line">interface FastEthernet1/0</span><br><span class="line"> no ip address</span><br><span class="line"> duplex auto</span><br><span class="line"> speed auto</span><br><span class="line"> shutdown</span><br><span class="line">!</span><br><span class="line">interface Serial2/0</span><br><span class="line"> ip address 192.168.3.1 255.255.255.0</span><br><span class="line"> clock rate 64000</span><br><span class="line">!</span><br><span class="line"></span><br><span class="line">另一台路由器看到的应该是</span><br><span class="line">interface FastEthernet0/0</span><br><span class="line"> ip address 192.168.2.1 255.255.255.0</span><br><span class="line"> duplex auto</span><br><span class="line"> speed auto</span><br><span class="line">!</span><br><span class="line">interface FastEthernet1/0</span><br><span class="line"> no ip address</span><br><span class="line"> duplex auto</span><br><span class="line"> speed auto</span><br><span class="line"> shutdown</span><br><span class="line">!</span><br><span class="line">interface Serial2/0</span><br><span class="line"> ip address 192.168.3.2 255.255.255.0</span><br><span class="line">!</span><br></pre></td></tr></table></figure>

<p>两台路由器都对应配置（IP写对）</p>
</li>
<li><p>可以先测试一下，两台PC机应该是无法通信的，</p>
<p>虽然路由器已经工作了，但是只知道自己两个端口的路由，并不知道非直连的路由，所以是无法通信的。</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230809185954270.png" alt="image-20230809185954270" style="zoom:67%;" /></li>
</ul>
<h4 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h4><ul>
<li><p>我们现在来把那个非直连路由，配置为静态路由，使其可以通信。</p>
<p>将去往非直连网段的路由配置下一跳为对方路由器的直连接口IP</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">路由器0</span><br><span class="line">Router(config)#ip route 192.168.2.0 255.255.255.0 192.168.3.2</span><br><span class="line">可以查看</span><br><span class="line">Router#show ip route</span><br><span class="line">有下面的内容即可</span><br><span class="line">C    192.168.1.0/24 is directly connected, FastEthernet0/0</span><br><span class="line">S    192.168.2.0/24 [1/0] via 192.168.3.2</span><br><span class="line">C    192.168.3.0/24 is directly connected, Serial2/0</span><br><span class="line"></span><br><span class="line">路由器1</span><br><span class="line">Router(config)#ip route 192.168.1.0 255.255.255.0 192.168.3.1</span><br><span class="line">可以查看</span><br><span class="line">Router#show ip route</span><br><span class="line">有下面的内容即可</span><br><span class="line">S    192.168.1.0/24 [1/0] via 192.168.3.1</span><br><span class="line">C    192.168.2.0/24 is directly connected, FastEthernet0/0</span><br><span class="line">C    192.168.3.0/24 is directly connected, Serial2/0</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="9-3-测试"><a href="#9-3-测试" class="headerlink" title="9.3 测试"></a>9.3 测试</h3><ul>
<li><p>之前测试ping并不能通信，现在重新ping，能正常通信</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230809190610900.png" alt="image-20230809190610900" style="zoom:67%;" /></li>
</ul>
<h2 id="第十章、路由器RIP动态路由"><a href="#第十章、路由器RIP动态路由" class="headerlink" title="第十章、路由器RIP动态路由"></a>第十章、路由器RIP动态路由</h2><h3 id="10-1-原理"><a href="#10-1-原理" class="headerlink" title="10.1 原理"></a>10.1 原理</h3><ul>
<li><p><strong>路由协议分类</strong></p>
<ul>
<li><p>内部网关协议 IGP</p>
<p>RIP、EIGRP（距离矢量路由协议）</p>
<p>OSPF、IS-IS（链路状态路由协议）</p>
</li>
<li><p>外部网关协议 EGP</p>
<p>BGP</p>
</li>
</ul>
</li>
<li><p><strong>RIP协议</strong><br>RIP是Routing Information Protocol（路由信息）的简称，它是一种较为简单的内部网关路由协议（Interior Gateay Protocol），是内部网关协议IGP中最先得到广泛使用的协议。RIP是基于距离矢量的路由选择协议，是因特网标准协议，其最大优点就是实现简单，开销较小，适用于网络拓扑较小的环境。</p>
<ul>
<li><p>具体原理</p>
<p>RIP是一种基于距离矢量（Distance-Vector）算法的协议，每30秒 会与相邻的路由器交换路由信息，以动态建立路由表。<br>它使用跳数（Hop Count）作为度量值来衡量达到目的的地址的距离（最大跳数15跳）。设备到与它直连网络的设备跳数为0，然后每经过一 个三层设备跳数增加1。也就是说通过一个3层设备到达的网络的跳数 为1。度量值等于从本网络到达目的网络间的设备数据量。为限制收敛 时间，RIP规定度量值取1~15之间的整数，大于或等于16的跳数（也 就是3层设备数量）被定义为无穷大，即目的网络或主机不可达。也就 是说最大跳数15跳所以流量只能经过15个3层设备，16跳第16个3 层设备为不可达。</p>
</li>
<li><p>版本</p>
<p>RIP包含RIP-v1、RIP-v2、RIPng三个版本，RIP-2对RIP-1进行了扩充，使其更具有优势，RIP-1和IPR-2应用在IPV4环境中，RIPng 则应用在IPV6环境中。</p>
<p>RIPv1是有类路由协议，RIPv2是无类路由协议，即RIPv2的报文中含有掩码信息。</p>
</li>
<li><p>优点</p>
<p>配置实现简单、开销较小、问题定位快、适用于网络规模小的环境。</p>
</li>
<li><p>缺点</p>
<p>本身的度量值限制了网络规模、交换完整的路由信息随着网络规模的扩大开销也叫增加了、坏消息传播的慢使更新过程收敛时间较长。</p>
</li>
</ul>
</li>
<li><p><strong>路由表标志</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">R：表示RIP路由协议</span><br><span class="line">C：直连网段路由</span><br><span class="line">S：静态路由</span><br><span class="line">B：BGP路由协议</span><br><span class="line">D：EIGRP路由协议</span><br><span class="line">O：OSPF</span><br><span class="line">N1：为OSPF的宣告类型1</span><br><span class="line">N2：为OSPF的宣告类型2</span><br><span class="line">E1：为OSPF的内部路由</span><br><span class="line">E2：为OSPF的外部路由</span><br><span class="line">i：为IS-IS路由协议</span><br><span class="line">L1：为IS-IS的类型1路由协议</span><br></pre></td></tr></table></figure>

<p>例：C 192.168.4.0&#x2F;24 is directly connected, FastEthernet3&#x2F;0<br>该字段中的C表示直连网段，192.168.4.0&#x2F;24表示目标网段，FastEthernet3&#x2F;0表示下一跳接口。<br>例：R 192.168.1.0&#x2F;24 [120&#x2F;3] via 192.168.4.1, 00:00:02,FastEthernet3&#x2F;0<br>该字段中R表示使用的是RIP路由协议，192.168.1.0&#x2F;24表示达到 的目标网段，120表示为RIP协议的优先级，3达到目标网络的跳数（也就是需要经过3个路由器），FastEthernet3&#x2F;0表示下一跳接口地址。</p>
</li>
</ul>
<h3 id="10-2-实验"><a href="#10-2-实验" class="headerlink" title="10.2 实验"></a>10.2 实验</h3><h4 id="搭建拓扑-1"><a href="#搭建拓扑-1" class="headerlink" title="搭建拓扑"></a>搭建拓扑</h4><ul>
<li>PC机两台</li>
<li>三层交换机3560 一台</li>
<li>路由器Router-PT 两台</li>
<li>直连线连接PC机、交换机</li>
<li>交叉线连接交换机、路由器</li>
<li>交叉线连接主机、交换机</li>
<li>串口线连接路由器、路由器</li>
</ul>
<blockquote>
<ul>
<li><p>主机与交换机之间、交换机与交换机之间的连接用直连线Copper Straight-Through</p>
<p>（二层交换机、三层交换机均属于交换机）</p>
</li>
<li><p>主机或交换机连接到 路由器 时，采用交叉线Copper Cross-Over</p>
</li>
<li><p>路由器之间的连接，采用串口线Serial DCE</p>
</li>
</ul>
</blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230810023500985.png" alt="image-20230810023500985" style="zoom:67%;" /> 

<h4 id="配置IP、路由"><a href="#配置IP、路由" class="headerlink" title="配置IP、路由"></a>配置IP、路由</h4><ul>
<li>按照图示配置PC机IP</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230810015207538.png" alt="image-20230810015207538" style="zoom:67%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230810015233238.png" alt="image-20230810015233238" style="zoom:67%;" /> </p>
<ul>
<li><p>三层交换机</p>
<p>（1）开启路由功能；创建vlan，划分端口进vlan，配置vlan的IP，开启；</p>
<p>（2）开启RIP协议，写入直连网段，版本为2，开启；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）配置IP信息</span><br><span class="line">Switch&gt;en</span><br><span class="line">Switch#conf t</span><br><span class="line">Switch(config)#ip routing</span><br><span class="line">Switch(config)#vlan 10</span><br><span class="line">Switch(config-vlan)#exit</span><br><span class="line">Switch(config)#vlan 20</span><br><span class="line">Switch(config-vlan)#exit</span><br><span class="line">Switch(config)#int fa 0/1</span><br><span class="line">Switch(config-if)#switchport access vlan 10</span><br><span class="line">Switch(config-if)#exit</span><br><span class="line">Switch(config)#int fa 0/2</span><br><span class="line">Switch(config-if)#switchport access vlan 20</span><br><span class="line">Switch(config-if)#exit</span><br><span class="line">Switch(config)#int vlan 10</span><br><span class="line">Switch(config-if)#ip address 192.168.1.1 255.255.255.0</span><br><span class="line">Switch(config-if)#no shutdown </span><br><span class="line">Switch(config-if)#exit</span><br><span class="line">Switch(config)#int vlan 20</span><br><span class="line">Switch(config-if)#ip address 192.168.2.1 255.255.255.0</span><br><span class="line">Switch(config-if)#no shutdown </span><br><span class="line">Switch(config-if)#exit</span><br><span class="line">Switch(config)#end</span><br><span class="line">查看配置信息</span><br><span class="line">Switch#show running-config </span><br><span class="line">可以看到以下内容</span><br><span class="line">!</span><br><span class="line">interface FastEthernet0/1</span><br><span class="line"> switchport access vlan 10</span><br><span class="line">!</span><br><span class="line">interface FastEthernet0/2</span><br><span class="line"> switchport access vlan 20</span><br><span class="line">!</span><br><span class="line">...</span><br><span class="line">!</span><br><span class="line">interface Vlan1</span><br><span class="line"> no ip address</span><br><span class="line"> shutdown</span><br><span class="line">!</span><br><span class="line">interface Vlan10</span><br><span class="line"> mac-address 0003.e414.5101</span><br><span class="line"> ip address 192.168.1.1 255.255.255.0</span><br><span class="line">!</span><br><span class="line">interface Vlan20</span><br><span class="line"> mac-address 0003.e414.5102</span><br><span class="line"> ip address 192.168.2.1 255.255.255.0</span><br><span class="line">!</span><br><span class="line"></span><br><span class="line">（2）配置RIP协议</span><br><span class="line">Switch#conf t</span><br><span class="line">Switch(config)#router rip</span><br><span class="line">Switch(config-router)#network 192.168.1.0</span><br><span class="line">Switch(config-router)#network 192.168.2.0</span><br><span class="line">Switch(config-router)#version 2</span><br><span class="line">Switch(config-router)#end</span><br><span class="line">查看配置信息</span><br><span class="line">Switch#show running-config </span><br><span class="line">看到以下内容</span><br><span class="line">!</span><br><span class="line">router rip</span><br><span class="line"> version 2</span><br><span class="line"> network 192.168.1.0</span><br><span class="line"> network 192.168.2.0</span><br><span class="line">!</span><br></pre></td></tr></table></figure>
</li>
<li><p>路由器</p>
<p>开启fa端口，配置IP；</p>
<p>开启se端口，配置IP，配置时钟64000；</p>
<p>开启RIP协议，配置直连网段，版本为2；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）配置端口IP信息</span><br><span class="line">Router&gt;en</span><br><span class="line">Router#conf t</span><br><span class="line">Router(config)#int fa 0/0</span><br><span class="line">Router(config-if)#no shutdown </span><br><span class="line">Router(config-if)#ip address 192.168.2.2 255.255.255.0</span><br><span class="line">Router(config-if)#exit</span><br><span class="line">Router(config)#int se 2/0</span><br><span class="line">Router(config-if)#no shutdown </span><br><span class="line">Router(config-if)#clock rate 64000</span><br><span class="line">Router(config-if)#ip address 192.168.3.1 255.255.255.0</span><br><span class="line">Router(config-if)#exit</span><br><span class="line">Router(config)#end</span><br><span class="line"></span><br><span class="line">（2）配置RIP协议</span><br><span class="line">Router#conf t</span><br><span class="line">Router(config)#router rip</span><br><span class="line">Router(config-router)#version 2</span><br><span class="line">Router(config-router)#network 192.168.2.0</span><br><span class="line">Router(config-router)#network 192.168.3.0</span><br><span class="line">Router(config-router)#end</span><br><span class="line"></span><br><span class="line">查看配置信息</span><br><span class="line">Router#show running-config </span><br><span class="line">有以下内容即可</span><br><span class="line">!</span><br><span class="line">interface FastEthernet0/0</span><br><span class="line"> ip address 192.168.2.2 255.255.255.0</span><br><span class="line"> duplex auto</span><br><span class="line"> speed auto</span><br><span class="line">!</span><br><span class="line">interface FastEthernet1/0</span><br><span class="line"> no ip address</span><br><span class="line"> duplex auto</span><br><span class="line"> speed auto</span><br><span class="line"> shutdown</span><br><span class="line">!</span><br><span class="line">interface Serial2/0</span><br><span class="line"> ip address 192.168.3.1 255.255.255.0</span><br><span class="line"> clock rate 64000</span><br><span class="line">!</span><br><span class="line">interface Serial3/0</span><br><span class="line"> no ip address</span><br><span class="line"> shutdown</span><br><span class="line">!</span><br><span class="line">interface FastEthernet4/0</span><br><span class="line"> no ip address</span><br><span class="line"> shutdown</span><br><span class="line">!</span><br><span class="line">interface FastEthernet5/0</span><br><span class="line"> no ip address</span><br><span class="line"> shutdown</span><br><span class="line">!</span><br><span class="line">router rip</span><br><span class="line"> version 2</span><br><span class="line"> network 192.168.2.0</span><br><span class="line"> network 192.168.3.0</span><br><span class="line">!</span><br></pre></td></tr></table></figure>
</li>
<li><p>另一台路由器类似配置</p>
</li>
</ul>
<h3 id="10-3-测试"><a href="#10-3-测试" class="headerlink" title="10.3 测试"></a>10.3 测试</h3><ul>
<li><p>从PC0去ping PC1，能通。</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230810023355251.png" alt="image-20230810023355251" style="zoom:67%;" /></li>
</ul>
<h2 id="第十一章、路由器OSPF动态路由"><a href="#第十一章、路由器OSPF动态路由" class="headerlink" title="第十一章、路由器OSPF动态路由"></a>第十一章、路由器OSPF动态路由</h2><h3 id="11-1-原理"><a href="#11-1-原理" class="headerlink" title="11.1 原理"></a>11.1 原理</h3><blockquote>
<p>详细说明：<a href="https://www.bilibili.com/video/BV1vT411W7pC/">快速带你了解OSPF协议！</a></p>
</blockquote>
<ul>
<li><p>OSPF（Open Shortest Path First，开放最短路径优先）</p>
<p>是IETF（Internet Engineering Task Force，互联网工程任务组）组织开发的一个基于链路状态的内部网关协议。目前针对IPv4协议使用的是OSPF Version 2。下文中所提到的OSPF均指OSPF Version 2。</p>
</li>
<li><p>工作过程</p>
<p>由邻居信息构建网络拓扑图</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">R1邻居：R2 R4</span><br><span class="line">R2邻居：R1 R3</span><br><span class="line">R3邻居：R2 R4</span><br><span class="line">R4邻居：R1 R3</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230810130755714.png" alt="image-20230810130755714" style="zoom:50%;" /> 

<p>通过拓扑图计算开销</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230810130936466.png" alt="image-20230810130936466" style="zoom: 50%;" /> 
</li>
<li><p>工作进程</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230810130549810.png" alt="image-20230810130549810" style="zoom: 33%;" /></li>
</ul>
<h3 id="11-2-实验"><a href="#11-2-实验" class="headerlink" title="11.2 实验"></a>11.2 实验</h3><h4 id="搭建拓扑-2"><a href="#搭建拓扑-2" class="headerlink" title="搭建拓扑"></a>搭建拓扑</h4><ul>
<li>PC机 两台</li>
<li>三层交换机3560 一台</li>
<li>路由器Router-PT 两台</li>
<li>按要求连线</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230810140927339.png" alt="image-20230810140927339" style="zoom:67%;" /> 

<h4 id="配置IP、路由-1"><a href="#配置IP、路由-1" class="headerlink" title="配置IP、路由"></a>配置IP、路由</h4><ul>
<li>PC机配置IP</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230810134049540.png" alt="image-20230810134049540" style="zoom:67%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230810134116402.png" alt="image-20230810134116402" style="zoom:67%;" /> </p>
<ul>
<li><p>三层交换机配置</p>
<p>创建vlan，划分vlan，配置vlan的IP，开启；</p>
<p><strong>开启路由模块</strong>，配置ospf 协议，写入直连网段（网段、反掩码、区域）；</p>
<blockquote>
<p>记住！三层交换机，再配置ospf 功能前，必须先开启路由模块<code>ip routing</code>！！</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）配置vlan和IP</span><br><span class="line">Switch&gt;en</span><br><span class="line">Switch#conf t</span><br><span class="line">Switch(config)#vlan 10</span><br><span class="line">Switch(config-vlan)#exit</span><br><span class="line">Switch(config)#vlan 20</span><br><span class="line">Switch(config-vlan)#exit</span><br><span class="line">Switch(config)#int fa 0/1</span><br><span class="line">Switch(config-if)#switchport access vlan 10</span><br><span class="line">Switch(config-if)#exit</span><br><span class="line">Switch(config)#int fa 0/2</span><br><span class="line">Switch(config-if)#switchport access vlan 20</span><br><span class="line">Switch(config-if)#exit</span><br><span class="line">Switch(config)#int vlan 10</span><br><span class="line">Switch(config-if)#ip address 192.168.1.1 255.255.255.0</span><br><span class="line">Switch(config-if)#no shutdown </span><br><span class="line">Switch(config-if)#exit</span><br><span class="line">Switch(config)#int vlan 20</span><br><span class="line">Switch(config-if)#ip address 192.168.2.1 255.255.255.0</span><br><span class="line">Switch(config-if)#no shutdown </span><br><span class="line">Switch(config-if)#exit</span><br><span class="line">Switch(config)#end</span><br><span class="line">查看配置</span><br><span class="line">Switch#show running-config </span><br><span class="line">看到以下内容即为正确</span><br><span class="line">!</span><br><span class="line">interface FastEthernet0/1</span><br><span class="line"> switchport access vlan 10</span><br><span class="line">!</span><br><span class="line">interface FastEthernet0/2</span><br><span class="line"> switchport access vlan 20</span><br><span class="line">!</span><br><span class="line">...</span><br><span class="line">!</span><br><span class="line">interface Vlan1</span><br><span class="line"> no ip address</span><br><span class="line"> shutdown</span><br><span class="line">!</span><br><span class="line">interface Vlan10</span><br><span class="line"> mac-address 0001.6347.2d01</span><br><span class="line"> ip address 192.168.1.1 255.255.255.0</span><br><span class="line">!</span><br><span class="line">interface Vlan20</span><br><span class="line"> mac-address 0001.6347.2d02</span><br><span class="line"> ip address 192.168.2.1 255.255.255.0</span><br><span class="line">!</span><br><span class="line"></span><br><span class="line">（2）配置ospf 协议</span><br><span class="line">Switch#conf t</span><br><span class="line">Enter configuration commands, one per line.  End with CNTL/Z.</span><br><span class="line">Switch(config)#ip routing		注意这里！！！先开启路由模块！</span><br><span class="line">Switch(config)#router ospf 1	这里的1意思是本地进程号是1</span><br><span class="line">Switch(config-router)#network 192.168.1.0 0.0.0.255 area 0</span><br><span class="line">Switch(config-router)#network 192.168.2.0 0.0.0.255 area 0</span><br><span class="line">Switch(config-router)#exit</span><br><span class="line">Switch(config)#end</span><br><span class="line">查看配置信息</span><br><span class="line">Switch#show ip protocols </span><br><span class="line">有以下内容即可</span><br><span class="line">Routing Protocol is &quot;ospf 1&quot;</span><br><span class="line">  Outgoing update filter list for all interfaces is not set </span><br><span class="line">  Incoming update filter list for all interfaces is not set </span><br><span class="line">  Router ID 192.168.2.1</span><br><span class="line">  Number of areas in this router is 1. 1 normal 0 stub 0 nssa</span><br><span class="line">  Maximum path: 4</span><br><span class="line">  Routing for Networks:</span><br><span class="line">    192.168.1.0 0.0.0.255 area 0</span><br><span class="line">    192.168.2.0 0.0.0.255 area 0</span><br><span class="line">  Routing Information Sources:  </span><br><span class="line">    Gateway         Distance      Last Update </span><br><span class="line">    192.168.2.1          110      00:00:42</span><br><span class="line">  Distance: (default is 110)</span><br></pre></td></tr></table></figure>
</li>
<li><p>路由器</p>
<p>配置端口IP，开启；</p>
<p>开启ospf 协议，写入直连网段（网段、反掩码、区域）；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）配置端口IP</span><br><span class="line">Router&gt;en</span><br><span class="line">Router#conf t</span><br><span class="line">Router(config)#int fa 0/0</span><br><span class="line">Router(config-if)#ip address 192.168.2.2 255.255.255.0</span><br><span class="line">Router(config-if)#no shutdown </span><br><span class="line">Router(config-if)#exit</span><br><span class="line">Router(config)#int se 2/0</span><br><span class="line">Router(config-if)#ip address 192.168.3.1 255.255.255.0</span><br><span class="line">Router(config-if)#no shutdown </span><br><span class="line">Router(config-if)#clock rate 64000</span><br><span class="line">Router(config-if)#exit</span><br><span class="line">Router(config)#end</span><br><span class="line">查看配置</span><br><span class="line">Router#show run</span><br><span class="line">看到以下内容即可</span><br><span class="line">interface FastEthernet0/0</span><br><span class="line"> ip address 192.168.2.2 255.255.255.0</span><br><span class="line"> duplex auto</span><br><span class="line"> speed auto</span><br><span class="line">!</span><br><span class="line">interface Serial2/0</span><br><span class="line"> ip address 192.168.3.1 255.255.255.0</span><br><span class="line"> clock rate 64000</span><br><span class="line">!</span><br><span class="line"></span><br><span class="line">（2）配置ospf 协议</span><br><span class="line">Router#conf t</span><br><span class="line">Router(config)#router ospf 1</span><br><span class="line">Router(config-router)#network 192.168.2.0 0.0.0.255 area 0</span><br><span class="line">Router(config-router)#network 192.168.3.0 0.0.0.255 area 0</span><br><span class="line">Router(config-router)#exit</span><br><span class="line">Router(config)#end</span><br><span class="line">查看配置信息</span><br><span class="line">Router#show ip protocols </span><br><span class="line">看到以下内容即可</span><br><span class="line">Routing Protocol is &quot;ospf 1&quot;</span><br><span class="line">  Outgoing update filter list for all interfaces is not set </span><br><span class="line">  Incoming update filter list for all interfaces is not set </span><br><span class="line">  Router ID 192.168.3.1</span><br><span class="line">  Number of areas in this router is 1. 1 normal 0 stub 0 nssa</span><br><span class="line">  Maximum path: 4</span><br><span class="line">  Routing for Networks:</span><br><span class="line">    192.168.2.0 0.0.0.255 area 0</span><br><span class="line">    192.168.3.0 0.0.0.255 area 0</span><br><span class="line">  Routing Information Sources:  </span><br><span class="line">    Gateway         Distance      Last Update </span><br><span class="line">    192.168.2.1          110      00:00:23</span><br><span class="line">    192.168.3.1          110      00:00:23</span><br><span class="line">  Distance: (default is 110)</span><br></pre></td></tr></table></figure>

<p>路由台路由器一样操作（不用设置时钟频率，因为不是DCE端）</p>
</li>
</ul>
<h3 id="11-3-测试"><a href="#11-3-测试" class="headerlink" title="11.3 测试"></a>11.3 测试</h3><ul>
<li><p>全部都设置好之后，打开最后一个路由器，查看路由表，会是如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Router#show ip route</span><br><span class="line">Codes: C - connected, S - static, I - IGRP, R - RIP, M - mobile, B - BGP</span><br><span class="line">       D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area</span><br><span class="line">       N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2</span><br><span class="line">       E1 - OSPF external type 1, E2 - OSPF external type 2, E - EGP</span><br><span class="line">       i - IS-IS, L1 - IS-IS level-1, L2 - IS-IS level-2, ia - IS-IS inter area</span><br><span class="line">       * - candidate default, U - per-user static route, o - ODR</span><br><span class="line">       P - periodic downloaded static route</span><br><span class="line"></span><br><span class="line">Gateway of last resort is not set</span><br><span class="line"></span><br><span class="line">O    192.168.1.0/24 [110/66] via 192.168.3.1, 00:00:14, Serial2/0</span><br><span class="line">O    192.168.2.0/24 [110/65] via 192.168.3.1, 00:00:14, Serial2/0</span><br><span class="line">C    192.168.3.0/24 is directly connected, Serial2/0</span><br><span class="line">C    192.168.4.0/24 is directly connected, FastEthernet0/0</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过PC机ping，发现能互通</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230810140830075.png" alt="image-20230810140830075" style="zoom:67%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230810140854624.png" alt="image-20230810140854624" style="zoom:67%;" /></p>
</li>
</ul>
<h2 id="第十二章、路由器综合路由"><a href="#第十二章、路由器综合路由" class="headerlink" title="第十二章、路由器综合路由"></a>第十二章、路由器综合路由</h2><h3 id="12-1-原理"><a href="#12-1-原理" class="headerlink" title="12.1 原理"></a>12.1 原理</h3><ul>
<li><p>路由重分布</p>
<p>为了在同一个网络中有效地支持多种路由协议，必须在不同的路由协议之间共享路由信息。在不同的路由协议之间交换路由信息的过程称为路由重分布，它将一种路由选择协议获悉的路由信息告知给另一种路由选择协议。</p>
<p>路由重分布为在同一个互连网络中高效地支持多种路由协议提供了可能，执行路由重分布的路由器被称为边界路由器，因为它们位于两个或多个自治系统的边界上。</p>
<ul>
<li>考虑的问题：<ol>
<li>路由反馈：双向重分布有可能把从一个自治系统学到的路由信息发送回该自治系统。</li>
<li>路由信息的兼容：不同路由协议的度量标准是不同的</li>
<li>收敛时间不一致</li>
</ol>
</li>
</ul>
</li>
<li><p>协议</p>
<ul>
<li>内部路由器：RIPv2协议</li>
<li>连接处路由器：一边RIPv2协议，一边OSPF协议，进行路由重分布</li>
<li>外部路由器：OSPF协议</li>
</ul>
</li>
<li><p>备注</p>
<ul>
<li><p>本身协议的开启，是软件实现的。</p>
<p>因此，开启的是什么协议，取决于你把这个网段写成了哪个协议里的直连网段。</p>
</li>
<li><p>同一个路由器可以同时开启多种协议。</p>
<p>进行路由重分布，就是进入一种协议后，把另一种协议的路由表重分布进来即可。</p>
</li>
</ul>
</li>
</ul>
<h3 id="12-2-实验"><a href="#12-2-实验" class="headerlink" title="12.2 实验"></a>12.2 实验</h3><h4 id="搭建拓扑-3"><a href="#搭建拓扑-3" class="headerlink" title="搭建拓扑"></a>搭建拓扑</h4><ul>
<li>PC机 两台</li>
<li>三层交换机3560 一台</li>
<li>路由器Router-PT 两台</li>
<li>连线</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230810161744306.png" alt="image-20230810161744306" style="zoom:67%;" /> 

<blockquote>
<p>说明一下：我们这里，是</p>
<ul>
<li>左侧作为内部，采用RIP协议</li>
<li>右侧作为外部，采用OSPF协议</li>
<li>以中间的R0作为分界线，R0同时配置RIP、OSPF协议，并进行路由重分布。</li>
</ul>
</blockquote>
<h4 id="配置IP、路由-2"><a href="#配置IP、路由-2" class="headerlink" title="配置IP、路由"></a>配置IP、路由</h4><ul>
<li>PC机配置IP</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230810151256124.png" alt="image-20230810151256124" style="zoom:67%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230810151326849.png" alt="image-20230810151326849" style="zoom:67%;" /> </p>
<ul>
<li><p>三层交换机</p>
<p>创建vlan，划分vlan端口，配置vlan的IP，开启；</p>
<p>开启路由模块，采用RIP协议，版本号2，写入直连网段；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）配置vlan的IP并开启</span><br><span class="line">Switch&gt;en</span><br><span class="line">Switch#conf t</span><br><span class="line">Switch(config)#vlan 2</span><br><span class="line">Switch(config-vlan)#exit</span><br><span class="line">Switch(config)#int fa 0/1</span><br><span class="line">Switch(config-if)#switchport access vlan 1</span><br><span class="line">Switch(config-if)#exit</span><br><span class="line">Switch(config)#int fa 0/2</span><br><span class="line">Switch(config-if)#switchport access vlan 2</span><br><span class="line">Switch(config-if)#exit</span><br><span class="line">Switch(config)#int vlan 1</span><br><span class="line">Switch(config-if)#ip address 192.168.1.1 255.255.255.0</span><br><span class="line">Switch(config-if)#no shutdown</span><br><span class="line">Switch(config-if)#exit</span><br><span class="line">Switch(config)#int vlan 2</span><br><span class="line">Switch(config-if)#ip address 192.168.2.1 255.255.255.0</span><br><span class="line">Switch(config-if)#no shutdown </span><br><span class="line">Switch(config-if)#exit</span><br><span class="line">Switch(config)#end</span><br><span class="line">查看配置信息</span><br><span class="line">Switch#show running-config </span><br><span class="line">看到以下内容即可</span><br><span class="line">!</span><br><span class="line">interface FastEthernet0/1</span><br><span class="line">!</span><br><span class="line">interface FastEthernet0/2</span><br><span class="line"> switchport access vlan 2</span><br><span class="line">!</span><br><span class="line">...</span><br><span class="line">!</span><br><span class="line">interface Vlan1</span><br><span class="line"> ip address 192.168.1.1 255.255.255.0</span><br><span class="line">!</span><br><span class="line">interface Vlan2</span><br><span class="line"> mac-address 0090.2b3a.7a01</span><br><span class="line"> ip address 192.168.2.1 255.255.255.0</span><br><span class="line"> </span><br><span class="line">（2）路由模块，RIP协议配置</span><br><span class="line">Switch#conf t</span><br><span class="line">Switch(config)#ip routing</span><br><span class="line">Switch(config)#router rip</span><br><span class="line">Switch(config-router)#version 2</span><br><span class="line">Switch(config-router)#network 192.168.1.0</span><br><span class="line">Switch(config-router)#network 192.168.2.0</span><br><span class="line">Switch(config-router)#exit</span><br><span class="line">Switch(config)#end</span><br><span class="line">查看配置信息</span><br><span class="line">Switch#show ip protocols </span><br><span class="line">看到以下内容即可</span><br><span class="line">Routing Protocol is &quot;rip&quot;</span><br><span class="line">...</span><br><span class="line">Routing for Networks:</span><br><span class="line">	192.168.1.0</span><br><span class="line">	192.168.2.0</span><br></pre></td></tr></table></figure>
</li>
<li><p>路由器R0（中间的路由器）</p>
<p>配置端口IP，开启（注意se有时钟频率设置）；</p>
<p>运行RIP协议，写入左边的网段<code>192.168.2.0</code>；</p>
<p>运行OSPF协议，写入右边的网段<code>192.168.3.0</code>；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）配置端口IP并开启</span><br><span class="line">Router&gt;en</span><br><span class="line">Router#conf t</span><br><span class="line">Router(config)#int fa 0/0</span><br><span class="line">Router(config-if)#ip address 192.168.2.2 255.255.255.0</span><br><span class="line">Router(config-if)#no shutdown </span><br><span class="line">Router(config-if)#exit</span><br><span class="line">Router(config)#int se 2/0</span><br><span class="line">Router(config-if)#ip address 192.168.3.1 255.255.255.0</span><br><span class="line">Router(config-if)#clock rate 64000</span><br><span class="line">Router(config-if)#no shutdown </span><br><span class="line">Router(config-if)#exit</span><br><span class="line">Router(config)#end</span><br><span class="line">查看配置信息</span><br><span class="line">Router#show run</span><br><span class="line">看到以下内容即可</span><br><span class="line">!</span><br><span class="line">interface FastEthernet0/0</span><br><span class="line"> ip address 192.168.2.2 255.255.255.0</span><br><span class="line"> duplex auto</span><br><span class="line"> speed auto</span><br><span class="line">!</span><br><span class="line">...</span><br><span class="line">interface Serial2/0</span><br><span class="line"> ip address 192.168.3.1 255.255.255.0</span><br><span class="line"> clock rate 64000</span><br><span class="line">!</span><br><span class="line"></span><br><span class="line">（2）运行RIP协议</span><br><span class="line">Router#conf t</span><br><span class="line">Router(config)#router rip</span><br><span class="line">Router(config-router)#version 2</span><br><span class="line">Router(config-router)#network 192.168.2.0</span><br><span class="line">Router(config-router)#exit</span><br><span class="line">Router(config)#router ospf 1</span><br><span class="line">Router(config-router)#network 192.168.3.0 0.0.0.255 area 0</span><br><span class="line">Router(config-router)#exit</span><br><span class="line">Router(config)#end</span><br><span class="line">查看配置信息</span><br><span class="line">Router#show ip protocols </span><br><span class="line">看到以下内容即可</span><br><span class="line">Routing Protocol is &quot;rip&quot;</span><br><span class="line">...</span><br><span class="line">Routing for Networks:</span><br><span class="line">	192.168.2.0</span><br><span class="line">...</span><br><span class="line">Routing Protocol is &quot;ospf 1&quot;</span><br><span class="line">...</span><br><span class="line">  Routing for Networks:</span><br><span class="line">    192.168.3.0 0.0.0.255 area 0</span><br></pre></td></tr></table></figure>
</li>
<li><p>路由器R1（右边的）</p>
<p>配置端口IP，开启；</p>
<p>运行OSPF协议；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）配置端口IP并开启</span><br><span class="line">Router&gt;en</span><br><span class="line">Router#conf t</span><br><span class="line">Router(config)#int se 2/0</span><br><span class="line">Router(config-if)#ip address 192.168.3.2 255.255.255.0</span><br><span class="line">Router(config-if)#no shutdown </span><br><span class="line">Router(config-if)#exit</span><br><span class="line">Router(config)#int fa 0/0</span><br><span class="line">Router(config-if)#ip address 192.168.4.1 255.255.255.0</span><br><span class="line">Router(config-if)#no shutdown </span><br><span class="line">Router(config-if)#exit</span><br><span class="line">Router(config)#end</span><br><span class="line">查看配置信息</span><br><span class="line">Router#show run</span><br><span class="line">看到以下内容即可</span><br><span class="line">!</span><br><span class="line">interface FastEthernet0/0</span><br><span class="line"> ip address 192.168.4.1 255.255.255.0</span><br><span class="line"> duplex auto</span><br><span class="line"> speed auto</span><br><span class="line">!</span><br><span class="line">...</span><br><span class="line">!</span><br><span class="line">interface Serial2/0</span><br><span class="line"> ip address 192.168.3.2 255.255.255.0</span><br><span class="line">!</span><br><span class="line"></span><br><span class="line">（2）运行OSPF协议</span><br><span class="line">Router#conf t</span><br><span class="line">Router(config)#router ospf 1</span><br><span class="line">Router(config-router)#network 192.168.3.0 0.0.0.255 area 0</span><br><span class="line">Router(config-router)#network 192.168.4.0 0.0.0.255 area 0</span><br><span class="line">Router(config-router)#exit</span><br><span class="line">Router(config)#end</span><br><span class="line">查看配置信息</span><br><span class="line">Router#show ip protocols </span><br><span class="line">看到以下内容即可</span><br><span class="line">Routing Protocol is &quot;ospf 1&quot;</span><br><span class="line">...</span><br><span class="line">  Routing for Networks:</span><br><span class="line">    192.168.3.0 0.0.0.255 area 0</span><br><span class="line">    192.168.4.0 0.0.0.255 area 0</span><br></pre></td></tr></table></figure>
</li>
<li><p>现在先测试一下，从PC0去ping PC1，发现并不能通信。</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230810154513709.png" alt="image-20230810154513709" style="zoom:67%;" /> 

<p>打开各个路由器或三层交换机，查看路由表，</p>
<p>你会发现，左右两边的路由器并没有全部网段的路由，只有中间的路由器拥有完全的路由表，</p>
<p>但实际上中间的路由表的路由是两个分立的路由表共同显示的，并不会完全把路由信息对邻居路由器通告，</p>
<ul>
<li>标志C：直连网段；</li>
<li>标志O：OSPF协议；</li>
<li>标志R：RIP协议。</li>
</ul>
<p>因此无法通信是正常的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230810154614447.png" alt="image-20230810154614447" style="zoom: 43%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230810154552549.png" alt="image-20230810154552549" style="zoom: 43%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230810154636419.png" alt="image-20230810154636419" style="zoom: 43%;" /> </p>
<p>所以接下来我们对中间的路由器进行路由重分布设置。</p>
</li>
<li><p>路由器R0</p>
<p>进入RIP协议，把OSPF路由表进行路由重分布加入；</p>
<p>进入OSPF协议，把RIP路由表进行路由重分布加入；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Router#conf t</span><br><span class="line">Router(config)#router rip</span><br><span class="line">Router(config-router)#redistribute ospf 1</span><br><span class="line">Router(config-router)#exit</span><br><span class="line">Router(config)#router ospf 1</span><br><span class="line">Router(config-router)#redistribute rip subnets 		这里写subnets意思是把具体子网也加入进来</span><br><span class="line">Router(config-router)#exit</span><br><span class="line">Router(config)#end</span><br></pre></td></tr></table></figure>
</li>
<li><p>三层交换机 静态路由</p>
<p>到这里，有些人可能已经可以了，但是有些人还不能。（因为一些设备会自动设置静态路由）</p>
<p>可能是版本问题，不能的人，可以手动设置一下静态路由，</p>
<p>使得三层交换机的默认下一跳（没有下一跳就会走默认）为R0连接处的IP（即默认走向R0来处理）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Switch#conf t</span><br><span class="line">Switch(config)#ip route 0.0.0.0 0.0.0.0 192.168.2.2</span><br><span class="line">Switch(config)#end</span><br><span class="line">查看配置信息</span><br><span class="line">Switch#show ip route</span><br><span class="line">看到下面的内容即可（主要是看到有S*这一行，这就是静态路由）</span><br><span class="line">C    192.168.1.0/24 is directly connected, Vlan1</span><br><span class="line">C    192.168.2.0/24 is directly connected, Vlan2</span><br><span class="line">S*   0.0.0.0/0 [1/0] via 192.168.2.2</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="12-3-测试"><a href="#12-3-测试" class="headerlink" title="12.3 测试"></a>12.3 测试</h3><ul>
<li><p>前面，我们测试了PC机之间是无法正常通信的，</p>
<p>这里，我们再次测试，发现可以正常通信了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230810161049622.png" alt="image-20230810161049622" style="zoom: 67%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230810161633727.png" alt="image-20230810161633727" style="zoom:67%;" /> </p>
</li>
<li><p>我们也再次打开三个路由器或三层交换机的路由表看看，发现</p>
<ul>
<li>三层交换机有静态路由</li>
<li>路由器R0有四个网段路由</li>
<li>路由器R1也有四个网段路由</li>
</ul>
<p>因此可以实现正常通信。</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230810161235069.png" alt="image-20230810161235069" style="zoom:43%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230810161214324.png" alt="image-20230810161214324" style="zoom:43%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230810161257774.png" alt="image-20230810161257774" style="zoom:43%;" /> </p>
<h2 id="第十三章、标准IP访问控制列表"><a href="#第十三章、标准IP访问控制列表" class="headerlink" title="第十三章、标准IP访问控制列表"></a>第十三章、标准IP访问控制列表</h2><blockquote>
<p>详细资料：<a href="https://blog.csdn.net/weixin_45409371/article/details/102523107">访问控制列表ACL ——标准IP访问列表 （理论+实验）</a></p>
</blockquote>
<h3 id="13-1-原理"><a href="#13-1-原理" class="headerlink" title="13.1 原理"></a>13.1 原理</h3><ul>
<li><p>访问控制列表（Access Control Lists，ACL）</p>
<p>俗称“防火墙”。是应用在路由器接口的指令列表，这些指令列表用来告诉路由器哪些数据包可以接收、哪些数据包需要拒绝。访问控制是网络安全防范和保护的主要策略，它的主要任务是保证网络资源不被非法使用和访问。它是保证网络安全最重要的核心策略之一。访问控制涉及的技术也比较广，包括入网访问控制、网络权限控制、目录级控制以及属性控制等多种手段。</p>
</li>
<li><p>功能</p>
<ul>
<li>限制网络流量、提高网络性能。例如，ACL可以根据数据包的协议，指定这种类型的数据包具有更高的优先级，同等情况下可预先被网络设备处理。</li>
<li>提供对通信流量的控制手段。</li>
<li>提供网络访问的基本安全手段。</li>
<li>在网络设备接口处，决定哪种类型的通信流量被转发、哪种类型的通信流量被阻塞。</li>
</ul>
</li>
<li><p>分类</p>
<ul>
<li><p>标准IP访问列表</p>
<p>编号范围：1 - 99，也可以命名</p>
<p> 一个标准IP访问控制列表匹配IP包中的<strong>源地址</strong>或源地址中的一部分，可对匹配的包采取拒绝或允许两个操作。</p>
</li>
<li><p>扩展IP访问列表</p>
<p>编号范围：100 - 199，也可以命名</p>
<p>扩展IP访问控制列表比标准IP访问控制列表具有更多的匹配项，包括<strong>协议类型、源地址、目的地址、源端口、目的端口、建立连接的和IP优先级</strong>等。</p>
</li>
</ul>
</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230811140522042.png" alt="image-20230811140522042" style="zoom:67%;" />

<ul>
<li><p>ACL的放置规则<br>每一个路由器接口的每一个方向，每一种协议只能创建一个ACL；在适当的位置放置 ACL 可以过滤掉不必要的流量，使网络更加高效。ACL 可以充当防火墙来过滤数据包并去除不必要的流量。ACL 的放置位置决定了是否能有效减少不必要的流量。例如，会被远程目的地拒绝的流量不应该消耗通往该目的地的路径上的网络资源。每个 ACL 都应该放置在最能发挥作用的位置。</p>
<p><strong>基本的规则</strong></p>
<ul>
<li><p>因为标准 ACL 不会指定目的地址，所以其位置应该尽可能靠近目的地。</p>
</li>
<li><p>将扩展 ACL 尽可能靠近要拒绝流量的源。这样，才能在不需要的流量流经网络之前将其过滤掉。</p>
</li>
<li><p>出：已经过路由器的处理，正离开路由器接口的数据包</p>
</li>
<li><p>入：已到达路由器接口的数据包，将被路由器处理</p>
</li>
</ul>
</li>
<li><p>使用方法</p>
<ul>
<li>配置规则</li>
<li>应用到端口上</li>
</ul>
</li>
<li><p>语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip access-list standard 1		这里1的意思是编号，可以为1-99</span><br><span class="line">permit 172.16.1.0 0.0.0.255 	注意要用反掩码</span><br><span class="line">deny 172.16.2.0 0.0.0.255</span><br><span class="line"></span><br><span class="line">int fa 0/0</span><br><span class="line">ip access-group 1 out</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="13-2-实验"><a href="#13-2-实验" class="headerlink" title="13.2 实验"></a>13.2 实验</h3><h4 id="搭建拓扑-4"><a href="#搭建拓扑-4" class="headerlink" title="搭建拓扑"></a>搭建拓扑</h4><ul>
<li>PC机 三台</li>
<li>路由器Router-PT两台</li>
<li>连线</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230811152052906.png" alt="image-20230811152052906" style="zoom:67%;" /> 

<h4 id="配置IP-1"><a href="#配置IP-1" class="headerlink" title="配置IP"></a>配置IP</h4><ul>
<li>PC机配置IP</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230811142124219.png" alt="image-20230811142124219" style="zoom: 50%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230811142145167.png" alt="image-20230811142145167" style="zoom:50%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230811142220279.png" alt="image-20230811142220279" style="zoom:50%;" /> </p>
<ul>
<li><p>路由器配置 IP</p>
<p>R0配置端口IP，开启（记得配置时钟频率）；</p>
<p>R1配置端口IP，开启；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）R0配置</span><br><span class="line">Router&gt;en</span><br><span class="line">Router#conf t</span><br><span class="line">Router(config)#int fa 0/0</span><br><span class="line">Router(config-if)#ip address 172.16.1.1 255.255.255.0</span><br><span class="line">Router(config-if)#no shutdown </span><br><span class="line">Router(config-if)#exit</span><br><span class="line">Router(config)#int fa 1/0</span><br><span class="line">Router(config-if)#ip address 172.16.2.1 255.255.255.0</span><br><span class="line">Router(config-if)#no shutdown </span><br><span class="line">Router(config-if)#exit</span><br><span class="line">Router(config)#int se 2/0</span><br><span class="line">Router(config-if)#ip address 172.16.3.1 255.255.255.0</span><br><span class="line">Router(config-if)#clock rate 64000</span><br><span class="line">Router(config-if)#no shutdown </span><br><span class="line">Router(config-if)#exit</span><br><span class="line">Router(config)#end</span><br><span class="line"></span><br><span class="line">（2）R1配置</span><br><span class="line">Router&gt;en</span><br><span class="line">Router#conf t</span><br><span class="line">Router(config)#int se 2/0</span><br><span class="line">Router(config-if)#ip address 172.16.3.2 255.255.255.0</span><br><span class="line">Router(config-if)#no shutdown </span><br><span class="line">Router(config-if)#exit</span><br><span class="line">Router(config-if)#int fa 0/0</span><br><span class="line">Router(config-if)#ip address 172.16.4.1 255.255.255.0</span><br><span class="line">Router(config-if)#no shutdown </span><br><span class="line">Router(config-if)#exit</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="配置路由-1"><a href="#配置路由-1" class="headerlink" title="配置路由"></a>配置路由</h4><ul>
<li><p>路由器路由配置</p>
<p>目前只有直连路由，因此，</p>
<ul>
<li><p>R0 知道去往 1.0、2.0、3.0 网段的路由，但是并不知道 4.0 网段的路由；</p>
</li>
<li><p>R1 知道去往 3.0、4.0 网段的路由，但是并不知道 1.0、2.0 网段的路由。</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230811145552561.png" alt="image-20230811145552561" style="zoom:67%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230811145610051.png" alt="image-20230811145610051" style="zoom:67%;" /> </p>
<p>因此，可以</p>
<ul>
<li>R0 配置 静态路由 去往 4.0 网段</li>
<li>R1 配置 默认路由 去往 1.0、2.0 网段</li>
</ul>
<blockquote>
<p>默认路由是一种特殊的静态路由</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）R0配置静态路由</span><br><span class="line">Router(config)#ip route 172.16.4.0 255.255.255.0 172.16.3.2</span><br><span class="line">（2）R1配置默认路由</span><br><span class="line">Router(config)#ip route 0.0.0.0 0.0.0.0 172.16.3.1</span><br></pre></td></tr></table></figure>

<p>再次查看路由情况，如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230811145759157.png" alt="image-20230811145759157" style="zoom:67%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230811145811919.png" alt="image-20230811145811919" style="zoom:67%;" /> </p>
</li>
<li><p>现在可以先测试一下，所有的PC机现在都能ping通了</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230811145949050.png" alt="image-20230811145949050" style="zoom: 50%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230811150045099.png" alt="image-20230811150045099" style="zoom:50%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230811150119258.png" alt="image-20230811150119258" style="zoom:50%;" /> </p>
<h4 id="配置标准ACL"><a href="#配置标准ACL" class="headerlink" title="配置标准ACL"></a>配置标准ACL</h4><ul>
<li><p>我们要禁止销售部访问财务部，其他均可</p>
<p>所以，可以在路由器R1上设置（R0也可以，但是尽量靠近目的地址更好）。</p>
</li>
<li><p>路由器R1配置标准ACL</p>
<p>创建一个标准ACL；</p>
<p>进入端口，应用在端口的出out &#x2F;入in ；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Router#conf t</span><br><span class="line">Router(config)#ip access-list standard 1		这里1的意思是编号，可以为1-99</span><br><span class="line">Router(config-std-nacl)#permit 172.16.1.0 0.0.0.255 	注意要用反掩码</span><br><span class="line">Router(config-std-nacl)#deny 172.16.2.0 0.0.0.255</span><br><span class="line">Router(config-std-nacl)#exit</span><br><span class="line">Router(config)#int fa 0/0</span><br><span class="line">Router(config-if)#ip access-group 1 out			这里即：进入端口后，把编号1的ACL应用在该端口的出口上</span><br><span class="line">Router(config-if)#exit</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="13-3-测试"><a href="#13-3-测试" class="headerlink" title="13.3 测试"></a>13.3 测试</h3><ul>
<li><p>之前测试，是全部都能互相ping通的，</p>
<p>现在测试，发现只有销售部无法ping通财务部（反过来也不可以）。</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230811151316918.png" alt="image-20230811151316918" style="zoom:50%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230811151340891.png" alt="image-20230811151340891" style="zoom:50%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230811151500559.png" alt="image-20230811151500559" style="zoom:50%;" /> </p>
<blockquote>
<p>但是两者出现的情况是不一样的，</p>
<ul>
<li><p>销售部 ping 财务部</p>
<p><code>Reply from 172.16.3.2: Destination host unreachable.</code></p>
<p>无法抵达。这是明确被中间的路由器172.168.3.2告知了无法到达财务部的。</p>
<p>因为是这个路由器进行的ACL拦截，会回复这个拦截停通知。</p>
</li>
<li><p>财务部 ping 销售部</p>
<p><code>Request timed out.</code></p>
<p>请求超时。这是没有被告知中间出了什么问题的。</p>
<p>因为财务部实际上确实把包发出去了，也没有人拦截，但是，销售部回复的包被拦截了。而这种情况下，销售部会收到无法抵达的通知，财务部这边看来就是什么都没有，不知道发生了什么，仍然一直等待，所以，请求超时。</p>
</li>
</ul>
</blockquote>
<h2 id="第十四章、扩展IP访问控制列表"><a href="#第十四章、扩展IP访问控制列表" class="headerlink" title="第十四章、扩展IP访问控制列表"></a>第十四章、扩展IP访问控制列表</h2><h3 id="14-1-原理"><a href="#14-1-原理" class="headerlink" title="14.1 原理"></a>14.1 原理</h3><ul>
<li><p>原理</p>
<p>见标准ACL</p>
</li>
<li><p>语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">【具体命令】</span><br><span class="line">access-list 访问控制列表号 &#123;deny/permit&#125; 协议类型 源网络地址 [通配符掩码(反掩码)] 目的网络地址 [通配符掩码] [运算符 端口号]</span><br><span class="line"></span><br><span class="line">【选项查看】</span><br><span class="line">Router(config)#access-list ?</span><br><span class="line">  &lt;1-99&gt;     IP standard access list</span><br><span class="line">  &lt;100-199&gt;  IP extended access list</span><br><span class="line">Router(config)#access-list 100 ?</span><br><span class="line">  deny    Specify packets to reject</span><br><span class="line">  permit  Specify packets to forward</span><br><span class="line">  remark  Access list entry comment</span><br><span class="line">Router(config)#access-list 100 permit ?</span><br><span class="line">  ahp    Authentication Header Protocol</span><br><span class="line">  eigrp  Cisco&#x27;s EIGRP routing protocol</span><br><span class="line">  esp    Encapsulation Security Payload</span><br><span class="line">  gre    Cisco&#x27;s GRE tunneling</span><br><span class="line">  icmp   Internet Control Message Protocol</span><br><span class="line">  ip     Any Internet Protocol</span><br><span class="line">  ospf   OSPF routing protocol</span><br><span class="line">  tcp    Transmission Control Protocol</span><br><span class="line">  udp    User Datagram Protocol</span><br><span class="line">Router(config)#access-list 100 permit tcp ?</span><br><span class="line">  A.B.C.D  Source address</span><br><span class="line">  any      Any source host</span><br><span class="line">  host     A single source host</span><br><span class="line">Router(config)#access-list 100 permit tcp any ?</span><br><span class="line">  A.B.C.D  Destination address</span><br><span class="line">  any      Any destination host</span><br><span class="line">  eq       Match only packets on a given port number</span><br><span class="line">  gt       Match only packets with a greater port number</span><br><span class="line">  host     A single destination host</span><br><span class="line">  lt       Match only packets with a lower port number</span><br><span class="line">  neq      Match only packets not on a given port number</span><br><span class="line">  range    Match only packets in the range of port numbers</span><br><span class="line">Router(config)#access-list 100 permit tcp any host ?</span><br><span class="line">  A.B.C.D  Destination address</span><br><span class="line">Router(config)#access-list 100 permit tcp any host 172.16.4.2 ?</span><br><span class="line">  dscp         Match packets with given dscp value</span><br><span class="line">  eq           Match only packets on a given port number</span><br><span class="line">  established  established</span><br><span class="line">  gt           Match only packets with a greater port number</span><br><span class="line">  lt           Match only packets with a lower port number</span><br><span class="line">  neq          Match only packets not on a given port number</span><br><span class="line">  precedence   Match packets with given precedence value</span><br><span class="line">  range        Match only packets in the range of port numbers</span><br><span class="line">  &lt;cr&gt;</span><br><span class="line">Router(config)#access-list 100 permit tcp any host 172.16.4.2 eq ?</span><br><span class="line">  &lt;0-65535&gt;  Port number</span><br><span class="line">  ftp        File Transfer Protocol (21)</span><br><span class="line">  pop3       Post Office Protocol v3 (110)</span><br><span class="line">  smtp       Simple Mail Transport Protocol (25)</span><br><span class="line">  telnet     Telnet (23)</span><br><span class="line">  www        World Wide Web (HTTP, 80)</span><br><span class="line">Router(config)#access-list 100 permit tcp any host 172.16.4.2 eq 80 ?</span><br><span class="line">  dscp         Match packets with given dscp value</span><br><span class="line">  established  established</span><br><span class="line">  precedence   Match packets with given precedence value</span><br><span class="line">  &lt;cr&gt;</span><br><span class="line">Router(config)#access-list 100 permit tcp any host 172.16.4.2 eq 80 </span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="14-2-实验"><a href="#14-2-实验" class="headerlink" title="14.2 实验"></a>14.2 实验</h3><h4 id="搭建拓扑-5"><a href="#搭建拓扑-5" class="headerlink" title="搭建拓扑"></a>搭建拓扑</h4><ul>
<li>PC机 一台</li>
<li>服务器 一台</li>
<li>路由器 三台</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230811164351517.png" alt="image-20230811164351517" style="zoom: 67%;" /> 

<h4 id="配置IP-2"><a href="#配置IP-2" class="headerlink" title="配置IP"></a>配置IP</h4><ul>
<li><p>PC机配置</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230811154814736.png" alt="image-20230811154814736" style="zoom:67%;" /> 
</li>
<li><p>服务器配置IP</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230811154910102.png" alt="image-20230811154910102" style="zoom:67%;" /> 
</li>
<li><p>路由器配置端口IP</p>
<p>三个路由器按照图示配置端口IP，开启；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）路由器R0</span><br><span class="line">Router&gt;en</span><br><span class="line">Router#conf t</span><br><span class="line">Router(config)#int fa 0/0</span><br><span class="line">Router(config-if)#ip address 172.16.1.1 255.255.255.0</span><br><span class="line">Router(config-if)#no shutdown </span><br><span class="line">Router(config-if)#exit</span><br><span class="line">Router(config)#int se 2/0</span><br><span class="line">Router(config-if)#ip address 172.16.2.1 255.255.255.0</span><br><span class="line">Router(config-if)#clock rate 64000</span><br><span class="line">Router(config-if)#no shutdown </span><br><span class="line">Router(config-if)#exit</span><br><span class="line">（2）路由器R1</span><br><span class="line">Router&gt;en</span><br><span class="line">Router#conf t</span><br><span class="line">Router(config)#int se 2/0</span><br><span class="line">Router(config-if)#ip address 172.16.2.2 255.255.255.0</span><br><span class="line">Router(config-if)#no shutdown </span><br><span class="line">Router(config-if)#exit</span><br><span class="line">Router(config)#int se 3/0</span><br><span class="line">Router(config-if)#ip address 172.16.3.1 255.255.255.0</span><br><span class="line">Router(config-if)#clock rate 64000</span><br><span class="line">Router(config-if)#no shutdown </span><br><span class="line">Router(config-if)#exit</span><br><span class="line">（3）路由器R2</span><br><span class="line">Router&gt;en</span><br><span class="line">Router#conf t</span><br><span class="line">Router(config)#int se 2/0</span><br><span class="line">Router(config-if)#ip address 172.16.3.2 255.255.255.0</span><br><span class="line">Router(config-if)#no shutdown </span><br><span class="line">Router(config-if)#exit</span><br><span class="line">Router(config-if)#int fa 0/0</span><br><span class="line">Router(config-if)#ip address 172.16.4.1 255.255.255.0</span><br><span class="line">Router(config-if)#no shutdown </span><br><span class="line">Router(config-if)#exit</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="配置路由-2"><a href="#配置路由-2" class="headerlink" title="配置路由"></a>配置路由</h4><ul>
<li><p>路由器配置路由</p>
<p>如图所示，三个路由器都只有直连网段的路由</p>
<ul>
<li>R0：1.0、2.0</li>
<li>R1：2.0、3.0</li>
<li>R2：3.0、4.0</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230811160354745.png" alt="image-20230811160354745" style="zoom: 50%;" /> 

<p>因此，可以让R1拥有全网段的路由（配置1.0、4.0网段的静态路由）</p>
<p>其他两个路由器则把默认路由设置下一跳为R1，交给R1处理。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）路由器R0</span><br><span class="line">Router(config)#ip route 0.0.0.0 0.0.0.0 172.16.2.2</span><br><span class="line"></span><br><span class="line">（2）路由器R1</span><br><span class="line">Router(config)#ip route 172.16.1.0 255.255.255.0 172.16.2.1</span><br><span class="line">Router(config)#ip route 172.16.4.0 255.255.255.0 172.16.3.2</span><br><span class="line"></span><br><span class="line">（3）路由器R2</span><br><span class="line">Router(config)#ip route 0.0.0.0 0.0.0.0 172.16.3.1</span><br></pre></td></tr></table></figure>

<p>再次查看三个路由器的路由表如下，即可</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230811161112555.png" alt="image-20230811161112555" style="zoom: 50%;" /> 
</li>
<li><p>好的。</p>
<p>到这里，测试一下，已经可以ping通了。</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230811161222448.png" alt="image-20230811161222448" style="zoom:67%;" /> 
</li>
<li><p>开启服务器web服务</p>
<p>点开服务器Server0，点击服务Services，把HTTP、HTTPS改为On按钮（默认会自动开启，检查一下即可）</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230811161302775.png" alt="image-20230811161302775" style="zoom:50%;" /> 
</li>
<li><p>主机访问服务器web访问</p>
<p>点开主机，打开web浏览器，输入服务器地址<code>172.16.4.2</code>回车，发现能够正常访问。</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230811161534602.png" alt="image-20230811161534602" style="zoom:67%;" /></li>
</ul>
<h4 id="配置扩展ACL"><a href="#配置扩展ACL" class="headerlink" title="配置扩展ACL"></a>配置扩展ACL</h4><ul>
<li><p>我们实际上希望主机只能够访问服务器的web服务，并不能ping通。</p>
<p>因此，要使用扩展访问控制列表，</p>
</li>
<li><p>扩展ACL控制</p>
<p>创建扩展ACL，允许访问TCP协议的80端口（即HTTP服务），禁止 ICMP协议；</p>
<p>进入端口，把该扩展ACL应用到端口的出口上；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">路由器R1设置</span><br><span class="line">Router(config)#access-list 100 permit tcp any host 172.16.4.2 eq 80 </span><br><span class="line">Router(config)#access-list 100 deny icmp any host 172.16.4.2 </span><br><span class="line">Router(config)#int se 3/0</span><br><span class="line">Router(config-if)#ip access-group 100 out</span><br><span class="line">Router(config-if)#exit</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="14-3-测试"><a href="#14-3-测试" class="headerlink" title="14.3 测试"></a>14.3 测试</h3><ul>
<li>至此，我们再次测试，发现<ul>
<li>ping服务器不通</li>
<li>服务器的web服务能够正常访问</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230811164258821.png" alt="image-20230811164258821" style="zoom: 67%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230811164322105.png" alt="image-20230811164322105" style="zoom:67%;" /> </p>
<h2 id="第十五章、网络地址转换NAT"><a href="#第十五章、网络地址转换NAT" class="headerlink" title="第十五章、网络地址转换NAT"></a>第十五章、网络地址转换NAT</h2><h3 id="15-1-原理"><a href="#15-1-原理" class="headerlink" title="15.1 原理"></a>15.1 原理</h3><ul>
<li><p><strong>NAT (Network Address Translation)</strong></p>
<p>又称为网络地址转换，用于实现私有网络和公有网络之间的互访。</p>
</li>
<li><p><strong>工作原理</strong></p>
<ul>
<li><p>NAT用来将内网地址和端口号转换成合法的公网地址和端口号，建立一个会话，与公网主机进行通信。</p>
</li>
<li><p>NTA外部的主机无法主动跟位于NAT内部的主机通信，NAT内部主机想要通信，必须主动和公网的一个IP通信，路由器负责建立一个映射关系，从而实现数据的转发。</p>
</li>
<li><p>数据包从内网到外网时，会转换源lP地址，由私网地址转换成公网地址</p>
</li>
<li><p>数据包从外网到内网时，会转换目的IP地址，由公网地址转换成私网地址</p>
</li>
</ul>
</li>
<li><p><strong>功能</strong><br>NAT不仅能解决了IP地址不足的问题，而且还能够有效的避免来自网络外部的入侵，隐藏并保护网络内部的计算机</p>
<ul>
<li><p>宽带分享 ，这是NAT主机最大的功能</p>
</li>
<li><p>安全防护，NAT之内的PC联机到 nternet上面时，他所显示的IP是NAT主机的公网IP，所以client端的PC就具有一定程度的安全了，外界在进行portscan（端口扫描）的时候，就侦测不到源client端的PC</p>
</li>
</ul>
<p>优点：节省公有合法IP地址，处理地址重叠，增强灵活性，安全性</p>
<p>缺点：延迟增大，配置和维护的复杂性，不支持某些应用（比如VPN）</p>
</li>
<li><p><strong>分类</strong></p>
<ul>
<li><p>一对一</p>
<ul>
<li><p>静态转换</p>
<p>一对一，私有ip和共有ip的映射关系定下来就不会变了</p>
</li>
<li><p>动态转换</p>
<p>也是一对一，但是每次私有ip跟共有ip的映射关系都是不一样</p>
</li>
</ul>
</li>
<li><p>多对一</p>
<ul>
<li><p>端口多路复用NAPT</p>
<p>内部网络的所有主机均可共享一个合法外部IP地址实现对Internet的访问，从而可以最大限度地节约IP地址资源。同时，又可隐藏网络内部的所有主机，有效避免来自internet的攻击。</p>
<p>因此，网络中应用最多的就是端口多路复用方式。</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>静态NAT</strong></p>
<p>静态NAT实现私网地址和公网地址的一对一转换。有多少个私网地址就需要配置多少个公网地址。</p>
<p>静态NAT<strong>不能节约</strong>公网地址，但可以起到<strong>隐藏内部网络</strong>的作用。</p>
<ul>
<li><p>内部网络向外部网络发送报文时，静态NAT将报文的源IP地址替换为对应的公网地址</p>
</li>
<li><p>外部网络向内部网络发送响应报文时，静态NAT将报文的目的地址替换为相应的私网地址。</p>
</li>
</ul>
</li>
<li><p><strong>动态NAT</strong></p>
<p>多个私网IP地址对应多个公网IP地址，基于地址池一对一映射。</p>
</li>
<li><p><strong>使用方法</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">配置静态NAT（config下）</span><br><span class="line">ip nat inside </span><br><span class="line">ip nat outside </span><br><span class="line">ip nat inside source static 192.168.1.2 222.0.1.2</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="15-2-实验"><a href="#15-2-实验" class="headerlink" title="15.2 实验"></a>15.2 实验</h3><h4 id="搭建拓扑-6"><a href="#搭建拓扑-6" class="headerlink" title="搭建拓扑"></a>搭建拓扑</h4><ul>
<li><p>路由器Router-PT 两台</p>
</li>
<li><p>二层交换机2960 一台</p>
</li>
<li><p>服务器Server 一台</p>
</li>
<li><p>PC机 一台</p>
</li>
<li><p>连线</p>
</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230812172932438.png" alt="image-20230812172932438" style="zoom: 80%;" />  

<h4 id="配置IP-3"><a href="#配置IP-3" class="headerlink" title="配置IP"></a>配置IP</h4><ul>
<li>PC机配置IP，服务器配置IP</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230812143215478.png" alt="image-20230812143215478" style="zoom:67%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230812143136713.png" alt="image-20230812143136713" style="zoom:67%;" /> </p>
<ul>
<li><p>二层交换机</p>
<p>不用动</p>
</li>
<li><p>路由器</p>
<p>R0、R1配置各端口IP</p>
<p>（注意，我们没有使用<code>222.0.1.2</code>，留着给后面作为NAT使用）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）R0配置IP</span><br><span class="line">Router&gt;en</span><br><span class="line">Router#conf t</span><br><span class="line">Router(config)#int fa 0/0</span><br><span class="line">Router(config-if)#ip address 192.168.1.1 255.255.255.0</span><br><span class="line">Router(config-if)#no shutdown </span><br><span class="line">Router(config-if)#exit</span><br><span class="line">Router(config)#int se 2/0</span><br><span class="line">Router(config-if)#ip address 222.0.1.1 255.255.255.0</span><br><span class="line">Router(config-if)#clock rate 64000</span><br><span class="line">Router(config-if)#no shutdown </span><br><span class="line">Router(config-if)#exit</span><br><span class="line"></span><br><span class="line">（2）R1配置IP</span><br><span class="line">Router&gt;en</span><br><span class="line">Router#conf t</span><br><span class="line">Router(config)#int se 2/0</span><br><span class="line">Router(config-if)#ip address 222.0.1.3 255.255.255.0</span><br><span class="line">Router(config-if)#no shutdown </span><br><span class="line">Router(config-if)#exit</span><br><span class="line">Router(config)#int fa 0/0</span><br><span class="line">Router(config-if)#ip address 222.0.2.1 255.255.255.0</span><br><span class="line">Router(config-if)#no shutdown </span><br><span class="line">Router(config-if)#exit</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="配置路由-3"><a href="#配置路由-3" class="headerlink" title="配置路由"></a>配置路由</h4><ul>
<li><p>注意，这里192.168.x.x的网段是私有地址网段，</p>
<p>并不会被外部知道路由，只有R0知道私钥网段的路由。</p>
<p>因此，R1并不需要配置到192.168.x.x的路由。</p>
<p>（教学视频中却配置了，是不正确的，不需要配置。所以教学视频中下一步是完全能通信到192.168.1.2的。）</p>
<p>只需要配置R0到222.0.2.0网段的静态路由即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">对R0配置路由</span><br><span class="line">Router(config)#ip route 222.0.2.0 255.255.255.0 222.0.1.3</span><br></pre></td></tr></table></figure>
</li>
<li><p>现在，注意，是不能够通信的，PC机是无法与内网服务器通信的。</p>
<p>为什么？因为外部主机无法直接通过私有地址去访问内部服务器。</p>
<p>因此，我们需要在内部服务器出口路由器上配置NAT，使得其在走出内部网络时，带着的是公有地址。</p>
<p>从而外部主机就可以通过公有地址来访问内部服务器了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230812144308315.png" alt="image-20230812144308315" style="zoom: 67%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230812144332766.png" alt="image-20230812144332766" style="zoom: 67%;" /></p>
</li>
</ul>
<h4 id="配置NAT"><a href="#配置NAT" class="headerlink" title="配置NAT"></a>配置NAT</h4><ul>
<li><p>在路由器R0上，配置一个静态NAT</p>
<p>我们把原本留着的<code>222.0.1.2</code>用来作为静态NAT的一个出口IP。</p>
<ul>
<li>指定内部端口</li>
<li>指定外部端口</li>
<li>配置静态NAT</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在路由器R0上配置</span><br><span class="line">Router(config)#int fa 0/0</span><br><span class="line">Router(config-if)#ip nat inside </span><br><span class="line">Router(config-if)#exit</span><br><span class="line">Router(config)#int se 2/0</span><br><span class="line">Router(config-if)#ip nat outside </span><br><span class="line">Router(config-if)#exit</span><br><span class="line">Router(config)#ip nat inside source static 192.168.1.2 222.0.1.2</span><br><span class="line">Router(config)#end</span><br><span class="line"></span><br><span class="line">查看配置信息</span><br><span class="line">Router#show ip nat translations </span><br><span class="line">看到下面的内容即可</span><br><span class="line">Pro  Inside global     Inside local       Outside local      Outside global</span><br><span class="line">---  222.0.1.2         192.168.1.2        ---                ---</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="15-3-测试"><a href="#15-3-测试" class="headerlink" title="15.3 测试"></a>15.3 测试</h3><ul>
<li><p>现在，内部服务器在外部实际上有一个公网IP了，就是<code>222.0.1.2</code>，</p>
<p>因此，外部主机只需要通过访问这个公网IP，就会访问到内部服务器。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230812150106558.png" alt="image-20230812150106558" style="zoom:67%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230812150122091.png" alt="image-20230812150122091" style="zoom:67%;" /></p>
</li>
</ul>
<h2 id="第十六章、网络端口地址转换NAPT"><a href="#第十六章、网络端口地址转换NAPT" class="headerlink" title="第十六章、网络端口地址转换NAPT"></a>第十六章、网络端口地址转换NAPT</h2><h3 id="16-1-原理"><a href="#16-1-原理" class="headerlink" title="16.1 原理"></a>16.1 原理</h3><ul>
<li><p><strong>端口多路复用 NATP</strong></p>
<p>PAT又称为NAPT (Network Address Port Translation)</p>
<p>它实现一个公网地址和多个私网地址之间的映射，因此可以<strong>节约公网地址</strong>。</p>
<p>PAT的基本原理是将不同私网地址的报文的源IP地址转换为同一公网地址，但他们被转换为该地址的不同端口号，因而仍然能够共享同一地址。</p>
<ul>
<li><p>作用</p>
<ul>
<li><p>改变数据包的IP地址和端口号</p>
</li>
<li><p>能够大量节约公网IP地址</p>
</li>
</ul>
</li>
<li><p>类型</p>
<ul>
<li><p>动态PAT，包括NAPT和Easy IP</p>
<p>NAPT：多个私网IP地址对应固定外网IP地址(比如200.1.1.10)，配置方法与动态NAT类似。</p>
<p>Easy IP：多个私网IP地址对应路由器外网接口公网IP地址(比如12.0.0.1)</p>
</li>
<li><p>静态PAT，包括NAT Server</p>
<p>端口映射，将私网地址端口映射到公网地址，实现内网服务器供外网用户访问</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="16-2-实验"><a href="#16-2-实验" class="headerlink" title="16.2 实验"></a>16.2 实验</h3><h4 id="搭建拓扑-7"><a href="#搭建拓扑-7" class="headerlink" title="搭建拓扑"></a>搭建拓扑</h4><ul>
<li>PC机 两台</li>
<li>服务器Server 一台</li>
<li>二层交换机 一台</li>
<li>路由器 两台</li>
<li>连线</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230812171025568.png" alt="image-20230812171025568" style="zoom: 80%;" /> 

<h4 id="配置IP-4"><a href="#配置IP-4" class="headerlink" title="配置IP"></a>配置IP</h4><ul>
<li>PC机配置IP</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230812160151295.png" alt="image-20230812160151295" style="zoom: 67%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230812160215520.png" alt="image-20230812160215520" style="zoom:67%;" /> </p>
<ul>
<li>服务器配置IP</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230812160252391.png" alt="image-20230812160252391" style="zoom:67%;" /> 

<ul>
<li><p>路由器配置端口IP</p>
<p>R0、R1配置端口IP</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）路由器R0配置</span><br><span class="line">Router&gt;en</span><br><span class="line">Router#conf t</span><br><span class="line">Router(config)#int fa 0/0</span><br><span class="line">Router(config-if)#ip address 192.168.1.1 255.255.255.0</span><br><span class="line">Router(config-if)#no shutdown </span><br><span class="line">Router(config-if)#exit</span><br><span class="line">Router(config)#int se 2/0</span><br><span class="line">Router(config-if)#ip address 200.0.1.1 255.255.255.0</span><br><span class="line">Router(config-if)#clock rate 64000</span><br><span class="line">Router(config-if)#no shutdown </span><br><span class="line">Router(config-if)#exit</span><br><span class="line"></span><br><span class="line">（2）路由器R1配置</span><br><span class="line">Router&gt;en</span><br><span class="line">Router#conf t</span><br><span class="line">Router(config)#int se 2/0</span><br><span class="line">Router(config-if)#ip address 200.0.1.2 255.255.255.0</span><br><span class="line">Router(config-if)#no shutdown </span><br><span class="line">Router(config-if)#exit</span><br><span class="line">Router(config)#int fa 0/0</span><br><span class="line">Router(config-if)#ip address 200.0.2.1 255.255.255.0</span><br><span class="line">Router(config-if)#no shutdown </span><br><span class="line">Router(config-if)#exit</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="配置路由-4"><a href="#配置路由-4" class="headerlink" title="配置路由"></a>配置路由</h4><ul>
<li><p>分析网段</p>
<ul>
<li><p>外部网段</p>
<p><code>200.0.1.0</code></p>
<p><code>200.0.2.0</code></p>
</li>
<li><p>内部网段</p>
<p><code>192.168.1.0</code></p>
</li>
</ul>
</li>
<li><p>这里左边是内部网络，192.168.x.x网段是私有的，并不会直接被外部的路由器直接路由到。</p>
<p>因此，路由器R1只需要配置外部网段的路由即可，而外部的两个网段都是R1的直连网段，因此不需要配置。</p>
<p>路由器R0则是内部、外部网段均需要，内部网段是直连网段，不需要配置；外部网段的<code>2.0</code>网段需要配置一下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">只需要配置路由器R0的一个静态路由即可</span><br><span class="line">Router(config)#ip route 200.0.2.0 255.255.255.0 200.0.1.2</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="配置NAPT"><a href="#配置NAPT" class="headerlink" title="配置NAPT"></a>配置NAPT</h4><ul>
<li><p>其实，到现在，你要是去测试ping，会发现是请求超时。</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230812161819278.png" alt="image-20230812161819278" style="zoom:67%;" /> 

<blockquote>
<p>这就很有意思，为什么是请求超时？为什么不是不可抵达？</p>
<p>分析一下两个问题：</p>
<ul>
<li><p>PC机的包发出去，服务器收到了吗？</p>
<p>收到了！</p>
</li>
<li><p>服务器如果是收到了请求，服务器回复的包发出去，PC机收到了吗？为什么没收到？</p>
<p>显然是PC机没收到回复。</p>
<p>为什么没收到？因为路由器R1处并不能转发私有地址<code>192.168.1.0</code>网段的数据包，也没有这个网段的路由（你不能直接配置静态路由。实际情况中，外部路由器即便收到了私有地址的包，也是会直接丢弃的）</p>
</li>
</ul>
<p>所以，PC机发了出去，也送到了，可以迟迟收不到回复，所以是请求超时。</p>
</blockquote>
</li>
<li><p>进行NAPT网络端口转换配置</p>
<p>内部主机在出口路由器处，先转换为一个公有地址，再出去。</p>
<p>这样做，外部服务器回复时，也是向这个公有地址回复，</p>
<p>回复抵达出口路由器时，会自动转换回内部的私有地址，PC机就可以收到了。</p>
<ul>
<li>指定内部端口</li>
<li>指定外部端口</li>
<li>创建访问列表</li>
<li>创建IP地址池</li>
<li>配置NAPT：从访问列表映射到IP地址池</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Router(config)#int fa 0/0</span><br><span class="line">Router(config-if)#ip nat inside </span><br><span class="line">Router(config-if)#exit</span><br><span class="line">Router(config)#int se 2/0</span><br><span class="line">Router(config-if)#ip nat outside </span><br><span class="line">Router(config-if)#exit</span><br><span class="line">Router(config)#access-list 1 permit 192.168.1.0 0.0.0.255 	</span><br><span class="line">解释：上面是创建一个标准访问控制列表（注意后面是反掩码）</span><br><span class="line">Router(config)#ip nat pool mypool 200.0.1.3 200.0.1.3 netmask 255.255.255.0 </span><br><span class="line">解释：上面是创建IP地址池，命名为mypool，写入起始地址、结束地址（这里是同一个，也就是说只有一个IP），后面写netmask+子网掩码</span><br><span class="line">Router(config)#ip nat inside source list 1 pool mypool overload </span><br><span class="line">解释：上面是配置NAPT，意思是把内网中编号1的访问列表的IP转换到名为mypool的地址池再出去，映射方式允许重载</span><br><span class="line">（若不允许重载，即，不带上overload，那么就是前面的动态NAT，需要一对一，地址池中的IP数量要够多）</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>如若猜测自己的配置可能哪里出问题，</p>
<p>可以使用命令<code>show run</code>查看配置信息，检查问题。</p>
</blockquote>
<h3 id="16-3-测试"><a href="#16-3-测试" class="headerlink" title="16.3 测试"></a>16.3 测试</h3><ul>
<li><p>现在先看一下</p>
<p>在路由器R0上查看一下NAPT情况</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show ip nat translations</span><br></pre></td></tr></table></figure>

<p>你会发现，什么信息都没有，这是正常的。</p>
<p>只有有内部主机发起请求了，才会出现信息。</p>
</li>
<li><p>测试从PC机去ping以及访问 外部服务器。</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230812170255660.png" alt="image-20230812170255660" style="zoom:67%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230812170343202.png" alt="image-20230812170343202" style="zoom:67%;" /> </p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230812170437449.png" alt="image-20230812170437449" style="zoom:67%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/computerNetwork/image-20230812170405578.png" alt="image-20230812170405578" style="zoom:67%;" /> </p>
<ul>
<li><p>现在再看NAPT情况</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Router#show ip nat translations </span><br><span class="line">Pro  Inside global     Inside local       Outside local      Outside global</span><br><span class="line">tcp 200.0.1.3:1024     192.168.1.2:1025   200.0.2.2:80       200.0.2.2:80</span><br><span class="line">tcp 200.0.1.3:1025     192.168.1.3:1025   200.0.2.2:80       200.0.2.2:80</span><br></pre></td></tr></table></figure>

<p>这里就是PC机在访问时，进行的网络地址端口转换情况。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计网实验</tag>
      </tags>
  </entry>
  <entry>
    <title>《RegExp正则表达式》Notes</title>
    <url>/butterflyblog/2023/04/05/%E3%80%8ARegExp%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E3%80%8BNotes/</url>
    <content><![CDATA[<h1 id="《RegExp正则表达式》Notes"><a href="#《RegExp正则表达式》Notes" class="headerlink" title="《RegExp正则表达式》Notes"></a>《RegExp正则表达式》Notes</h1><blockquote>
<p>@Seymour0314 来源菜鸟教程 2023-04-05</p>
</blockquote>
<h2 id="第一章-语法"><a href="#第一章-语法" class="headerlink" title="第一章 语法"></a>第一章 语法</h2><h3 id="普通字符"><a href="#普通字符" class="headerlink" title="普通字符"></a>普通字符</h3><blockquote>
<p>普通字符包括没有显式指定为元字符的所有可打印和不可打印字符。这包括所有大写和小写字母、所有数字、所有标点符号和一些其他符号。</p>
</blockquote>
<ul>
<li>[]</li>
<li>[^]</li>
<li>[-]</li>
<li>.</li>
<li>\s 与 \S</li>
<li>\w</li>
</ul>
<table>
<thead>
<tr>
<th align="left">字符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>[ABC]</strong></td>
<td align="left">匹配 <strong>[…]</strong> 中的所有字符，例如 <strong>[aeiou]</strong> 匹配字符串 “google runoob taobao” 中所有的 e o u a 字母。<img src="https://www.runoob.com/wp-content/uploads/2014/03/E691DDE1-E5CB-4EA8-8D16-759BD0D2B09D.jpg" alt="img" style="zoom: 50%;" /></td>
</tr>
<tr>
<td align="left"><strong>[^ABC]</strong></td>
<td align="left">匹配除了 <strong>[…]</strong> 中字符的所有字符，例如 <strong>[^aeiou]</strong> 匹配字符串 “google runoob taobao” 中除了 e o u a 字母的所有字母。<img src="https://www.runoob.com/wp-content/uploads/2014/03/ED971D92-30F4-4768-A2C7-02A84A3A9DEB.jpg" alt="img" style="zoom:50%;" /></td>
</tr>
<tr>
<td align="left"><strong>[A-Z]</strong></td>
<td align="left">[A-Z] 表示一个区间，匹配所有大写字母，[a-z] 表示所有小写字母。<img src="https://www.runoob.com/wp-content/uploads/2014/03/C5E357BD-65E3-4EB3-9D80-10D096F19287.jpg" alt="img" style="zoom:50%;" /></td>
</tr>
<tr>
<td align="left"><strong>.</strong></td>
<td align="left">匹配除换行符（\n、\r）之外的任何单个字符，相等于 <code>[^\n\r]</code>。<img src="https://www.runoob.com/wp-content/uploads/2014/03/0FD7E77D-38A7-43BC-B51A-7DBA23A77756.jpg" alt="img" style="zoom:50%;" /></td>
</tr>
<tr>
<td align="left"><strong>[\s\S]</strong></td>
<td align="left">匹配所有。\s 是匹配所有空白符，包括换行，\S 非空白符，不包括换行。<img src="https://www.runoob.com/wp-content/uploads/2014/03/47CA6C59-64CF-433A-909E-1E342349A4E0.jpg" alt="img" style="zoom:50%;" /></td>
</tr>
<tr>
<td align="left"><strong>\w</strong></td>
<td align="left">匹配字母、数字、下划线。等价于 [A-Za-z0-9_]<img src="https://www.runoob.com/wp-content/uploads/2014/03/F35A5971-3519-4CAE-8BEC-9DE8F4A55257.jpg" alt="img" style="zoom:50%;" /></td>
</tr>
</tbody></table>
<h3 id="非打印字符"><a href="#非打印字符" class="headerlink" title="非打印字符"></a>非打印字符</h3><p>非打印字符也可以是正则表达式的组成部分。下表列出了表示非打印字符的转义序列：</p>
<table>
<thead>
<tr>
<th align="left">字符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">\cx</td>
<td align="left">匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td>
</tr>
<tr>
<td align="left">\f</td>
<td align="left">匹配一个换页符。等价于 \x0c 和 \cL。</td>
</tr>
<tr>
<td align="left">\n</td>
<td align="left">匹配一个换行符。等价于 \x0a 和 \cJ。</td>
</tr>
<tr>
<td align="left">\r</td>
<td align="left">匹配一个回车符。等价于 \x0d 和 \cM。</td>
</tr>
<tr>
<td align="left">\s</td>
<td align="left">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。注意 Unicode 正则表达式会匹配全角空格符。</td>
</tr>
<tr>
<td align="left">\S</td>
<td align="left">匹配任何非空白字符。等价于 <code>[^ \f\n\r\t\v]</code>。</td>
</tr>
<tr>
<td align="left">\t</td>
<td align="left">匹配一个制表符。等价于 \x09 和 \cI。</td>
</tr>
<tr>
<td align="left">\v</td>
<td align="left">匹配一个垂直制表符。等价于 \x0b 和 \cK。</td>
</tr>
</tbody></table>
<h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><p>所谓特殊字符，就是一些有特殊含义的字符，如上面说的 runoo*b 中的 *，简单的说就是表示任何字符串的意思。如果要查找字符串中的 * 符号，则需要对 * 进行转义，即在其前加一个 <code>\</code>，runo*ob 匹配字符串 runo*ob。</p>
<p>许多元字符要求在试图匹配它们时特别对待。若要匹配这些特殊字符，必须首先使字符”转义”，即，将反斜杠字符*<em>*</em> 放在它们前面。下表列出了正则表达式中的特殊字符：</p>
<table>
<thead>
<tr>
<th align="left">特别字符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">$</td>
<td align="left">匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 <code>$ </code>也匹配 ‘\n’ 或 ‘\r’。要匹配<code>$</code>字符本身，请使用 $。</td>
</tr>
<tr>
<td align="left">( )</td>
<td align="left">标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )。</td>
</tr>
<tr>
<td align="left">*</td>
<td align="left">匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 *。</td>
</tr>
<tr>
<td align="left">+</td>
<td align="left">匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 +。</td>
</tr>
<tr>
<td align="left">.</td>
<td align="left">匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 . 。</td>
</tr>
<tr>
<td align="left">[</td>
<td align="left">标记一个中括号表达式的开始。要匹配 [，请使用 [。</td>
</tr>
<tr>
<td align="left">?</td>
<td align="left">匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 ?。</td>
</tr>
<tr>
<td align="left">\</td>
<td align="left">将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\n’ 匹配换行符。序列 ‘\‘ 匹配 “&quot;，而 ‘(‘ 则匹配 “(“。</td>
</tr>
<tr>
<td align="left">^</td>
<td align="left">匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 ^。</td>
</tr>
<tr>
<td align="left">{</td>
<td align="left">标记限定符表达式的开始。要匹配 {，请使用 {。</td>
</tr>
<tr>
<td align="left">|</td>
<td align="left">指明两项之间的一个选择。要匹配 |，请使用 |。</td>
</tr>
</tbody></table>
<h3 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h3><p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 ***** 或 <strong>+</strong> 或 <strong>?</strong> 或 <strong>{n}</strong> 或 <strong>{n,}</strong> 或 <strong>{n,m}</strong> 共6种。</p>
<p>正则表达式的限定符有：</p>
<table>
<thead>
<tr>
<th align="left">字符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">*</td>
<td align="left">匹配前面的子表达式零次或多次。例如，zo* 能匹配 <strong>“z”</strong> 以及 <strong>“zoo”<strong>。</strong></strong>* 等价于 **{0,}**。</td>
</tr>
<tr>
<td align="left">+</td>
<td align="left">匹配前面的子表达式一次或多次。例如，<strong>zo+</strong> 能匹配 <strong>“zo”</strong> 以及 “**zoo”**，但不能匹配 <strong>“z”<strong>。</strong>+</strong> 等价于 **{1,}**。</td>
</tr>
<tr>
<td align="left">?</td>
<td align="left">匹配前面的子表达式零次或一次。例如，<strong>do(es)?</strong> 可以匹配 <strong>“do”</strong> 、 **”does”**、 <strong>“doxy”</strong> 中的 <strong>“do”</strong> 和 <strong>“does”<strong>。</strong>?</strong> 等价于 **{0,1}**。<img src="https://www.runoob.com/wp-content/uploads/2014/03/CA742DA3-826D-463B-85F5-316DAB3515C1.jpeg" alt="img" style="zoom: 25%;" /></td>
</tr>
<tr>
<td align="left">{n}</td>
<td align="left">n 是一个非负整数。匹配确定的 <strong>n</strong> 次。例如，<strong>o{2}</strong> 不能匹配 <strong>“Bob”</strong> 中的 <strong>o</strong>，但是能匹配 <strong>“food”</strong> 中的两个 <strong>o</strong>。</td>
</tr>
<tr>
<td align="left">{n,}</td>
<td align="left">n 是一个非负整数。至少匹配n 次。例如，<strong>o{2,}</strong> 不能匹配 <strong>“Bob”</strong> 中的 <strong>o</strong>，但能匹配 <strong>“foooood”</strong> 中的所有 <strong>o</strong>。<strong>o{1,}</strong> 等价于 <strong>o+<strong>。</strong>o{0,}</strong> 则等价于 o*。</td>
</tr>
<tr>
<td align="left">{n,m}</td>
<td align="left">m 和 n 均为非负整数，其中 n &lt;&#x3D; m。最少匹配 n 次且最多匹配 m 次。例如，<strong>o{1,3}</strong> 将匹配 <strong>“fooooood”</strong> 中的前三个 <strong>o</strong>。<strong>o{0,1}</strong> 等价于 **o?**。请注意在逗号和两个数之间不能有空格。</td>
</tr>
</tbody></table>
<blockquote>
<p><code>*</code> 和 <code>+</code> 限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个 <code>? </code>就可以实现非贪婪或最小匹配。</p>
<p>例如，您可能搜索 HTML 文档，以查找在 <strong>h1</strong> 标签内的内容。HTML 代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>RUNOOB-菜鸟教程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>贪婪：</strong>下面的表达式匹配从开始小于符号 (&lt;) 到关闭 h1 标记的大于符号 (&gt;) 之间的所有内容。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/&lt;.*&gt;/</span><br></pre></td></tr></table></figure>

<img src="https://www.runoob.com/wp-content/uploads/2014/03/AD8F3320-2F2E-4513-9BB5-84450D62783D.jpg" alt="img" style="zoom: 50%;" />

<p><strong>非贪婪：</strong>如果您只需要匹配开始和结束 h1 标签，下面的非贪婪表达式只匹配 <h1></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/&lt;.*?&gt;/</span><br></pre></td></tr></table></figure>

<img src="https://www.runoob.com/wp-content/uploads/2014/03/A6E72665-CE61-46F4-A72B-A34BC13F5820.jpg" alt="img" style="zoom:50%;" />

<p>也可以使用以下正则表达式来匹配 h1 标签，表达式则是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/&lt;\w+?&gt;/</span><br></pre></td></tr></table></figure>

<img src="https://www.runoob.com/wp-content/uploads/2014/03/C6E89F76-D059-4600-A507-74C42306A790.jpg" alt="img" style="zoom:50%;" />

<p>通过在 *、+ 或 ? 限定符之后放置 ?，该表达式从”贪婪”表达式转换为”非贪婪”表达式或者最小匹配。</p>
</blockquote>
<h3 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h3><p>定位符使您能够将正则表达式固定到行首或行尾。</p>
<p>它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。</p>
<p>定位符用来描述字符串或单词的边界，<strong>^</strong> 和 <strong>$</strong> 分别指字符串的开始与结束，<strong>\b</strong> 描述单词的前或后边界，<strong>\B</strong> 表示非单词边界。</p>
<p>正则表达式的定位符有：</p>
<table>
<thead>
<tr>
<th align="left">字符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">^</td>
<td align="left">匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配。</td>
</tr>
<tr>
<td align="left">$</td>
<td align="left">匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配。</td>
</tr>
<tr>
<td align="left">\b</td>
<td align="left">匹配一个单词边界，即字与空格间的位置。</td>
</tr>
<tr>
<td align="left">\B</td>
<td align="left">非单词边界匹配。</td>
</tr>
</tbody></table>
<p><strong>注意</strong>：不能将限定符与定位符一起使用。由于在紧靠换行或者单词边界的前面或后面不能有一个以上位置，因此不允许诸如 <strong>^*</strong> 之类的表达式。</p>
<p>若要匹配一行文本开始处的文本，请在正则表达式的开始使用 <strong>^</strong> 字符。不要将 <strong>^</strong> 的这种用法与中括号表达式内的用法混淆。</p>
<p>若要匹配一行文本的结束处的文本，请在正则表达式的结束处使用 <strong>$</strong> 字符。</p>
<p>若要在搜索章节标题时使用定位点，下面的正则表达式匹配一个章节标题，该标题只包含两个尾随数字，并且出现在行首：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/^Chapter [<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">0</span>,<span class="number">1</span>&#125;/</span><br></pre></td></tr></table></figure>

<p>真正的章节标题不仅出现行的开始处，而且它还是该行中仅有的文本。它既出现在行首又出现在同一行的结尾。下面的表达式能确保指定的匹配只匹配章节而不匹配交叉引用。通过创建只匹配一行文本的开始和结尾的正则表达式，就可做到这一点。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/^Chapter [<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">0</span>,<span class="number">1</span>&#125;$/</span><br></pre></td></tr></table></figure>

<p>匹配单词边界稍有不同，但向正则表达式添加了很重要的能力。单词边界是单词和空格之间的位置。非单词边界是任何其他位置。下面的表达式匹配单词 Chapter 的开头三个字符，因为这三个字符出现在单词边界后面：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/\bCha/</span><br></pre></td></tr></table></figure>

<p><strong>\b</strong> 字符的位置是非常重要的。如果它位于要匹配的字符串的开始，它在单词的开始处查找匹配项。如果它位于字符串的结尾，它在单词的结尾处查找匹配项。例如，下面的表达式匹配单词 Chapter 中的字符串 ter，因为它出现在单词边界的前面：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/ter\b/</span><br></pre></td></tr></table></figure>

<p>下面的表达式匹配 Chapter 中的字符串 apt，但不匹配 aptitude 中的字符串 apt：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/\Bapt/</span><br></pre></td></tr></table></figure>

<p>字符串 apt 出现在单词 Chapter 中的非单词边界处，但出现在单词 aptitude 中的单词边界处。对于 <strong>\B</strong> 非单词边界运算符，不可以匹配单词的开头或结尾，如果是下面的表达式，就不匹配 Chapter 中的 Cha：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">\BCha</span><br></pre></td></tr></table></figure>



<h3 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h3><p>用圆括号 <strong>()</strong> 将所有选择项括起来，相邻的选择项之间用 <strong>|</strong> 分隔。</p>
<p><strong>()</strong> 表示捕获分组，**()** 会把每个分组里的匹配的值保存起来， 多个匹配值可以通过数字 n 来查看(<strong>n</strong> 是一个数字，表示第 n 个捕获组的内容)。</p>
<img src="https://www.runoob.com/wp-content/uploads/2014/03/366574CC-3706-4B4C-8782-1BFF4CF57582.jpg" alt="img" style="zoom:50%;" />

<img src="https://www.runoob.com/wp-content/uploads/2014/03/82A7298A-2A94-49E3-AA27-A7778EE89711.jpg" alt="img" style="zoom:50%;" />

<blockquote>
<p>但用圆括号会有一个副作用，使相关的匹配会被缓存，此时可用 <strong>?:</strong> 放在第一个选项前来消除这种副作用。</p>
<p>其中 <strong>?:</strong> 是非捕获元之一，还有两个非捕获元是 <strong>?&#x3D;</strong> 和 **?!**，这两个还有更多的含义，前者为正向预查，在任何开始匹配圆括号内的正则表达式模式的位置来匹配搜索字符串，后者为负向预查，在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串。</p>
</blockquote>
<h4 id="x3D-、-lt-x3D-、-、-lt-区别"><a href="#x3D-、-lt-x3D-、-、-lt-区别" class="headerlink" title="?&#x3D;、?&lt;&#x3D;、?!、?&lt;! 区别"></a>?&#x3D;、?&lt;&#x3D;、?!、?&lt;! 区别</h4><p>**exp1(?&#x3D;exp2)**：查找 exp2 前面的 exp1。</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2014/03/reg-111.jpg" alt="img"></p>
<p><strong>(?&lt;&#x3D;exp2)exp1</strong>：查找 exp2 后面的 exp1。</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2014/03/reg-222.jpg" alt="img"></p>
<p>**exp1(?!exp2)**：查找后面不是 exp2 的 exp1。</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2014/03/reg-333.jpg" alt="img"></p>
<p><strong>(?&lt;!exp2)exp1</strong>：查找前面不是 exp2 的 exp1。</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2014/03/reg-444.jpg" alt="img"></p>
<h3 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h3><p>对一个正则表达式模式或部分模式两边添加圆括号将导致相关匹配存储到一个临时缓冲区中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。</p>
<ul>
<li>每个缓冲区都可以使用 <strong>\n</strong> 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。</li>
</ul>
<p>可以使用非捕获元字符 <strong>?:<strong>、</strong>?&#x3D;</strong> 或 <strong>?!</strong> 来重写捕获，忽略对相关匹配的保存。</p>
<p>反向引用的最简单的、最有用的应用之一，是提供查找文本中两个相同的相邻单词的匹配项的能力。以下面的句子为例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Is is the cost of of gasoline going up up?</span><br></pre></td></tr></table></figure>

<p>上面的句子很显然有多个重复的单词。如果能设计一种方法定位该句子，而不必查找每个单词的重复出现，那该有多好。下面的正则表达式使用单个子表达式来实现这一点：</p>
<p>查找重复的单词：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;Is is the cost of of gasoline going up up&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> patt1 = <span class="regexp">/\b([a-z]+) \1\b/igm</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(str.<span class="title function_">match</span>(patt1));<span class="comment">//Is is,of of,up up</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>捕获的表达式，正如 <strong>[a-z]+</strong> 指定的，包括一个或多个字母。正则表达式的第二部分是对以前捕获的子匹配项的引用，即，单词的第二个匹配项正好由括号表达式匹配。<strong>\1</strong> 指定第一个子匹配项。</p>
<p>单词边界元字符确保只检测整个单词。否则，诸如 “is issued” 或 “this is” 之类的词组将不能正确地被此表达式识别。</p>
<p>正则表达式后面的全局标记 <strong>g</strong> 指定将该表达式应用到输入字符串中能够查找到的尽可能多的匹配。</p>
<p>表达式的结尾处的不区分大小写 <strong>i</strong> 标记指定不区分大小写。</p>
<p>多行标记 <strong>m</strong> 指定换行符的两边可能出现潜在的匹配。</p>
</blockquote>
<p>反向引用还可以将通用资源指示符 (URI) 分解为其组件。假定您想将下面的 URI 分解为协议（ftp、http 等等）、域地址和页&#x2F;路径：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="comment">//www.runoob.com:80/html/html-tutorial.html</span></span><br></pre></td></tr></table></figure>

<p>输出所有匹配的数据：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;https://www.runoob.com:80/html/html-tutorial.html&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> patt1 = <span class="regexp">/(\w+):\/\/([^/:]+)(:\d*)?([^# ]*)/</span>;</span><br><span class="line">arr = str.<span class="title function_">match</span>(patt1);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> ; i++) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(arr[i]);</span><br><span class="line">	<span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/RegExp/image-20230405155204213.png" alt="image-20230405155204213" style="zoom:80%;" />

<blockquote>
<p>第一个括号子表达式捕获 Web 地址的协议部分。该子表达式匹配在冒号和两个正斜杠前面的任何单词。</p>
<p>第二个括号子表达式捕获地址的域地址部分。子表达式匹配非 <strong>:</strong> 和 <strong>&#x2F;</strong> 之后的一个或多个字符。</p>
<p>第三个括号子表达式捕获端口号（如果指定了的话）。该子表达式匹配冒号后面的零个或多个数字。只能重复一次该子表达式。</p>
<p>最后，第四个括号子表达式捕获 Web 地址指定的路径和 &#x2F; 或页信息。该子表达式能匹配不包括 # 或空格字符的任何字符序列。</p>
<p>将正则表达式应用到上面的 URI，各子匹配项包含下面的内容：</p>
<ul>
<li>第一个括号子表达式包含 <code>https</code></li>
<li>第二个括号子表达式包含 <code>www.runoob.com</code></li>
<li>第三个括号子表达式包含 <code>:80</code></li>
<li>第四个括号子表达式包含 <code>/html/html-tutorial.html</code></li>
</ul>
</blockquote>
<h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p>正则表达式从左到右进行计算，并遵循优先级顺序，这与算术表达式非常类似。</p>
<p>相同优先级的从左到右进行运算，不同优先级的运算先高后低。下表从最高到最低说明了各种正则表达式运算符的优先级顺序：</p>
<table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">\</td>
<td align="left">转义符</td>
</tr>
<tr>
<td align="left">(), (?:), (?&#x3D;), []</td>
<td align="left">圆括号和方括号</td>
</tr>
<tr>
<td align="left">*, +, ?, {n}, {n,}, {n,m}</td>
<td align="left">限定符</td>
</tr>
<tr>
<td align="left">^, $, \任何元字符、任何字符</td>
<td align="left">定位点和序列（即：位置和顺序）</td>
</tr>
<tr>
<td align="left">|</td>
<td align="left">替换，”或”操作 字符具有高于替换运算符的优先级，使得”m|food”匹配”m”或”food”。若要匹配”mood”或”food”，请使用括号创建子表达式，从而产生”(m|f)ood”。</td>
</tr>
</tbody></table>
<h2 id="第二章-修饰符（标记）"><a href="#第二章-修饰符（标记）" class="headerlink" title="第二章 修饰符（标记）"></a>第二章 修饰符（标记）</h2><p>标记也称为修饰符，正则表达式的标记用于指定额外的匹配策略。</p>
<p>标记不写在正则表达式里，标记位于表达式之外，格式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/pattern/flags</span><br></pre></td></tr></table></figure>

<p>下表列出了正则表达式常用的修饰符：</p>
<table>
<thead>
<tr>
<th align="left">修饰符</th>
<th align="left">含义</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">i</td>
<td align="left">ignore - 不区分大小写</td>
<td align="left">将匹配设置为不区分大小写，搜索时不区分大小写: A 和 a 没有区别。</td>
</tr>
<tr>
<td align="left">g</td>
<td align="left">global - 全局匹配</td>
<td align="left">查找所有的匹配项。</td>
</tr>
<tr>
<td align="left">m</td>
<td align="left">multi line - 多行匹配</td>
<td align="left">使边界字符 <strong>^</strong> 和 <strong>$</strong> 匹配每一行的开头和结尾，记住是多行，而不是整个字符串的开头和结尾。</td>
</tr>
<tr>
<td align="left">s</td>
<td align="left">特殊字符圆点 <strong>.</strong> 中包含换行符 <strong>\n</strong></td>
<td align="left">默认情况下的圆点 <strong>.</strong> 是匹配除换行符 <strong>\n</strong> 之外的任何字符，加上 <strong>s</strong> 修饰符之后, <strong>.</strong> 中包含换行符 \n。</td>
</tr>
</tbody></table>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/RegExp/image-20230405155631664.png" alt="image-20230405155631664" style="zoom:50%;" />

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/RegExp/image-20230405155645805.png" alt="image-20230405155645805" style="zoom:50%;" />

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/RegExp/image-20230405155703705.png" alt="image-20230405155703705" style="zoom: 50%;" />

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/RegExp/image-20230405155720126.png" alt="image-20230405155720126" style="zoom:50%;" />



<h2 id="第三章-元字符（总览）"><a href="#第三章-元字符（总览）" class="headerlink" title="第三章 元字符（总览）"></a>第三章 元字符（总览）</h2><p>下表包含了元字符的完整列表以及它们在正则表达式上下文中的行为：</p>
<table>
<thead>
<tr>
<th align="left">字符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">\</td>
<td align="left">将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，’n’ 匹配字符 “n”。’\n’ 匹配一个换行符。序列 ‘\‘ 匹配 “&quot; 而 “(“ 则匹配 “(“。</td>
</tr>
<tr>
<td align="left">^</td>
<td align="left">匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置。</td>
</tr>
<tr>
<td align="left">$</td>
<td align="left">匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ‘\n’ 或 ‘\r’ 之前的位置。</td>
</tr>
<tr>
<td align="left">*</td>
<td align="left">匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td>
</tr>
<tr>
<td align="left">+</td>
<td align="left">匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td>
</tr>
<tr>
<td align="left">?</td>
<td align="left">匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 。? 等价于 {0,1}。</td>
</tr>
<tr>
<td align="left">{n}</td>
<td align="left">n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td>
</tr>
<tr>
<td align="left">{n,}</td>
<td align="left">n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td>
</tr>
<tr>
<td align="left">{n,m}</td>
<td align="left">m 和 n 均为非负整数，其中n &lt;&#x3D; m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td>
</tr>
<tr>
<td align="left">?</td>
<td align="left">当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。</td>
</tr>
<tr>
<td align="left">.</td>
<td align="left">匹配除换行符（\n、\r）之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用像”<strong>(.|\n)</strong>“的模式。</td>
</tr>
<tr>
<td align="left">(pattern)</td>
<td align="left">匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 ‘(‘ 或 ‘)‘。</td>
</tr>
<tr>
<td align="left">(?:pattern)</td>
<td align="left">匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 “或” 字符 (|) 来组合一个模式的各个部分是很有用。例如， ‘industr(?:y|ies) 就是一个比 ‘industry|industries’ 更简略的表达式。</td>
</tr>
<tr>
<td align="left">(?&#x3D;pattern)</td>
<td align="left">正向肯定预查（look ahead positive assert），在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，”Windows(?&#x3D;95|98|NT|2000)”能匹配”Windows2000”中的”Windows”，但不能匹配”Windows3.1”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td>
</tr>
<tr>
<td align="left">(?!pattern)</td>
<td align="left">正向否定预查(negative assert)，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如”Windows(?!95|98|NT|2000)”能匹配”Windows3.1”中的”Windows”，但不能匹配”Windows2000”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td>
</tr>
<tr>
<td align="left">(?&lt;&#x3D;pattern)</td>
<td align="left">反向(look behind)肯定预查，与正向肯定预查类似，只是方向相反。例如，”&#96;(?&lt;&#x3D;95</td>
</tr>
<tr>
<td align="left">(?&lt;!pattern)</td>
<td align="left">反向否定预查，与正向否定预查类似，只是方向相反。例如”&#96;(?&lt;!95</td>
</tr>
<tr>
<td align="left">x|y</td>
<td align="left">匹配 x 或 y。例如，’z|food’ 能匹配 “z” 或 “food”。’(z|f)ood’ 则匹配 “zood” 或 “food”。</td>
</tr>
<tr>
<td align="left">[xyz]</td>
<td align="left">字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td>
</tr>
<tr>
<td align="left">[^xyz]</td>
<td align="left">负值字符集合。匹配未包含的任意字符。例如， ‘<code>[^abc]</code>‘ 可以匹配 “plain” 中的’p’、’l’、’i’、’n’。</td>
</tr>
<tr>
<td align="left">[a-z]</td>
<td align="left">字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。</td>
</tr>
<tr>
<td align="left">[^a-z]</td>
<td align="left">负值字符范围。匹配任何不在指定范围内的任意字符。例如，’<code>[^a-z]</code>‘ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。</td>
</tr>
<tr>
<td align="left">\b</td>
<td align="left">匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td>
</tr>
<tr>
<td align="left">\B</td>
<td align="left">匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td>
</tr>
<tr>
<td align="left">\cx</td>
<td align="left">匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td>
</tr>
<tr>
<td align="left">\d</td>
<td align="left">匹配一个数字字符。等价于 [0-9]。</td>
</tr>
<tr>
<td align="left">\D</td>
<td align="left">匹配一个非数字字符。等价于 [^0-9]。</td>
</tr>
<tr>
<td align="left">\f</td>
<td align="left">匹配一个换页符。等价于 \x0c 和 \cL。</td>
</tr>
<tr>
<td align="left">\n</td>
<td align="left">匹配一个换行符。等价于 \x0a 和 \cJ。</td>
</tr>
<tr>
<td align="left">\r</td>
<td align="left">匹配一个回车符。等价于 \x0d 和 \cM。</td>
</tr>
<tr>
<td align="left">\s</td>
<td align="left">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td>
</tr>
<tr>
<td align="left">\S</td>
<td align="left">匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td>
</tr>
<tr>
<td align="left">\t</td>
<td align="left">匹配一个制表符。等价于 \x09 和 \cI。</td>
</tr>
<tr>
<td align="left">\v</td>
<td align="left">匹配一个垂直制表符。等价于 \x0b 和 \cK。</td>
</tr>
<tr>
<td align="left">\w</td>
<td align="left">匹配字母、数字、下划线。等价于’[A-Za-z0-9_]’。</td>
</tr>
<tr>
<td align="left">\W</td>
<td align="left">匹配非字母、数字、下划线。等价于 ‘[^A-Za-z0-9_]’。</td>
</tr>
<tr>
<td align="left">\xn</td>
<td align="left">匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，’\x41’ 匹配 “A”。’\x041’ 则等价于 ‘\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码。</td>
</tr>
<tr>
<td align="left">\num</td>
<td align="left">匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\1’ 匹配两个连续的相同字符。</td>
</tr>
<tr>
<td align="left">\n</td>
<td align="left">标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</td>
</tr>
<tr>
<td align="left">\nm</td>
<td align="left">标识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。</td>
</tr>
<tr>
<td align="left">\nml</td>
<td align="left">如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</td>
</tr>
<tr>
<td align="left">\un</td>
<td align="left">匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。</td>
</tr>
</tbody></table>
<p>分析一个匹配邮箱的正则表达式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;abcd test@runoob.com 1234&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> patt1 = <span class="regexp">/\b[\w.%+-]+@[\w.-]+\.[a-zA-Z]&#123;2,6&#125;\b/g</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(str.<span class="title function_">match</span>(patt1));</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/RegExp/image-20230405160015358.png" alt="image-20230405160015358" style="zoom:80%;" /><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/RegExp/image-20230405160000530.png" alt="image-20230405160000530" style="zoom:80%;" /></p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/RegExp/image-20230405160113581.png" alt="image-20230405160113581" style="zoom:80%;" />



<h2 id="第四章-示例"><a href="#第四章-示例" class="headerlink" title="第四章 示例"></a>第四章 示例</h2><table>
<thead>
<tr>
<th align="left">正则表达式</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>hello</code></td>
<td align="left">匹配 {hello}</td>
</tr>
<tr>
<td align="left">&#96;gray</td>
<td align="left">grey&#96;</td>
</tr>
<tr>
<td align="left">&#96;gr(a</td>
<td align="left">e)y&#96;</td>
</tr>
<tr>
<td align="left"><code>gr[ae]y</code></td>
<td align="left">匹配 {gray, grey}</td>
</tr>
<tr>
<td align="left"><code>b[aeiou]bble</code></td>
<td align="left">匹配 {babble, bebble, bibble, bobble, bubble}</td>
</tr>
<tr>
<td align="left">&#96;[b-chm-pP]at</td>
<td align="left">ot&#96;</td>
</tr>
<tr>
<td align="left"><code>colou?r</code></td>
<td align="left">匹配 {color, colour}</td>
</tr>
<tr>
<td align="left">&#96;rege(x(es)?</td>
<td align="left">xps?)&#96;</td>
</tr>
<tr>
<td align="left"><code>go*gle</code></td>
<td align="left">匹配 {ggle, gogle, google, gooogle, goooogle, …}</td>
</tr>
<tr>
<td align="left"><code>go+gle</code></td>
<td align="left">匹配 {gogle, google, gooogle, goooogle, …}</td>
</tr>
<tr>
<td align="left"><code>g(oog)+le</code></td>
<td align="left">匹配 {google, googoogle, googoogoogle, googoogoogoogle, …}</td>
</tr>
<tr>
<td align="left"><code>z&#123;3&#125;</code></td>
<td align="left">匹配 {zzz}</td>
</tr>
<tr>
<td align="left"><code>z&#123;3,6&#125;</code></td>
<td align="left">匹配 {zzz, zzzz, zzzzz, zzzzzz}</td>
</tr>
<tr>
<td align="left"><code>z&#123;3,&#125;</code></td>
<td align="left">匹配 {zzz, zzzz, zzzzz, …}</td>
</tr>
<tr>
<td align="left"><code>[Bb]rainf\*\*k</code></td>
<td align="left">匹配 {Brainf<strong>k, brainf</strong>k}</td>
</tr>
<tr>
<td align="left"><code>\d</code></td>
<td align="left">匹配 {0,1,2,3,4,5,6,7,8,9}</td>
</tr>
<tr>
<td align="left"><code>1\d&#123;10&#125;</code></td>
<td align="left">匹配 11 个数字，以 1 开头</td>
</tr>
<tr>
<td align="left">&#96;[2-9]</td>
<td align="left">[12]\d</td>
</tr>
<tr>
<td align="left"><code>Hello\nworld</code></td>
<td align="left">匹配 Hello 后跟换行符，后跟 world</td>
</tr>
<tr>
<td align="left"><code>\d+(\.\d\d)?</code></td>
<td align="left">包含一个正整数或包含两位小数位的浮点数。</td>
</tr>
<tr>
<td align="left"><code>[^*@#]</code></td>
<td align="left">排除 *、@ 、# 三个特色符号</td>
</tr>
<tr>
<td align="left"><code>//[^\r\n]*[\r\n]</code></td>
<td align="left">匹配 <strong>&#x2F;&#x2F;</strong> 开头的注释</td>
</tr>
<tr>
<td align="left"><code>^dog</code></td>
<td align="left">匹配以 “dog” 开始</td>
</tr>
<tr>
<td align="left"><code>dog$</code></td>
<td align="left">匹配以 “dog” 结尾</td>
</tr>
<tr>
<td align="left"><code>^dog$</code></td>
<td align="left">is exactly “dog”</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">正则表达式</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>/\b([a-z]+) \1\b/gi</code></td>
<td align="left">一个单词连续出现的位置。</td>
</tr>
<tr>
<td align="left"><code>/(\w+):\/\/([^/:]+)(:\d*)?([^# ]*)/</code></td>
<td align="left">匹配一个 URL 解析为协议、域、端口及相对路径。</td>
</tr>
<tr>
<td align="left">&#96;&#x2F;^(?:Chapter</td>
<td align="left">Section) [1-9][0-9]{0,1}$&#x2F;&#96;</td>
</tr>
<tr>
<td align="left"><code>/[-a-z]/</code></td>
<td align="left">a 至 z 共 26个 字母再加一个 <strong>-</strong> 号。</td>
</tr>
<tr>
<td align="left"><code>/ter\b/</code></td>
<td align="left">可匹配 chapter，而不能匹配 terminal。</td>
</tr>
<tr>
<td align="left"><code>/\Bapt/</code></td>
<td align="left">可匹配 chapter，而不能匹配 aptitude。</td>
</tr>
<tr>
<td align="left">&#96;&#x2F;Windows(?&#x3D;95</td>
<td align="left">98</td>
</tr>
<tr>
<td align="left"><code>/^\s*$/</code></td>
<td align="left">匹配空行。</td>
</tr>
<tr>
<td align="left"><code>/\d&#123;2&#125;-\d&#123;5&#125;/</code></td>
<td align="left">验证由两位数字、一个连字符再加 5 位数字组成的 ID 号。</td>
</tr>
<tr>
<td align="left"><code>&lt;[a-zA-Z]+.*?&gt;([\s\S]*?)&lt;/[a-zA-Z]*?&gt;</code></td>
<td align="left">匹配 HTML 标记。</td>
</tr>
</tbody></table>
<h4 id="在线测试网站"><a href="#在线测试网站" class="headerlink" title="在线测试网站"></a>在线测试网站</h4><p><a href="https://c.runoob.com/front-end/854/">https://c.runoob.com/front-end/854/</a></p>
]]></content>
      <categories>
        <category>通用知识</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>《PHP》精简Notes</title>
    <url>/butterflyblog/2023/08/27/%E3%80%8APHP%E3%80%8B%E7%B2%BE%E7%AE%80Notes/</url>
    <content><![CDATA[<h3 id="《PHP》精简Notes"><a href="#《PHP》精简Notes" class="headerlink" title="《PHP》精简Notes"></a>《PHP》精简Notes</h3><blockquote>
<p>资料来源：<a href="https://www.bilibili.com/video/BV1Xh411S7G1">PHP8快速入门在线教程（基础+实战）</a></p>
<p>@Seymour0314</p>
</blockquote>
<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><ul>
<li><p>扩展名<code>.php</code></p>
</li>
<li><p>PHP文件中可以包含HTML&#x2F;CSS&#x2F;JavaScript代码</p>
</li>
<li><p>PHP标记<code>&lt;?php ... ?&gt;</code></p>
<p>语句结束符<code>;</code>、<code>&#123;&#125;</code></p>
<p>注释<code>//</code>、<code>/* */</code></p>
</li>
<li><p>输出</p>
<p><code>echo</code>可以多个字符串，逗号隔开</p>
<p><code>print</code>只允许输出一个字符串</p>
</li>
<li><p>变量</p>
<p><code>$</code>开头</p>
<p>后接数字、字母、下划线，数字不能开头</p>
</li>
<li><p>混写HTML、PHP</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">	$title = &#x27;php标题&#x27;;</span><br><span class="line">	$link = &#x27;/detail.html&#x27;;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;h1&gt;</span><br><span class="line">    &lt;a href=&quot;&lt;?php echo $link; ?&gt;&quot;&gt;&lt;?php echo $title; ?&gt;&lt;/a&gt;</span><br><span class="line">&lt;/h1&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="二、数据类型"><a href="#二、数据类型" class="headerlink" title="二、数据类型"></a>二、数据类型</h2><h3 id="2-1-标量数据类型"><a href="#2-1-标量数据类型" class="headerlink" title="2.1 标量数据类型"></a>2.1 标量数据类型</h3><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230828160036582.png" alt="image-20230828160036582" style="zoom:67%;" /> 

<ul>
<li><p>数据类型</p>
<ul>
<li>布尔型<code>Boolean</code><ul>
<li>true、false</li>
</ul>
</li>
<li>整型<code>Integer</code></li>
<li>浮点型<code>Float</code></li>
<li>字符串<code>String</code></li>
</ul>
<blockquote>
<p>输出</p>
<ul>
<li><code>echo</code>输出数据值</li>
<li><code>var_dump</code>打印数据类型和值</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="variable">$y</span> = <span class="string">&#x27;你好呀&#x27;</span>;</span><br><span class="line">	<span class="title function_ invoke__">var_dump</span>(<span class="variable">$y</span>);</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>中文字符采用UTF-8，为3字节。</p>
<ul>
<li><p>字符串写双引号和单引号的区别</p>
<p>双引号内可以直接写<code>$</code>作为变量显示，</p>
<p>单引号只是作为字符串显示，并不看作变量。</p>
</li>
</ul>
<p>常量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;HOST&#x27;</span>,<span class="string">&#x27;127.0.0.1&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> HOST;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">NAME</span> = <span class="string">&#x27;小白&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> NAME;</span><br></pre></td></tr></table></figure></blockquote>
</li>
</ul>
<h3 id="2-2-复合数据类型"><a href="#2-2-复合数据类型" class="headerlink" title="2.2 复合数据类型"></a>2.2 复合数据类型</h3><ul>
<li><p>复合数据类型</p>
<ul>
<li>数组array</li>
<li>对象object</li>
<li>可调用callable</li>
<li>可迭代iterable</li>
</ul>
</li>
<li><p>特殊数据类型</p>
<ul>
<li>空值<code>NULL</code></li>
<li>资源<code>resource</code></li>
</ul>
<blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="variable">$x</span> = <span class="literal">null</span>;</span><br><span class="line">	<span class="title function_ invoke__">var_dump</span>(<span class="variable">$x</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></blockquote>
</li>
</ul>
<h4 id="2-2-1-数组array"><a href="#2-2-1-数组array" class="headerlink" title="2.2.1 数组array"></a>2.2.1 数组array</h4><ul>
<li><p>说是数组，实际上像字典，本身是键和值组成。</p>
</li>
<li><p>两种表示方法</p>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$arr1</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;小黄&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;小兰&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;小黑&#x27;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$arr1</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">    <span class="variable">$arr2</span> = [</span><br><span class="line">        <span class="string">&#x27;小黄&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;小兰&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;小黑&#x27;</span></span><br><span class="line">    ];</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$arr2</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230827161845811.png" alt="image-20230827161845811" style="zoom:80%;" />

<ul>
<li>使用方法</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$arr1</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;A&#x27;</span> =&gt; <span class="string">&#x27;小黄&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;小兰&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;小黑&#x27;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$arr1</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$arr1</span>[<span class="string">&#x27;A&#x27;</span>],<span class="string">&#x27;&lt;br&gt;&#x27;</span>;  <span class="comment">// 小黄</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$arr1</span>[<span class="number">0</span>],<span class="string">&#x27;&lt;br&gt;&#x27;</span>;  <span class="comment">// 小兰</span></span><br><span class="line">    <span class="title function_ invoke__">print_r</span>(<span class="variable">$arr1</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;我的名字是&#x27;</span> . <span class="variable">$arr1</span>[<span class="number">0</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230827162446251.png" alt="image-20230827162446251" style="zoom:80%;" />

<ul>
<li><p>多维数组</p>
<p>嵌套即可</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$arr</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;A&#x27;</span> =&gt; <span class="string">&#x27;小黄&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;小兰&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;小黑&#x27;</span>,</span><br><span class="line">        <span class="keyword">array</span>(</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="string">&#x27;2&#x27;</span></span><br><span class="line">        ),</span><br><span class="line">        <span class="string">&#x27;B&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;ab&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;cd&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">    );</span><br><span class="line">    <span class="title function_ invoke__">print_r</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230827163101391.png" alt="image-20230827163101391" style="zoom:80%;" /> 
</li>
<li><p>循环</p>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$arr</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;A&#x27;</span> =&gt; <span class="string">&#x27;小黄&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;小兰&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;小黑&#x27;</span>,</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$k</span>.<span class="variable">$v</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230827163630549.png" alt="image-20230827163630549" style="zoom:80%;" /> 

<ul>
<li><p>实际使用</p>
<p>有两种方法，</p>
<p>一是把html的代码直接作为echo的字符串（不拆分php，技巧：用<code>.</code>连接字符串和变量来一次性<code>echo</code>）；</p>
<p>二是html代码作为html代码，把php代码拆开，随处写php（拆分多段php代码）。</p>
<p>第一种自行写，下面是第二种。</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $arr = array(</span><br><span class="line">        [</span><br><span class="line">            &#x27;title&#x27; =&gt; &#x27;学习&#x27;,</span><br><span class="line">            &#x27;content&#x27; =&gt; &#x27;快乐学习&#x27;</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            &#x27;title&#x27; =&gt; &#x27;吃饭&#x27;,</span><br><span class="line">            &#x27;content&#x27; =&gt; &#x27;快乐吃饭&#x27;</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            &#x27;title&#x27; =&gt; &#x27;睡觉&#x27;,</span><br><span class="line">            &#x27;content&#x27; =&gt; &#x27;快乐睡觉&#x27;</span><br><span class="line">        ],</span><br><span class="line">    );</span><br><span class="line">    foreach($arr as $k =&gt; $v)&#123;</span><br><span class="line">?&gt;</span><br><span class="line">    &lt;h3&gt;&lt;?php echo $arr[$k][&#x27;title&#x27;] ?&gt;&lt;/h3&gt;</span><br><span class="line">    &lt;p&gt;&lt;?php echo $arr[$k][&#x27;content&#x27;] ?&gt;&lt;/p&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230827164406617.png" alt="image-20230827164406617" style="zoom:80%;" /> 





<h2 id="三、流程操作"><a href="#三、流程操作" class="headerlink" title="三、流程操作"></a>三、流程操作</h2><h3 id="3-1-条件判断"><a href="#3-1-条件判断" class="headerlink" title="3.1 条件判断"></a>3.1 条件判断</h3><ul>
<li><p>三元运算符</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$x</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$x</span>?<span class="string">&#x27;学习&#x27;</span>:<span class="string">&#x27;睡觉&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230827165306305.png" alt="image-20230827165306305" style="zoom:80%;" /> 
</li>
<li><p>语句1</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$x</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="variable">$y</span> = <span class="string">&#x27;睡觉&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$x</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$x</span>;</span><br><span class="line">    &#125;<span class="keyword">elseif</span>(<span class="variable">$y</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$y</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;没有&#x27;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230827165519986.png" alt="image-20230827165519986" style="zoom:80%;" /> 
</li>
<li><p>语句2</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$x</span> = <span class="string">&#x27;睡觉&#x27;</span>;</span><br><span class="line">    <span class="keyword">switch</span>(<span class="variable">$x</span>)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;学习&#x27;</span>:</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;要学习辣&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;睡觉&#x27;</span>:</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;要睡觉辣&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;吃饭&#x27;</span>:</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;要吃饭辣&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;不知道&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230827165754171.png" alt="image-20230827165754171" style="zoom:80%;" /> 
</li>
<li><p>php8新特性<code>match</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$x</span> = <span class="string">&#x27;睡觉&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="keyword">match</span>(<span class="variable">$x</span>)&#123;</span><br><span class="line">        <span class="string">&#x27;学习&#x27;</span>,<span class="string">&#x27;study&#x27;</span> =&gt; <span class="string">&#x27;要学习study辣&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;睡觉&#x27;</span>,<span class="string">&#x27;sleep&#x27;</span> =&gt; <span class="string">&#x27;要睡觉sleep辣&#x27;</span>,</span><br><span class="line">        <span class="keyword">default</span> =&gt; <span class="string">&#x27;不知道干嘛&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230827170127060.png" alt="image-20230827170127060" style="zoom:80%;" /> 

<blockquote>
<ul>
<li><p>对比switch和match</p>
<p>switch是语句，模糊比较，<code>10</code>和<code>&#39;10&#39;</code>会匹配；</p>
<p>match是表达式，准确比较，<code>10</code>和<code>&#39;10&#39;</code>不匹配。</p>
</li>
</ul>
</blockquote>
</li>
</ul>
<h3 id="3-2-系统函数"><a href="#3-2-系统函数" class="headerlink" title="3.2 系统函数"></a>3.2 系统函数</h3><ul>
<li><p>是否存在函数</p>
<blockquote>
<p>用<code>!empty()</code>比较好，区别是对于<code>0</code>的判断不一样。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// 直接判断不存在的变量会报错</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$x</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;我是A&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用isset函数判断，不存在就不会输出</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$x</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;我是B&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 类似还有empty函数，不存在才输出</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$x</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;我是C&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230827170814734.png" alt="image-20230827170814734" style="zoom:80%;" /> 
</li>
<li><p>函数</p>
<ul>
<li>系统函数</li>
<li>自定义函数</li>
</ul>
</li>
</ul>
<blockquote>
<p>官网参考：<a href="https://www.php.net/manual/zh/funcref.php">PHP手册：函数参考</a></p>
</blockquote>
<h4 id="3-2-1-String函数"><a href="#3-2-1-String函数" class="headerlink" title="3.2.1 String函数"></a>3.2.1 String函数</h4><blockquote>
<p>参考：<a href="https://www.php.net/manual/zh/book.strings.php">字符串</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">strlen — 获取字符串长度</span><br><span class="line">strrev — 反转字符串</span><br><span class="line">str_replace — 子字符串替换</span><br><span class="line">trim — 去除字符串首尾处的空白字符（或者其他字符）</span><br><span class="line">explode — 使用一个字符串分割另一个字符串，得到数组</span><br><span class="line">str_split — 将字符串按长度拆分，转换为数组</span><br><span class="line">strpos — 查找字符串首次、n次出现的位置</span><br><span class="line">str_contains — 确定字符串是否包含指定子串</span><br><span class="line">md5 — 计算字符串的 MD5 散列值</span><br><span class="line">strtolower — 将字符串转化为小写</span><br><span class="line">strtoupper — 将字符串转化为大写</span><br><span class="line">str_starts_with — 检查字符串是否以指定子串开头</span><br><span class="line">str_ends_with — 检查字符串是否以指定子串结尾</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&quot;Mary Had A Little Lamb and She LOVED It So&quot;</span>;</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$str</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$str</span>; <span class="comment">// 打印 mary had a little lamb and she loved it so</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">strrev</span>(<span class="string">&quot;Hello world!&quot;</span>); <span class="comment">// 输出 &quot;!dlrow olleH&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="variable">$text</span>   = <span class="string">&quot;\t\tThese are a few words :) ...  &quot;</span>;</span><br><span class="line"><span class="variable">$trimmed</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$text</span>);	<span class="comment">//These are a few words :) ...</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值: &lt;body text=&#x27;black&#x27;&gt;</span></span><br><span class="line"><span class="variable">$bodytag</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;%body%&quot;</span>, <span class="string">&quot;black&quot;</span>, <span class="string">&quot;&lt;body text=&#x27;%body%&#x27;&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值: Hll Wrld f PHP</span></span><br><span class="line"><span class="variable">$vowels</span> = <span class="keyword">array</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;I&quot;</span>, <span class="string">&quot;O&quot;</span>, <span class="string">&quot;U&quot;</span>);</span><br><span class="line"><span class="variable">$onlyconsonants</span> = <span class="title function_ invoke__">str_replace</span>(<span class="variable">$vowels</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;Hello World of PHP&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值: You should eat pizza, beer, and ice cream every day</span></span><br><span class="line"><span class="variable">$phrase</span>  = <span class="string">&quot;You should eat fruits, vegetables, and fiber every day.&quot;</span>;</span><br><span class="line"><span class="variable">$healthy</span> = <span class="keyword">array</span>(<span class="string">&quot;fruits&quot;</span>, <span class="string">&quot;vegetables&quot;</span>, <span class="string">&quot;fiber&quot;</span>);</span><br><span class="line"><span class="variable">$yummy</span>   = <span class="keyword">array</span>(<span class="string">&quot;pizza&quot;</span>, <span class="string">&quot;beer&quot;</span>, <span class="string">&quot;ice cream&quot;</span>);</span><br><span class="line"><span class="variable">$newphrase</span> = <span class="title function_ invoke__">str_replace</span>(<span class="variable">$healthy</span>, <span class="variable">$yummy</span>, <span class="variable">$phrase</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&quot;Hello Friend&quot;</span>;	<span class="comment">//待分字符串，每个小段的长度</span></span><br><span class="line"><span class="variable">$arr1</span> = <span class="title function_ invoke__">str_split</span>(<span class="variable">$str</span>);<span class="comment">//默认第二参数个为1</span></span><br><span class="line"><span class="variable">$arr2</span> = <span class="title function_ invoke__">str_split</span>(<span class="variable">$str</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例 </span></span><br><span class="line"><span class="variable">$pizza</span>  = <span class="string">&quot;piece1 piece2 piece3 piece4 piece5 piece6&quot;</span>;</span><br><span class="line"><span class="variable">$pieces</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot; &quot;</span>, <span class="variable">$pizza</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$pieces</span>[<span class="number">0</span>]; <span class="comment">// piece1</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$pieces</span>[<span class="number">1</span>]; <span class="comment">// piece2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;The lazy fox jumped over the fence&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">str_contains</span>(<span class="variable">$string</span>, <span class="string">&#x27;Lazy&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;The string &quot;Lazy&quot; was found in the string&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&quot;Lazy&quot; was not found because the case does not match&#x27;</span>;	<span class="comment">//此为输出</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">str_ends_with</span>(<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;All strings end with the empty string&quot;</span>;	<span class="comment">//输出</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;abcdef&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">strlen</span>(<span class="variable">$str</span>); <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// strpos — 查找字符串首次、n次出现的位置</span></span><br><span class="line"><span class="comment">// 忽视位置偏移量之前的字符进行查找</span></span><br><span class="line"><span class="variable">$newstring</span> = <span class="string">&#x27;abcdef abcdef&#x27;</span>;</span><br><span class="line"><span class="variable">$pos</span> = <span class="title function_ invoke__">strpos</span>(<span class="variable">$newstring</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>); <span class="comment">// $pos = 7, 不是 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;apple&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$str</span>) === <span class="string">&#x27;1f3870be274f6c49b3e31a0c6728957f&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Would you like a green or red apple?&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-2-array函数"><a href="#3-2-2-array函数" class="headerlink" title="3.2.2 array函数"></a>3.2.2 array函数</h4><blockquote>
<p>参考：<a href="https://www.php.net/manual/zh/book.array.php">array函数</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">count — 统计数组、Countable 对象中所有元素的数量</span><br><span class="line">sort — 对数组升序排序</span><br><span class="line">list — 把数组中的值赋给一组变量</span><br><span class="line">array_flip — 交换数组中的键和值</span><br><span class="line">array_keys — 返回数组中部分的或所有的键名</span><br><span class="line">array_values — 返回数组中所有的值</span><br><span class="line">array_merge — 合并一个或多个数组</span><br><span class="line">array_reverse — 返回单元顺序相反的数组</span><br><span class="line">array_search — 在数组中搜索给定的值，如果成功则返回首个相应的键名</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="variable">$a</span>[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$a</span>[<span class="number">1</span>] = <span class="number">3</span>;</span><br><span class="line"><span class="variable">$a</span>[<span class="number">2</span>] = <span class="number">5</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">count</span>(<span class="variable">$a</span>));<span class="comment">// int(3)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="variable">$fruits</span> = <span class="keyword">array</span>(<span class="string">&quot;lemon&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;apple&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">sort</span>(<span class="variable">$fruits</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="variable">$info</span> = <span class="keyword">array</span>(<span class="string">&#x27;coffee&#x27;</span>, <span class="string">&#x27;brown&#x27;</span>, <span class="string">&#x27;caffeine&#x27;</span>);</span><br><span class="line"><span class="comment">// 列出所有变量</span></span><br><span class="line"><span class="keyword">list</span>(<span class="variable">$drink</span>, <span class="variable">$color</span>, <span class="variable">$power</span>) = <span class="variable">$info</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$drink</span> is <span class="subst">$color</span> and <span class="subst">$power</span> makes it special.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="variable">$input</span> = <span class="keyword">array</span>(<span class="string">&quot;oranges&quot;</span>, <span class="string">&quot;apples&quot;</span>, <span class="string">&quot;pears&quot;</span>);</span><br><span class="line"><span class="variable">$flipped</span> = <span class="title function_ invoke__">array_flip</span>(<span class="variable">$input</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="variable">$array1</span> = <span class="keyword">array</span>(<span class="string">&quot;color&quot;</span> =&gt; <span class="string">&quot;red&quot;</span>, <span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line"><span class="variable">$array2</span> = <span class="keyword">array</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;color&quot;</span> =&gt; <span class="string">&quot;green&quot;</span>, <span class="string">&quot;shape&quot;</span> =&gt; <span class="string">&quot;trapezoid&quot;</span>, <span class="number">4</span>);</span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">array_merge</span>(<span class="variable">$array1</span>, <span class="variable">$array2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="variable">$array</span> = <span class="keyword">array</span>(<span class="number">0</span> =&gt; <span class="string">&#x27;blue&#x27;</span>, <span class="number">1</span> =&gt; <span class="string">&#x27;red&#x27;</span>, <span class="number">2</span> =&gt; <span class="string">&#x27;green&#x27;</span>, <span class="number">3</span> =&gt; <span class="string">&#x27;red&#x27;</span>);</span><br><span class="line"><span class="variable">$key</span> = <span class="title function_ invoke__">array_search</span>(<span class="string">&#x27;green&#x27;</span>, <span class="variable">$array</span>); <span class="comment">// $key = 2;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-3-自定义函数"><a href="#3-3-自定义函数" class="headerlink" title="3.3 自定义函数"></a>3.3 自定义函数</h3><ul>
<li>示例</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumup</span>(<span class="params"><span class="variable">$x</span>,<span class="variable">$y</span>,<span class="variable">$z</span>=<span class="number">30</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$x</span> + <span class="variable">$y</span> + <span class="variable">$z</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">sumup</span>(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230827180832828.png" alt="image-20230827180832828" style="zoom:80%;" /> 



<h3 id="3-4-运算符"><a href="#3-4-运算符" class="headerlink" title="3.4 运算符"></a>3.4 运算符</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">四则运算、取余		+ - * / %</span><br><span class="line">自增自减 		  ++ -- </span><br><span class="line">连接字符串		 .</span><br></pre></td></tr></table></figure>

<blockquote>
<p>数字可以作为字符串直接使用<code>.</code>进行相连，但是必须与<code>.</code>之间有空格分开。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">=	+=	-=	*=	/=	%=	.=</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;	&gt;=		&lt;	&lt;=		==	!=		===	  !==</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">与		或		异或		非</span><br><span class="line">and		or		 xor		!</span><br><span class="line">&amp;&amp;		||		</span><br></pre></td></tr></table></figure>

<ul>
<li>PHP8新特性</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数字与字符串比较</span><br></pre></td></tr></table></figure>



<h3 id="3-5-循环"><a href="#3-5-循环" class="headerlink" title="3.5 循环"></a>3.5 循环</h3><ul>
<li>可以加入语句<ul>
<li>break 结束整个循环流程</li>
<li>continue 跳过此次循环次</li>
</ul>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$num1</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$num1</span>&lt;<span class="number">4</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$num1</span> . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="variable">$num1</span>++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$num2</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$num2</span> . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="variable">$num2</span>++;</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="variable">$num2</span>&lt;<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$num3</span>=<span class="number">1</span>;<span class="variable">$num3</span>&lt;<span class="number">4</span>;<span class="variable">$num3</span>++)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$num3</span> . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230827183038133.png" alt="image-20230827183038133" style="zoom:80%;" /> 



<h3 id="3-6-JIT（php8新特性）"><a href="#3-6-JIT（php8新特性）" class="headerlink" title="3.6 JIT（php8新特性）"></a>3.6 JIT（php8新特性）</h3><ul>
<li><p>JIT</p>
<p>Just-In-Time，即时编译器，最重要的新特性之一，性能提升。</p>
<p>JIT编译器将作为扩展集成到php中Opcache扩展，用于运行时将某些操作码直接转换为cpu指令。</p>
<p>仅在启用opcache的情况下，JIT才有效。</p>
</li>
<li><p>这里不解释了，使用方法自行查阅。</p>
</li>
</ul>
<h2 id="四、MySQL数据库"><a href="#四、MySQL数据库" class="headerlink" title="四、MySQL数据库"></a>四、MySQL数据库</h2><h3 id="4-1-数据类型"><a href="#4-1-数据类型" class="headerlink" title="4.1 数据类型"></a>4.1 数据类型</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tinyint		极小整数类型	0,255	-128,127</span><br><span class="line">int			整数			0，4294967295	-2147483648，2147483647</span><br><span class="line">float		单精度浮点数</span><br><span class="line">double		双精度浮点数</span><br><span class="line">decimal		定点小数m,n</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">blob		二进制数据（图片、视频等）</span><br><span class="line">text		长文本数据</span><br><span class="line">char		定长字符串0-255B（很少用）</span><br><span class="line">varchar		变长字符串0-65535B</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">year		年		3B		YYYY</span><br><span class="line">date		日期		3B		YYYY-MM-DD</span><br><span class="line">time		时间		3B		HH:MM:SS</span><br><span class="line">datetime	日期时间   8B		YYYY-MM-DD HH:MM:SS</span><br><span class="line">timestamp	时间戳		4B		 YYYY-MM-DD HH:MM:SS</span><br></pre></td></tr></table></figure>



<h3 id="4-2-PHP操作MySQL"><a href="#4-2-PHP操作MySQL" class="headerlink" title="4.2 PHP操作MySQL"></a>4.2 PHP操作MySQL</h3><ul>
<li><p>PDO</p>
<p>Php Data Object，php数据对象</p>
<p>由PDO连接数据库，统一了连接各种数据库的方式。</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230827211351549.png" alt="image-20230827211351549" style="zoom:80%;" /> 

<p>使用方法：</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230827211417658.png" alt="image-20230827211417658" style="zoom:80%;" /></li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 连接，进行一次就可以，后面每次只需要直接查询即可</span></span><br><span class="line"><span class="variable">$pdo</span> = <span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="string">&#x27;mysql:host=localhost;dbname=test1&#x27;</span>,<span class="string">&#x27;test1&#x27;</span>,<span class="string">&#x27;test1.123&#x27;</span>);</span><br><span class="line"><span class="comment">// 添加编码要求，有时可以不用</span></span><br><span class="line"><span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&#x27;SET NAMES utf8;&#x27;</span>); </span><br><span class="line"><span class="comment">// 执行SQL语句，并取出数据保存到变量</span></span><br><span class="line"><span class="variable">$stmt</span> = <span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&#x27;SELECT * FROM `student`;&#x27;</span>);</span><br><span class="line"><span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line"><span class="variable">$arr</span> = <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">fetchAll</span>();</span><br><span class="line"><span class="comment">// 打印看看</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;第一个同学是&#x27;</span> . <span class="variable">$arr</span>[<span class="number">0</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230827211203758.png" alt="image-20230827211203758" style="zoom:67%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230827211236957.png" alt="image-20230827211236957" style="zoom:80%;" />  <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230827211837481.png" alt="image-20230827211837481" style="zoom:80%;" /></p>
<h3 id="4-3-SQL语句"><a href="#4-3-SQL语句" class="headerlink" title="4.3 SQL语句"></a>4.3 SQL语句</h3><ul>
<li><p>具体的SQL语句，请查看SQL语句Notes</p>
</li>
<li><p>注：由于数据库往往数据很多，不便于全部一次性查询传输，因此，很多时候要用到<code>LIMIT</code>进行分页查询。</p>
</li>
</ul>
<h2 id="五、PHP语法"><a href="#五、PHP语法" class="headerlink" title="五、PHP语法"></a>五、PHP语法</h2><h3 id="5-1-超全局变量"><a href="#5-1-超全局变量" class="headerlink" title="5.1 超全局变量"></a>5.1 超全局变量</h3><ul>
<li><p>PHP4.1.0之后启用</p>
<p>指PHP系统中自带的变量，在一个脚本的全部作用域中都可用。</p>
</li>
<li><p>全局变量</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$_GET		收集来自method=&quot;get&quot;的表单中的值</span><br><span class="line">$_POST		收集来自method=&quot;post&quot;的表单中的值</span><br><span class="line">$_REQUEST	包含$_POST、$_GET、$_COOKIE</span><br><span class="line">$GLOBALS	全部变量的全局组合数组</span><br><span class="line">$_COOKIE	常用于识别用户</span><br><span class="line">$_SESSION	存储关于用户会话session的信息</span><br><span class="line">$_FILES		用来获取通过POST方法上传文件的相关信息</span><br><span class="line">$_SERVER	服务器和执行环境信息</span><br><span class="line">$_ENV		环境变量</span><br></pre></td></tr></table></figure>

<h4 id="GET"><a href="#GET" class="headerlink" title="$_GET"></a>$_GET</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    if(!empty($_GET))&#123;</span><br><span class="line">        print_r($_GET);</span><br><span class="line">        echo &#x27;&lt;br&gt;&#x27;;</span><br><span class="line">        echo $_GET[&#x27;id&#x27;] . $_GET[&#x27;name&#x27;];</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;form action=&quot;&quot; method=&quot;get&quot;&gt;</span><br><span class="line">    学号：&lt;input type=&quot;text&quot; name=&quot;id&quot;&gt;</span><br><span class="line">    姓名：&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;点我提交&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>最初：</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230827213626444.png" alt="image-20230827213626444" style="zoom:80%;" /> 

<ul>
<li>提交后：</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230827213800689.png" alt="image-20230827213800689" style="zoom:80%;" /> 

<h4 id="POST"><a href="#POST" class="headerlink" title="$_POST"></a>$_POST</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    if(!empty($_POST))&#123;</span><br><span class="line">        print_r($_POST);</span><br><span class="line">        echo &#x27;&lt;br&gt;&#x27;;</span><br><span class="line">        echo $_POST[&#x27;id&#x27;] . $_POST[&#x27;name&#x27;];</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    学号：&lt;input type=&quot;text&quot; name=&quot;id&quot;&gt;</span><br><span class="line">    姓名：&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;点我提交&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>最初：</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230827213948200.png" alt="image-20230827213948200" style="zoom:80%;" /> 

<ul>
<li>提交后：</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230827214016851.png" alt="image-20230827214016851" style="zoom:80%;" /> 

<h4 id="REQUEST"><a href="#REQUEST" class="headerlink" title="$_REQUEST"></a>$_REQUEST</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    if(!empty($_REQUEST))&#123;</span><br><span class="line">        print_r($_REQUEST);</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    学号：&lt;input type=&quot;text&quot; name=&quot;id&quot;&gt;</span><br><span class="line">    姓名：&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;点我提交&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>自行写了URL的GET，同时提交POST：</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230827214332941.png" alt="image-20230827214332941" style="zoom:80%;" /> 

<h4 id="GLOBALS"><a href="#GLOBALS" class="headerlink" title="$GLOBALS"></a>$GLOBALS</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $x = 20;</span><br><span class="line">    if(!empty($GLOBALS))&#123;</span><br><span class="line">        print_r($GLOBALS);</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    学号：&lt;input type=&quot;text&quot; name=&quot;id&quot;&gt;</span><br><span class="line">    姓名：&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;点我提交&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230827214607222.png" alt="image-20230827214607222"> </p>
<h3 id="5-2-结合MySQL"><a href="#5-2-结合MySQL" class="headerlink" title="5.2 结合MySQL"></a>5.2 结合MySQL</h3><ul>
<li>方法一：POST</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $pdo = new PDO(&#x27;mysql:host=localhost;dbname=test1&#x27;,&#x27;test1&#x27;,&#x27;test1.123&#x27;);</span><br><span class="line">    $pdo-&gt;query(&#x27;SET NAMES utf8;&#x27;); </span><br><span class="line">?&gt;</span><br><span class="line">&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    查询学号：&lt;input type=&quot;text&quot; name=&quot;id&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;点我提交&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">查询结果：</span><br><span class="line">&lt;?php </span><br><span class="line">    if(!empty($_POST))&#123;</span><br><span class="line">        $stmt = $pdo-&gt;prepare(&#x27;SELECT * FROM `student` WHERE `student_id` = &#x27; . $_POST[&#x27;id&#x27;] . &#x27; ;&#x27;);</span><br><span class="line">        $stmt-&gt;execute();</span><br><span class="line">        $arr = $stmt-&gt;fetchAll();</span><br><span class="line">        echo $arr[0][&#x27;name&#x27;];</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>输入3后提交：</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230827215850755.png" alt="image-20230827215850755" style="zoom:80%;" /> 

<ul>
<li>方法二：GET</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $pdo = new PDO(&#x27;mysql:host=localhost;dbname=test1&#x27;,&#x27;test1&#x27;,&#x27;test1.123&#x27;);</span><br><span class="line">    $pdo-&gt;query(&#x27;SET NAMES utf8;&#x27;); </span><br><span class="line">?&gt;</span><br><span class="line">查询结果：</span><br><span class="line">&lt;?php </span><br><span class="line">    if(!empty($_GET))&#123;</span><br><span class="line">        $stmt = $pdo-&gt;prepare(&#x27;SELECT * FROM `student` WHERE `student_id` = &#x27; . $_GET[&#x27;id&#x27;] . &#x27; ;&#x27;);</span><br><span class="line">        $stmt-&gt;execute();</span><br><span class="line">        $arr = $stmt-&gt;fetchAll();</span><br><span class="line">        echo $arr[0][&#x27;name&#x27;];</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>这里模拟直接写在url里，以后可以写在跳转链接里如<code>www.domain.cn/artile?id=2</code></li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230827220225964.png" alt="image-20230827220225964" style="zoom:80%;" /> 



<h3 id="5-3-类与对象"><a href="#5-3-类与对象" class="headerlink" title="5.3 类与对象"></a>5.3 类与对象</h3><ul>
<li>类是具有相同属性和操作的一组对象的集合</li>
<li>对象是类的一个实例</li>
<li>成员变量：属性</li>
<li>成员方法：行为</li>
<li>魔术方法<ul>
<li><code>__construct</code>构造方法</li>
<li><code>__destruct</code>析构方法</li>
</ul>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$status</span> = <span class="string">&#x27;未知status&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&#x27;未知name&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$status</span>, <span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;status = <span class="variable">$status</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;name . <span class="string">&#x27;和fun1&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;析构方法执行了&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$bai</span> = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;学生&quot;</span>,<span class="string">&quot;小白&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$bai</span>-&gt;status;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$bai</span>-&gt;<span class="title function_ invoke__">fun1</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230827222006497.png" alt="image-20230827222006497" style="zoom:80%;" /> 

<ul>
<li>类的三大特性<ul>
<li>封装</li>
<li>继承</li>
<li>多态</li>
</ul>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 封装</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$id</span>;<span class="comment">//默认的，类内、子类、类外 均可见</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$status</span>;<span class="comment">//类内、子类可见，类外不可见</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span>;<span class="comment">//类内可见，子类、类外均不可见</span></span><br><span class="line">    <span class="comment">// 函数同理</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">fun3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HighSchoolStudent</span> <span class="keyword">extends</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$hong</span> = <span class="keyword">new</span> <span class="title class_">HighSchoolStudent</span>(<span class="string">&quot;高中生&quot;</span>,<span class="string">&quot;小红&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$hong</span>-&gt;<span class="title function_ invoke__">fun1</span>();</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 多态</span></span><br><span class="line"><span class="comment">// 实现多态的前提是先继承，再重写方法</span></span><br></pre></td></tr></table></figure>

<ul>
<li>类进阶</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 静态成员</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Student</span>::<span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title class_">Student</span>::<span class="variable">$name</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title class_">Student</span>::<span class="title function_ invoke__">fun2</span>();</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象类</span></span><br><span class="line"><span class="comment">// abstract 关键词定义抽象方法、抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fun3</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 要具体的类来继承抽象类，并重写抽象方法。抽象类本身无法被实例化。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HighSchoolStudent</span> <span class="keyword">extends</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fun3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        retrun <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="comment">// interface 关键词创建接口。要求类必须实现的方法，但不需要定义方法的具体实现过程。</span></span><br><span class="line"><span class="comment">// implements 关键词使用接口。</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">file</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fun4</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fun5</span>(<span class="params"><span class="variable">$x</span></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">file</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fun4</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fun5</span>(<span class="params"><span class="variable">$x</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$x</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接口常量</span></span><br><span class="line"><span class="comment">// const 创建常量</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">file</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">HOST</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">DB</span> = <span class="string">&quot;test1&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">USER</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">PASSWORD</span> = <span class="string">&quot;password&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">file</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$host</span> = file::<span class="variable constant_">HOST</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$db</span> = file::<span class="variable constant_">DB</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$user</span> = file::<span class="variable constant_">USER</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span> = file::<span class="variable constant_">PASSWORD</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// final 类不能继承</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// parent::$name 访问父类</span></span><br><span class="line"><span class="comment">// self::$name 访问本静态类</span></span><br></pre></td></tr></table></figure>



<h3 id="5-4-命名空间"><a href="#5-4-命名空间" class="headerlink" title="5.4 命名空间"></a>5.4 命名空间</h3><ul>
<li><p>命名空间</p>
<p>解决全局成员的命名冲突问题，借鉴了文件目录的思想</p>
<p>同一目录下不允许重名文件，不同目录下允许同名；</p>
<p>同一命名空间下不允许重名成员，不同空间下允许同名。</p>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">one</span>&#123;</span><br><span class="line">    <span class="title class_">const</span> <span class="title class_">NAME</span> = &#x27;小白&#x27;;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">two</span>&#123;</span><br><span class="line">    <span class="title class_">const</span> <span class="title class_">NAME</span> = &#x27;小黑&#x27;;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">one</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">NAME</span> = <span class="string">&#x27;小白&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">two</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">NAME</span> = <span class="string">&#x27;小黑&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>子命名空间</p>
<p>即命名空间再套命名空间</p>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">one</span>\<span class="title class_">aa</span>&#123;</span><br><span class="line">    <span class="title class_">const</span> <span class="title class_">NAME</span> = &#x27;小绿&#x27;;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">one</span>\<span class="title class_">aa</span>\<span class="title class_">AA</span>&#123;</span><br><span class="line">    <span class="title class_">const</span> <span class="title class_">NAME</span> = &#x27;小黄&#x27;;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>访问命名空间</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> \two\<span class="title function_ invoke__">fun1</span>();</span><br><span class="line"><span class="comment">// use 关键词引用命名空间</span></span><br><span class="line"><span class="comment">// as 解决名字过长、重名问题</span></span><br><span class="line"><span class="keyword">use</span> \<span class="title">one</span>\<span class="title">aa</span>\<span class="title">AA</span> <span class="keyword">as</span> <span class="title">t</span>;</span><br><span class="line"><span class="keyword">echo</span> t\<span class="title function_ invoke__">fun1</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li><p>引入文件时解决冲突</p>
<p>文件<code>/one/one.php</code>和<code>/two/two.php</code>中均有相同名字的变量或方法。</p>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&#x27;one\one.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;two\two.php&#x27;</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">one</span>\<span class="title">one</span> <span class="keyword">as</span> <span class="title">t1</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">two</span>\<span class="title">two</span> <span class="keyword">as</span> <span class="title">t2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> t1\<span class="title function_ invoke__">fun1</span>();</span><br><span class="line"><span class="keyword">echo</span> t2\<span class="title function_ invoke__">fun1</span>();</span><br></pre></td></tr></table></figure>



<h3 id="5-5-php8新特性"><a href="#5-5-php8新特性" class="headerlink" title="5.5 php8新特性"></a>5.5 php8新特性</h3><ul>
<li><p>构造器属性提升</p>
</li>
<li><p>新增数据类型<code>mixed</code> 任何类型</p>
</li>
</ul>
<h2 id="六、补充内容"><a href="#六、补充内容" class="headerlink" title="六、补充内容"></a>六、补充内容</h2><blockquote>
<p>来源：<a href="https://blog.csdn.net/Jack0610/article/details/110733859">CSDN:PHP</a></p>
</blockquote>
<h3 id="6-1-phpinfo"><a href="#6-1-phpinfo" class="headerlink" title="6.1 phpinfo()"></a>6.1 phpinfo()</h3><ul>
<li>phpinfo是一个函数（功能），这个函数会显示一个当前电脑（服务器）的详细的PHP信息。</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6-2-其他环境变量"><a href="#6-2-其他环境变量" class="headerlink" title="6.2 其他环境变量"></a>6.2 其他环境变量</h3><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230828155849896.png" alt="image-20230828155849896" style="zoom:67%;" /> 

<h3 id="6-3-系统常量"><a href="#6-3-系统常量" class="headerlink" title="6.3 系统常量"></a>6.3 系统常量</h3><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230828155942684.png" alt="image-20230828155942684" style="zoom: 67%;" /> 

<h3 id="6-4-字符串的声明方法"><a href="#6-4-字符串的声明方法" class="headerlink" title="6.4 字符串的声明方法"></a>6.4 字符串的声明方法</h3><ul>
<li>在PHP语言中声明字符串有三种方式：<br>1、用单引号声明<br>2、用双引号声明<br>3、用字界符声明</li>
</ul>
<p><strong>字界符声明</strong></p>
<blockquote>
<p>1、在变量后面的等号写三个小于号 &lt;&lt;&lt;<br>2、然后在&lt;&lt;&lt;后面写上字符（建议英文大写字符）<br>3、然后换行写上任意想写的字符<br>4、写完后，顶行。在行最开始处，再写上&lt;&lt;&lt;后面的字符和分号。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dingjie</span> = <span class="string">&lt;&lt;&lt;ABC</span></span><br><span class="line"><span class="string">  如果</span></span><br><span class="line"><span class="string">      非要在这个测试</span></span><br><span class="line"><span class="string">    前</span></span><br><span class="line"><span class="string">        面&lt;br /&gt;</span></span><br><span class="line"><span class="string">       加上一段</span></span><br><span class="line"><span class="string">    &lt;i&gt;有趣的话&lt;/i&gt;</span></span><br><span class="line"><span class="string">    我想说，&lt;h1&gt;努力学习不好么&lt;h1&gt;</span></span><br><span class="line"><span class="string">ABC</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$dingjie</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>那双引号和单引号有什么区别呢：</strong></p>
<blockquote>
<ol>
<li>双引号解析变量，但是单引号不解析变量</li>
<li>在双引号里面插入变量，变量后面如果有英文或中文字符，会把这个字符和变量拼起来，视为一整个变量。一定要在变量后面接上特殊字符，例如空格等分开。</li>
<li>如果在双引号里面插变量的时候，后面不想有空格，可以拿大括号将变量包起来。</li>
<li>双引号解析转义字符，单引号不解析转义字符。但是单引号能解析\</li>
<li>单引号效率高于双引号，尽可能使用单引号</li>
<li>双引号和单引号可以互相嵌套，双引号中可以插入单引号，单引号当中插入变量，这个变量会被解析。</li>
<li>神奇的字符串拼接胶水——（.）点，用来拼接字符串。</li>
<li>一般将定界符声明字符串视为双引号一样的功能来看待。</li>
</ol>
</blockquote>
<h3 id="6-5-查看和判断数据类型"><a href="#6-5-查看和判断数据类型" class="headerlink" title="6.5 查看和判断数据类型"></a>6.5 查看和判断数据类型</h3><ul>
<li>gettype（传入一个变量）能获得变量的类型</li>
<li>var_dump（传入一个变量）输出变量类型和值</li>
<li>使用is_*系列函数，is_types这一系列的函数，来进行判断某个数据属于哪种类型，如果是这个类型返回真，不是这个类型返回假。</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230828160549572.png" alt="image-20230828160549572" style="zoom: 67%;" /> 

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$float</span> = <span class="number">88.8</span>;</span><br><span class="line"><span class="variable">$type</span> = <span class="title function_ invoke__">gettype</span>(<span class="variable">$float</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;aa&#x27;</span>;</span><br><span class="line"><span class="variable">$type</span> = <span class="title function_ invoke__">var_dump</span>(<span class="variable">$str</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$fo</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">is_bool</span>(<span class="variable">$fo</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;执行真区间&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;执行假区间&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-6-位运算"><a href="#6-6-位运算" class="headerlink" title="6.6 位运算"></a>6.6 位运算</h3><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230828160805314.png" alt="image-20230828160805314" style="zoom:67%;" /> 

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//$x二进制为:</span></span><br><span class="line"><span class="variable">$x</span>=<span class="number">5</span>;</span><br><span class="line"><span class="comment">//$y二进制为:</span></span><br><span class="line"><span class="variable">$y</span>=<span class="number">8</span>;</span><br><span class="line"><span class="comment">//结果为13</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$x</span> ^ <span class="variable">$y</span>;</span><br></pre></td></tr></table></figure>

<h3 id="6-7-其他运算符"><a href="#6-7-其他运算符" class="headerlink" title="6.7 其他运算符"></a>6.7 其他运算符</h3><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230828160912767.png" alt="image-20230828160912767" style="zoom:67%;" /> 

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> `ipconfig`;</span><br></pre></td></tr></table></figure>

<h3 id="6-8-文件包含"><a href="#6-8-文件包含" class="headerlink" title="6.8 文件包含"></a>6.8 文件包含</h3><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230828161307968.png" alt="image-20230828161307968" style="zoom:67%;" /> 

<ul>
<li><p>include函数功能实践：<br>创建一个<code>functions.php</code>文件,里面写上几个函数。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//functions.php文件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;aaaa&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;bbbb&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>functions.php</code>的同级目录下,在创建一个<code>user.php</code>文件把<code>functions.php</code>文件包含进来。<br>这样函数信息就可以专门放在<code>functions.php</code>里面,哪需要用到这些函数的时候,就从哪包含进来。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//user.php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;functions.php&quot;</span>;</span><br><span class="line"><span class="comment">//可以直接调用</span></span><br><span class="line"><span class="title function_ invoke__">demo</span>();</span><br><span class="line"><span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="6-9-数学常用函数"><a href="#6-9-数学常用函数" class="headerlink" title="6.9 数学常用函数"></a>6.9 数学常用函数</h3><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230828161607956.png" alt="image-20230828161607956" style="zoom:67%;" /> 

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230828161635687.png" alt="image-20230828161635687" style="zoom:67%;" /> 



<h3 id="6-10-字符串常用函数"><a href="#6-10-字符串常用函数" class="headerlink" title="6.10 字符串常用函数"></a>6.10 字符串常用函数</h3><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230828161747968.png" alt="image-20230828161747968" style="zoom:67%;" /> 

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230828161821803.png" alt="image-20230828161821803" style="zoom: 80%;" /> 

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230828161848093.png" alt="image-20230828161848093" style="zoom: 80%;" /> 

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230828161939637.png" alt="image-20230828161939637" style="zoom:80%;" /> 

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230828161958685.png" alt="image-20230828161958685" style="zoom:80%;" /> 

<h3 id="6-11-时间信息函数"><a href="#6-11-时间信息函数" class="headerlink" title="6.11 时间信息函数"></a>6.11 时间信息函数</h3><ul>
<li>getdate</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$mytime</span> = <span class="title function_ invoke__">getdate</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;年 :&quot;</span>.<span class="variable">$mytime</span>[<span class="string">&#x27;year&#x27;</span>].<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;月 :&quot;</span>.<span class="variable">$mytime</span>[<span class="string">&#x27;mon&#x27;</span>].<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;日 :&quot;</span>.<span class="variable">$mytime</span>[<span class="string">&#x27;mday&#x27;</span>].<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;时 :&quot;</span>.<span class="variable">$mytime</span>[<span class="string">&#x27;hours&#x27;</span>].<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;分 :&quot;</span>.<span class="variable">$mytime</span>[<span class="string">&#x27;minutes&#x27;</span>].<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;秒 :&quot;</span>.<span class="variable">$mytime</span>[<span class="string">&#x27;seconds&#x27;</span>].<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;一个小时中的第几钟 :&quot;</span>.<span class="variable">$mytime</span>[<span class="string">&#x27;minutes&#x27;</span>].<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;这是一分钟的第几秒 :&quot;</span>.<span class="variable">$mytime</span>[<span class="string">&#x27;seconds&#x27;</span>].<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;星期名称 :&quot;</span>.<span class="variable">$mytime</span>[<span class="string">&#x27;weekday&#x27;</span>].<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;月份名称 :&quot;</span>.<span class="variable">$mytime</span>[<span class="string">&#x27;month&#x27;</span>].<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;时间戳   :&quot;</span>.<span class="variable">$mytime</span>[<span class="number">0</span>].<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6-12-操作数组函数"><a href="#6-12-操作数组函数" class="headerlink" title="6.12 操作数组函数"></a>6.12 操作数组函数</h3><ul>
<li>这些函数，也是面试中基础面试中最爱问到的问题。</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230828162215673.png" alt="image-20230828162215673" style="zoom:80%;" /> 

<ul>
<li>补充</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230828162246858.png" alt="image-20230828162246858" style="zoom:80%;" /> 

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230828162303216.png" alt="image-20230828162303216" style="zoom:80%;" /> 

<h3 id="6-13-PHP正则表达式"><a href="#6-13-PHP正则表达式" class="headerlink" title="6.13 PHP正则表达式"></a>6.13 PHP正则表达式</h3><ul>
<li><p>正则表达是会在开发中经常看到，它主要用在以下一些地方：</p>
<ul>
<li>匹配邮箱、手机号码、验证码、替换敏感的关键词。例如：涉及政治和骂人的话</li>
</ul>
</li>
<li><p>PHP的正则表达示定界符的规定如下：</p>
<ul>
<li>定界符，不能用<code>a-zA-Z0-9\ </code>其他的都可以用。</li>
<li>必须成对出现，有开始就有结束。</li>
</ul>
</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230828162524251.png" alt="image-20230828162524251" style="zoom:80%;" /> 

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230828162549298.png" alt="image-20230828162549298" style="zoom:80%;" /> 

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230828162601672.png" alt="image-20230828162601672" style="zoom:80%;" /> 

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230828162612354.png" alt="image-20230828162612354" style="zoom:80%;" /> 

<ul>
<li>写法</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例子						说明</span><br><span class="line">/中间写正则/				正确</span><br><span class="line">$中间写正则$				正确</span><br><span class="line">%中间写正则%			    正确</span><br><span class="line">^中间写正则^			    正确</span><br><span class="line">@中间写正则@			    正确</span><br><span class="line">(中间写正则)				错误</span><br><span class="line">A中间写正则A			    错误</span><br><span class="line"></span><br><span class="line">\ 是转义字符，如果在以后正则表达示里面需要匹配/:</span><br><span class="line">写法：/ \/ /</span><br><span class="line">写法：# \/ #</span><br></pre></td></tr></table></figure>

<ul>
<li><p>匹配</p>
<p><code>preg_match ( string $正则 , string $字符串 , array&amp;$结果] )</code></p>
<p>功能：</p>
<p>根据<code>正则变量</code> ，匹配<code>字符串变量</code>。</p>
<p>如果存在则返回匹配的个数，把匹配到的结果放到<code>$结果变量</code>里。如果没有匹配到结果返回0。</p>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$zz</span> = <span class="string">&#x27;/wq/&#x27;</span>;</span><br><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;ssssswqaaaaaa&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$zz</span>, <span class="variable">$string</span>, <span class="variable">$matches</span>))&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;匹配到了，结果为：&#x27;</span>;</span><br><span class="line">   <span class="title function_ invoke__">var_dump</span>(<span class="variable">$matches</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;没有匹配到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6-14-正则函数"><a href="#6-14-正则函数" class="headerlink" title="6.14 正则函数"></a>6.14 正则函数</h3><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230828163049264.png" alt="image-20230828163049264" style="zoom:80%;" /> 

<h3 id="6-15-文件系统管理"><a href="#6-15-文件系统管理" class="headerlink" title="6.15 文件系统管理"></a>6.15 文件系统管理</h3><blockquote>
<p>我们会点鼠标右键删除文件、会control+c（或右键）复制、粘贴文件，会新建一些文件，检测这个文件是不是只读文件。在电脑里面进行的这些操作，在代码里面如果能操作就好了。因为，如果有了这些操作。我们能做很多事情了：可不可以写入修改配置文件、是不是可以做PHP安装的时候检测文件的权限、是不是可以做生成Html文件等等很多不同的操作，总之其他太多太多的地方用到了文件操作。</p>
</blockquote>
<h4 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h4><p>1、readfile读取文件函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">readfile</span> ( <span class="attr">string</span>: $文件名)</span><br><span class="line">功能：传入一个文件路径，输出一个文件。</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   	<span class="comment">//linux类的读了方式</span></span><br><span class="line">   	<span class="title function_ invoke__">readfile</span>(<span class="string">&quot;/home/paul/test.txt&quot;</span>);</span><br><span class="line">   	<span class="comment">//windows类的读取方式</span></span><br><span class="line">   	<span class="title function_ invoke__">readfile</span>(<span class="string">&quot;c:\\oldboy\oldboy\boot.ini&quot;</span>);</span><br><span class="line">	<span class="comment">// 注意：上面的代码中windows的斜线是\斜线，可能会转义掉一些字符。因此，我们写的时候写上两个斜线。</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、file_get_contents打开文件函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="variable">$filename</span> = <span class="string">&#x27;NoAlike.txt&#x27;</span>;</span><br><span class="line">   <span class="variable">$filestring</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$filename</span>);</span><br><span class="line">   <span class="keyword">echo</span> <span class="variable">$filestring</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、fopen、fread、fclose操作读取文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">resource <span class="title function_ invoke__">fopen</span>	 	    ( <span class="keyword">string</span> $文件名, <span class="keyword">string</span> 模式)</span><br><span class="line"><span class="keyword">string</span> <span class="title function_ invoke__">fread</span> 			( resource $操作资源, <span class="keyword">int</span> 读取长度)</span><br><span class="line"><span class="keyword">bool</span> <span class="title function_ invoke__">fclose</span> 			( resource $操作资源 )</span><br></pre></td></tr></table></figure>

<p>fopen的模式：</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230828163530559.png" alt="image-20230828163530559" style="zoom:80%;" /> 

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="comment">//你可以创建一个NoAlike.txt，以只读模式打开</span></span><br><span class="line">   <span class="variable">$fp</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;NoAlike.txt&#x27;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">   <span class="comment">//var_dump()操作一下$fp看看效果，输出的是不是只有类型提示的是resource</span></span><br><span class="line">   <span class="title function_ invoke__">var_dump</span>(<span class="variable">$fp</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="创建和修改文件内容"><a href="#创建和修改文件内容" class="headerlink" title="创建和修改文件内容"></a>创建和修改文件内容</h4><p>1、file_put_contents写入文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">file_put_contents</span> ( <span class="keyword">string</span> $文件路径, <span class="keyword">string</span> $写入数据)</span><br><span class="line">功能：向指定的文件当中写入一个字符串，如果文件不存在则创建文件。返回的是写入的字节长度</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="variable">$data</span> = <span class="string">&quot;在PHP中文网学好PHP，妹子票子不再话下！&quot;</span>;</span><br><span class="line">   <span class="variable">$numbytes</span> = <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line">   <span class="keyword">if</span>(<span class="variable">$numbytes</span>)&#123;</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&#x27;写入成功，我们读取看看结果试试：&#x27;</span>;</span><br><span class="line">       <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;test.txt&#x27;</span>);</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&#x27;写入失败或者没有权限，注意检查&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、fwrite配合fopen进行写入操作</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="variable">$filename</span> = <span class="string">&#x27;test.txt&#x27;</span>;</span><br><span class="line">   <span class="variable">$fp</span>= <span class="title function_ invoke__">fopen</span>(<span class="variable">$filename</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">   <span class="variable">$len</span> = <span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>, <span class="string">&#x27;我是一只来自北方的狼，却在南方冻成了狗&#x27;</span>);</span><br><span class="line">   <span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);</span><br><span class="line">   <span class="keyword">print</span> <span class="variable">$len</span> .<span class="string">&#x27;字节被写入了\n&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">代码说明：</span><br><span class="line">· 不论有没有新建都会打开文件重新写入</span><br><span class="line">· 原有的文件内容会被覆盖掉</span><br><span class="line">· 文件不存在会创建</span><br></pre></td></tr></table></figure>

<h4 id="创建临时文件"><a href="#创建临时文件" class="headerlink" title="创建临时文件"></a>创建临时文件</h4><ul>
<li><p>我们之前创建的文件都是永久文件，而创建临时文件在我们平时的项目开发中也非常有用。</p>
<p>创建临时文件的好处：</p>
<p>文件操作完成后即删除，不需要去维护这个文件的删除状态。</p>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="comment">//创建了一个临时文件</span></span><br><span class="line">   <span class="variable">$handle</span> = <span class="title function_ invoke__">tmpfile</span>();</span><br><span class="line">   <span class="comment">//向里面写入了数据</span></span><br><span class="line">   <span class="variable">$numbytes</span> = <span class="title function_ invoke__">fwrite</span>(<span class="variable">$handle</span>, <span class="string">&#x27;写入临时文件&#x27;</span>);</span><br><span class="line">   <span class="comment">//关闭临时文件，文件即被删除</span></span><br><span class="line">   <span class="title function_ invoke__">fclose</span>(<span class="variable">$handle</span>);</span><br><span class="line">   <span class="keyword">echo</span>  <span class="string">&#x27;向临时文件中写入了&#x27;</span>.<span class="variable">$numbytes</span> . <span class="string">&#x27;个字节&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="移动、拷贝和删除文件"><a href="#移动、拷贝和删除文件" class="headerlink" title="移动、拷贝和删除文件"></a>移动、拷贝和删除文件</h4><p>1、重命名文件：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">rename</span>($旧名,$新名);</span><br><span class="line">功能：这个函数返回一个<span class="keyword">bool</span>值，将旧的名字改为新的名字。</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="comment">//旧文件名</span></span><br><span class="line">   <span class="variable">$filename</span> = <span class="string">&#x27;test.txt&#x27;</span>;</span><br><span class="line">   <span class="comment">//新文件名</span></span><br><span class="line">   <span class="variable">$filename2</span> = <span class="variable">$filename</span> . <span class="string">&#x27;.old&#x27;</span>;</span><br><span class="line">   <span class="comment">//复制文件</span></span><br><span class="line">   <span class="title function_ invoke__">rename</span>(<span class="variable">$filename</span>, <span class="variable">$filename2</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、复制文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">copy</span>(源文件,目标文件)</span><br><span class="line">功能：将指定路径的源文件，复制一份到目标文件的位置。</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="comment">//旧文件名</span></span><br><span class="line">   <span class="variable">$filename</span> = <span class="string">&#x27;copy.txt&#x27;</span>;</span><br><span class="line">   <span class="comment">//新文件名</span></span><br><span class="line">   <span class="variable">$filename2</span> = <span class="variable">$filename</span> . <span class="string">&#x27;_backup&#x27;</span>;</span><br><span class="line">   <span class="comment">//修改名字。</span></span><br><span class="line">   <span class="title function_ invoke__">copy</span>(<span class="variable">$filename</span>, <span class="variable">$filename2</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、删除文件</p>
<blockquote>
<p>删除文件就是将指定路径的一个文件删除，不过这个删除是直接删除。使用的是windows电脑，你在回收站看不到这个文件，你只会发现这个文件消失了。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">unlink</span>(指定路径的文件)</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="variable">$filename</span> = <span class="string">&#x27;test.txt&#x27;</span>;</span><br><span class="line">   <span class="keyword">if</span> (<span class="title function_ invoke__">unlink</span>(<span class="variable">$filename</span>)) &#123;</span><br><span class="line">       <span class="keyword">echo</span>  <span class="string">&quot;删除文件成功 <span class="subst">$filename</span>!\n&quot;</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">echo</span>  <span class="string">&quot;删除 <span class="subst">$filename</span> 失败!\n&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>4、检测文件属性函数</p>
<p>假设安装界面的网址是：install.php，安装的锁文件是install.lock。我们就可以检测install.lock文件是否存在。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="string">&#x27;install.lock&#x27;</span>))&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;已安装，请不要再次进行安装&#x27;</span>;</span><br><span class="line">   <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="文件权限设置"><a href="#文件权限设置" class="headerlink" title="文件权限设置"></a>文件权限设置</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//修改linux系统/var/wwwroot/某文件权限为755</span></span><br><span class="line"><span class="title function_ invoke__">chmod</span>(<span class="string">&quot;/var/wwwroot/index.html&quot;</span>, <span class="number">755</span>);  </span><br><span class="line"><span class="title function_ invoke__">chmod</span>(<span class="string">&quot;/var/wwwroot/index.html&quot;</span>, <span class="string">&quot;u+rwx,go+rx&quot;</span>); </span><br><span class="line"><span class="title function_ invoke__">chmod</span>(<span class="string">&quot;/somedir/somefile&quot;</span>, <span class="number">0755</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="6-16-文件属性函数"><a href="#6-16-文件属性函数" class="headerlink" title="6.16 文件属性函数"></a>6.16 文件属性函数</h3><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230828164401418.png" alt="image-20230828164401418" style="zoom:80%;" /> 

<h3 id="6-17-目录处理函数"><a href="#6-17-目录处理函数" class="headerlink" title="6.17 目录处理函数"></a>6.17 目录处理函数</h3><ul>
<li>php 目录处理函数处理文件夹的基本思想如下：<ol>
<li>读取某个路径的时候判断是否是文件夹</li>
<li>是文件夹的话，打开指定文件夹，返回文件目录的资源变量</li>
<li>使用readdir读取一次目录中的文件，目录指针向后偏移一次</li>
<li>使用readdir读取到最后，没有可读的文件返回false</li>
<li>关闭文件目录</li>
</ol>
</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230828164525058.png" alt="image-20230828164525058" style="zoom:80%;" /> 

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//设置打开的目录是D盘</span></span><br><span class="line"><span class="variable">$dir</span> = <span class="string">&quot;d:/&quot;</span>;</span><br><span class="line"><span class="comment">//判断是否是文件夹，是文件夹</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">is_dir</span>(<span class="variable">$dir</span>)) &#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="variable">$dh</span> = <span class="title function_ invoke__">opendir</span>(<span class="variable">$dir</span>)) &#123;</span><br><span class="line">      <span class="comment">//读取到最后返回false，停止循环</span></span><br><span class="line">      <span class="keyword">while</span> ((<span class="variable">$file</span> = <span class="title function_ invoke__">readdir</span>(<span class="variable">$dh</span>)) !== <span class="literal">false</span>) &#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&quot;文件名为: <span class="subst">$file</span> : 文件的类型是: &quot;</span> . <span class="title function_ invoke__">filetype</span>(<span class="variable">$dir</span> . <span class="variable">$file</span>) . <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="title function_ invoke__">closedir</span>(<span class="variable">$dh</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6-18-文件路径函数"><a href="#6-18-文件路径函数" class="headerlink" title="6.18 文件路径函数"></a>6.18 文件路径函数</h3><ul>
<li>我们经常会遇到处理文件路径的情况。例如：<ol>
<li>文件后缀需要取出来</li>
<li>路径需要取出名字不取目录</li>
<li>只需要取出路径名中的目录路径</li>
<li>或者把网址中的各个部份进行解析取得独立值</li>
<li>甚至是自己组成一个url出来</li>
</ol>
</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/phpnotes/image-20230828164824785.png" alt="image-20230828164824785" style="zoom:80%;" /> 

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$path_parts</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="string">&#x27;d:/www/index.inc.php&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;文件目录名：&#x27;</span>.<span class="variable">$path_parts</span>[<span class="string">&#x27;dirname&#x27;</span>].<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;文件全名：&#x27;</span>.<span class="variable">$path_parts</span>[<span class="string">&#x27;basename&#x27;</span>].<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;文件扩展名：&#x27;</span>.<span class="variable">$path_parts</span>[<span class="string">&#x27;extension&#x27;</span>].<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;不包含扩展的文件名：&#x27;</span>.<span class="variable">$path_parts</span>[<span class="string">&#x27;filename&#x27;</span>].<span class="string">&quot;&lt;br /&gt;&quot;</span>; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="七、实战补充"><a href="#七、实战补充" class="headerlink" title="七、实战补充"></a>七、实战补充</h2><h3 id="7-1-文件留言本"><a href="#7-1-文件留言本" class="headerlink" title="7.1 文件留言本"></a>7.1 文件留言本</h3><ul>
<li>文件结构</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">index.php		展示输入框和留言内容</span><br><span class="line">write.php 		向message.txt写入数据</span><br><span class="line">message.txt 		存入聊天内容</span><br></pre></td></tr></table></figure>

<p><code>index.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//设置时区</span></span><br><span class="line"><span class="title function_ invoke__">date_default_timezone_set</span>(<span class="string">&#x27;PRC&#x27;</span>);</span><br><span class="line"><span class="comment">//读了内容</span></span><br><span class="line">@<span class="variable">$string</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;message.txt&#x27;</span>);</span><br><span class="line"><span class="comment">//如果$string 不为空的时候执行，也就是message.txt中有留言数据</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$string</span>)) &#123;</span><br><span class="line">    <span class="comment">//每一段留言有一个分格符，但是最后多出了一个&amp;^。因此，我们要将&amp;^删掉</span></span><br><span class="line">    <span class="variable">$string</span> = <span class="title function_ invoke__">rtrim</span>(<span class="variable">$string</span>, <span class="string">&#x27;&amp;^&#x27;</span>);</span><br><span class="line">    <span class="comment">//以&amp;^切成数组</span></span><br><span class="line">    <span class="variable">$arr</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;&amp;^&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line">    <span class="comment">//将留言内容读取</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">        <span class="comment">//将用户名和内容分开</span></span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$username</span>, <span class="variable">$content</span>, <span class="variable">$time</span>) = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;$#&#x27;</span>, <span class="variable">$value</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;用户名为&lt;font color=&quot;gree&quot;&gt;&#x27;</span> . <span class="variable">$username</span> . <span class="string">&#x27;&lt;/font&gt;内容为&lt;font color=&quot;red&quot;&gt;&#x27;</span> . <span class="variable">$content</span> . <span class="string">&#x27;&lt;/font&gt;时间为&#x27;</span> . <span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>, <span class="variable">$time</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;hr /&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;h1&gt;基于文件的留言本演示&lt;/h1&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;write.php&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> /&gt;&lt;br /&gt;</span><br><span class="line">    留言内容：&lt;textarea  name=<span class="string">&quot;content&quot;</span>&gt;&lt;/textarea&gt;&lt;br /&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p><code>write.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//追加方式打开文件</span></span><br><span class="line"><span class="variable">$fp</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;message.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="comment">//设置时间</span></span><br><span class="line"><span class="variable">$time</span>=<span class="title function_ invoke__">time</span>();</span><br><span class="line"><span class="comment">//得到用户名</span></span><br><span class="line"><span class="variable">$username</span>=<span class="title function_ invoke__">trim</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]);</span><br><span class="line"><span class="comment">//得到内容</span></span><br><span class="line"><span class="variable">$content</span>=<span class="title function_ invoke__">trim</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line"><span class="comment">//组合写入的字符串：内容和用户之间分开，使用$#</span></span><br><span class="line"><span class="comment">//行与行之间分开，使用&amp;^</span></span><br><span class="line"><span class="variable">$string</span>=<span class="variable">$username</span>.<span class="string">&#x27;$#&#x27;</span>.<span class="variable">$content</span>.<span class="string">&#x27;$#&#x27;</span>.<span class="variable">$time</span>.<span class="string">&#x27;&amp;^&#x27;</span>;</span><br><span class="line"><span class="comment">//写入文件</span></span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>,<span class="variable">$string</span>);</span><br><span class="line"><span class="comment">//关闭文件</span></span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;location:index.php&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>《SQL快速入门》Notes</title>
    <url>/butterflyblog/2023/08/26/%E3%80%8ASQL%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E3%80%8BNotes/</url>
    <content><![CDATA[<h1 id="《SQL快速入门》Notes"><a href="#《SQL快速入门》Notes" class="headerlink" title="《SQL快速入门》Notes"></a>《SQL快速入门》Notes</h1><blockquote>
<p>资料来源：<a href="https://www.bilibili.com/video/BV1PT4y1e7UU/">B站视频：【数据库】SQL 3小时快速入门</a></p>
<p>@Seymour0314</p>
</blockquote>
<blockquote>
<p>题外：</p>
<ul>
<li><p>登陆数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>p</span><br><span class="line">输入密码</span><br></pre></td></tr></table></figure>
</li>
<li><p>MySQL 的常用变量（函数）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Datebase()	// 查看当前数据库名</span><br><span class="line">User()		// 用户</span><br><span class="line">Version()	// mysql 版本</span><br><span class="line">@@basedir	// 安装路径</span><br></pre></td></tr></table></figure>
</li>
<li><p>常用符号</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">逻辑运算符</span><br><span class="line"><span class="operator">&amp;</span>	<span class="keyword">AND</span></span><br><span class="line"><span class="operator">||</span>	<span class="keyword">OR</span></span><br><span class="line"><span class="operator">^</span>	XOR</span><br></pre></td></tr></table></figure></li>
</ul>
</blockquote>
<blockquote>
<p>摘要：</p>
<ul>
<li><p>数据库基本操作</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">建库、删库、用库</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE db_name;</span><br><span class="line"><span class="keyword">DROP</span> DATABASE db_name;</span><br><span class="line">USE db_name;</span><br></pre></td></tr></table></figure>
</li>
<li><p>数据表基本操作</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">建表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name(</span><br><span class="line">	`id` <span class="type">int</span>(<span class="number">11</span>),</span><br><span class="line">	`name` <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">DESC</span> table_name;</span><br><span class="line">增删改查</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name <span class="keyword">VALUES</span>(<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;Seymour&#x27;</span>);</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">5</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> table_name <span class="keyword">SET</span> name<span class="operator">=</span><span class="string">&#x27;Apple&#x27;</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">5</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="第一课：认识MySQL"><a href="#第一课：认识MySQL" class="headerlink" title="第一课：认识MySQL"></a>第一课：认识MySQL</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `sql_tutorial`;</span><br><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br><span class="line"><span class="keyword">DROP</span> DATABASE `sql_tutorial`;</span><br></pre></td></tr></table></figure>



<h3 id="第二课：数据类型"><a href="#第二课：数据类型" class="headerlink" title="第二课：数据类型"></a>第二课：数据类型</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="type">INT</span>				<span class="comment">-- 整数</span></span><br><span class="line"><span class="type">DECIMAL</span>(<span class="number">3</span>,<span class="number">2</span>)	<span class="comment">-- 小数，如2.33</span></span><br><span class="line"><span class="type">VARCHAR</span>(<span class="number">10</span>)		<span class="comment">-- 字串</span></span><br><span class="line"><span class="type">BLOB</span>			<span class="comment">-- (Binary Large Object)图片、影片、档案</span></span><br><span class="line"><span class="type">DATE</span>			<span class="comment">-- &#x27;YYYY-MM-DD&#x27; 日期</span></span><br><span class="line"><span class="type">TIMESTAMP</span>		<span class="comment">-- &#x27;YYYY-MM-DD HH:MM:SS&#x27; 日期时间</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `sql_tutorial`;</span><br><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br><span class="line">USE `sql_tutorial`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student`(</span><br><span class="line">	`student_id` <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    `name` <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    `major` <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DESCRIBE</span> `student`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> `student`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student` <span class="keyword">ADD</span> `gpa` <span class="type">DECIMAL</span>(<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student` <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> `gpa`;</span><br></pre></td></tr></table></figure>



<h3 id="第三课：写入数据"><a href="#第三课：写入数据" class="headerlink" title="第三课：写入数据"></a>第三课：写入数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;小白&#x27;</span>,<span class="string">&#x27;历史&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;小黑&#x27;</span>,<span class="string">&#x27;生物&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;小绿&#x27;</span>,<span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student`(`name`,`major`,`student_id`) <span class="keyword">VALUES</span>(<span class="string">&#x27;小蓝&#x27;</span>,<span class="string">&#x27;英语&#x27;</span>,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="string">&#x27;小黄&#x27;</span>,<span class="string">&#x27;生物&#x27;</span>);</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826160025214.png" alt="image-20230826160025214" style="zoom: 80%;" />





<h3 id="第四课：限制约束"><a href="#第四课：限制约束" class="headerlink" title="第四课：限制约束"></a>第四课：限制约束</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student`(</span><br><span class="line">	`student_id` <span class="type">INT</span> AUTO_INCREMENT,</span><br><span class="line">    `name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">    `major` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;历史&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(`student_id`)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> `student`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;小白&#x27;</span>,<span class="string">&#x27;英语&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student`(`student_id`,`name`) <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;小黑&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student`(`name`,`major`) <span class="keyword">VALUES</span>(<span class="string">&#x27;小白&#x27;</span>,<span class="string">&#x27;生物&#x27;</span>);</span><br></pre></td></tr></table></figure>





<h3 id="第五课：修改删除"><a href="#第五课：修改删除" class="headerlink" title="第五课：修改删除"></a>第五课：修改删除</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> SQL_SAFE_UPDATES <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student`(</span><br><span class="line">	`student_id` <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    `name` <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    `major` <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    `score` <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> `student`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student`;</span><br><span class="line"><span class="comment">-- 1</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;小白&#x27;</span>,<span class="string">&#x27;英语&#x27;</span>,<span class="number">50</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;小黄&#x27;</span>,<span class="string">&#x27;生物&#x27;</span>,<span class="number">90</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;小绿&#x27;</span>,<span class="string">&#x27;历史&#x27;</span>,<span class="number">70</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="string">&#x27;小蓝&#x27;</span>,<span class="string">&#x27;英语&#x27;</span>,<span class="number">80</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="string">&#x27;小黑&#x27;</span>,<span class="string">&#x27;化学&#x27;</span>,<span class="number">20</span>);</span><br><span class="line"><span class="comment">-- 2</span></span><br><span class="line"><span class="keyword">UPDATE</span> `student`</span><br><span class="line"><span class="keyword">SET</span> `major` <span class="operator">=</span> <span class="string">&#x27;英语文学&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> `major` <span class="operator">=</span> <span class="string">&#x27;英语&#x27;</span>;</span><br><span class="line"><span class="comment">-- 3</span></span><br><span class="line"><span class="keyword">UPDATE</span> `student`</span><br><span class="line"><span class="keyword">SET</span> `major` <span class="operator">=</span> <span class="string">&#x27;生物&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> `student_id` <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="comment">-- 4</span></span><br><span class="line"><span class="keyword">UPDATE</span> `student`</span><br><span class="line"><span class="keyword">SET</span> `major` <span class="operator">=</span> <span class="string">&#x27;生化&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> `major` <span class="operator">=</span> <span class="string">&#x27;生物&#x27;</span> <span class="keyword">OR</span> `major` <span class="operator">=</span> <span class="string">&#x27;化学&#x27;</span>;</span><br><span class="line"><span class="comment">-- 5</span></span><br><span class="line"><span class="keyword">UPDATE</span> `student`</span><br><span class="line"><span class="keyword">SET</span> `name` <span class="operator">=</span> <span class="string">&#x27;小灰&#x27;</span>, `major` <span class="operator">=</span> <span class="string">&#x27;物理&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> `student_id` <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 6</span></span><br><span class="line"><span class="keyword">UPDATE</span> `student`</span><br><span class="line"><span class="keyword">SET</span> `major` <span class="operator">=</span> <span class="string">&#x27;物理&#x27;</span>;</span><br><span class="line"><span class="comment">-- 7</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> `student_id` <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"><span class="comment">-- 8</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;小灰&#x27;</span> <span class="keyword">AND</span> `major` <span class="operator">=</span> <span class="string">&#x27;物理&#x27;</span>;</span><br><span class="line"><span class="comment">-- 9</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> `score` <span class="operator">&lt;</span> <span class="number">60</span>;</span><br><span class="line"><span class="comment">-- 10</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `student`;</span><br></pre></td></tr></table></figure>

<p>更新</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826162736012.png" alt="image-20230826162736012" style="zoom: 80%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826162938618.png" alt="image-20230826162938618" style="zoom:80%;" /><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826163039175.png" alt="image-20230826163039175" style="zoom:80%;" /> </p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826163220106.png" alt="image-20230826163220106" style="zoom:80%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826163425615.png" alt="image-20230826163425615" style="zoom:80%;" /><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826163513969.png" alt="image-20230826163513969" style="zoom:80%;" /> </p>
<p>删除</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826163624192.png" alt="image-20230826163624192" style="zoom:80%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826163736016.png" alt="image-20230826163736016" style="zoom:80%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826163817816.png" alt="image-20230826163817816" style="zoom:80%;" /> </p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826164149684.png" alt="image-20230826164149684" style="zoom:80%;" /> 

<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;大于			&lt;小于</span><br><span class="line">&gt;=大于等于		&lt;=大于等于</span><br><span class="line">=等于			&lt;&gt;不等于</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="第六课：查询资料"><a href="#第六课：查询资料" class="headerlink" title="第六课：查询资料"></a>第六课：查询资料</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student`(</span><br><span class="line">	`student_id` <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    `name` <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    `major` <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    `score` <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;小白&#x27;</span>,<span class="string">&#x27;英语&#x27;</span>,<span class="number">50</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;小黄&#x27;</span>,<span class="string">&#x27;生物&#x27;</span>,<span class="number">90</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;小绿&#x27;</span>,<span class="string">&#x27;历史&#x27;</span>,<span class="number">70</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="string">&#x27;小蓝&#x27;</span>,<span class="string">&#x27;英语&#x27;</span>,<span class="number">80</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="string">&#x27;小黑&#x27;</span>,<span class="string">&#x27;化学&#x27;</span>,<span class="number">20</span>);</span><br><span class="line"><span class="comment">-- 1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student`;</span><br><span class="line"><span class="comment">-- 2</span></span><br><span class="line"><span class="keyword">SELECT</span> `name` <span class="keyword">FROM</span> `student`;</span><br><span class="line"><span class="comment">-- 3</span></span><br><span class="line"><span class="keyword">SELECT</span> `name`, `major` <span class="keyword">FROM</span> `student`;</span><br><span class="line"><span class="comment">-- 4</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> `score`;</span><br><span class="line"><span class="comment">-- 5</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> `score` <span class="keyword">ASC</span>;</span><br><span class="line"><span class="comment">-- 6</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> `score` <span class="keyword">DESC</span>;</span><br><span class="line"><span class="comment">-- 7</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> `score`, `student_id`;</span><br><span class="line"><span class="comment">-- 8</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> `student`</span><br><span class="line">LIMIT <span class="number">3</span>;</span><br><span class="line"><span class="comment">-- 9</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> `score`</span><br><span class="line">LIMIT <span class="number">3</span>;</span><br><span class="line"><span class="comment">-- 10</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> `score` <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">3</span>;</span><br><span class="line"><span class="comment">-- 11</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> `major` <span class="operator">=</span> <span class="string">&#x27;英语&#x27;</span> <span class="keyword">AND</span> `student_id` <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 12</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> `major` <span class="operator">=</span> <span class="string">&#x27;英语&#x27;</span> <span class="keyword">OR</span> `score` <span class="operator">&gt;=</span> <span class="number">50</span>;</span><br><span class="line"><span class="comment">-- 13</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> `major` <span class="keyword">IN</span>(<span class="string">&#x27;历史&#x27;</span>,<span class="string">&#x27;英语&#x27;</span>,<span class="string">&#x27;生物&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826164440940.png" alt="image-20230826164440940" style="zoom:80%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826164455473.png" alt="image-20230826164455473" style="zoom:80%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826164544342.png" alt="image-20230826164544342" style="zoom:80%;" /> </p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826164641146.png" alt="image-20230826164641146" style="zoom:80%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826164817335.png" alt="image-20230826164817335" style="zoom:80%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826164710202.png" alt="image-20230826164710202" style="zoom:80%;" /> </p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826164907796.png" alt="image-20230826164907796" style="zoom:80%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826165004212.png" alt="image-20230826165004212" style="zoom:80%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826165232954.png" alt="image-20230826165232954" style="zoom:80%;" /> </p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826165319053.png" alt="image-20230826165319053" style="zoom:80%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826165504879.png" alt="image-20230826165504879" style="zoom:80%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826165629443.png" alt="image-20230826165629443" style="zoom:80%;" /> </p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826165849144.png" alt="image-20230826165849144" style="zoom:80%;" /> 



<h3 id="第七课：创建公司资料库"><a href="#第七课：创建公司资料库" class="headerlink" title="第七课：创建公司资料库"></a>第七课：创建公司资料库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 员工</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `employee`(</span><br><span class="line">	`emp_id` <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    `name` <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    `birth_date` <span class="type">DATE</span>,</span><br><span class="line">    `sex` <span class="type">VARCHAR</span>(<span class="number">1</span>),</span><br><span class="line">    `salary` <span class="type">INT</span>,</span><br><span class="line">    `branch_id` <span class="type">INT</span>,</span><br><span class="line">    `sup_id` <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 部门</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `branch`(</span><br><span class="line">	`branch_id` <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    `branch_name` <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    `manager_id` <span class="type">INT</span>,</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (`manager_id`) <span class="keyword">REFERENCES</span> `employee`(`emp_id`) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">SET</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 补充关系</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `employee`</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">FOREIGN</span> KEY(`branch_id`)</span><br><span class="line"><span class="keyword">REFERENCES</span> `branch`(`branch_id`)</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">SET</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `employee`</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">FOREIGN</span> KEY(`sup_id`)</span><br><span class="line"><span class="keyword">REFERENCES</span> `employee`(`emp_id`)</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">SET</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 客户</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `client`(</span><br><span class="line">	`client_id` <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    `client_name` <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    `phone` <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 工作</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `works_with`(</span><br><span class="line">	`emp_id` <span class="type">INT</span>,</span><br><span class="line">    `client_id` <span class="type">INT</span>,</span><br><span class="line">    `total_sales` <span class="type">INT</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`emp_id`, `client_id`),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (`emp_id`) <span class="keyword">REFERENCES</span> `employee`(`emp_id`) <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE,</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (`client_id`) <span class="keyword">REFERENCES</span> `client`(`client_id`) <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 新增资料</span></span><br><span class="line"><span class="comment">-- 部门</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `branch` <span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">&#x27;研发&#x27;</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `branch` <span class="keyword">VALUES</span>(<span class="number">2</span>, <span class="string">&#x27;行政&#x27;</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `branch` <span class="keyword">VALUES</span>(<span class="number">3</span>, <span class="string">&#x27;资讯&#x27;</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="comment">-- 员工</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employee` <span class="keyword">VALUES</span>(<span class="number">206</span>, <span class="string">&#x27;小黄&#x27;</span>, <span class="string">&#x27;1998-10-08&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="number">50000</span>, <span class="number">1</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employee` <span class="keyword">VALUES</span>(<span class="number">207</span>, <span class="string">&#x27;小绿&#x27;</span>, <span class="string">&#x27;1985-09-16&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">29000</span>, <span class="number">2</span>, <span class="number">206</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employee` <span class="keyword">VALUES</span>(<span class="number">208</span>, <span class="string">&#x27;小黑&#x27;</span>, <span class="string">&#x27;2000-12-19&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">35000</span>, <span class="number">3</span>, <span class="number">206</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employee` <span class="keyword">VALUES</span>(<span class="number">209</span>, <span class="string">&#x27;小白&#x27;</span>, <span class="string">&#x27;1997-01-22&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="number">39000</span>, <span class="number">3</span>, <span class="number">207</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employee` <span class="keyword">VALUES</span>(<span class="number">210</span>, <span class="string">&#x27;小蓝&#x27;</span>, <span class="string">&#x27;1925-11-10&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="number">84000</span>, <span class="number">1</span>, <span class="number">207</span>);</span><br><span class="line"><span class="comment">-- 部门更新内容</span></span><br><span class="line"><span class="keyword">UPDATE</span> `branch` <span class="keyword">SET</span> `manager_id` <span class="operator">=</span> <span class="number">206</span> <span class="keyword">WHERE</span> `branch_id` <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> `branch` <span class="keyword">SET</span> `manager_id` <span class="operator">=</span> <span class="number">207</span> <span class="keyword">WHERE</span> `branch_id` <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> `branch` <span class="keyword">SET</span> `manager_id` <span class="operator">=</span> <span class="number">208</span> <span class="keyword">WHERE</span> `branch_id` <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="comment">-- 客户</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `client` <span class="keyword">VALUES</span>(<span class="number">400</span>, <span class="string">&#x27;阿猫&#x27;</span>, <span class="string">&#x27;254354335&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `client` <span class="keyword">VALUES</span>(<span class="number">401</span>, <span class="string">&#x27;阿狗&#x27;</span>, <span class="string">&#x27;25633899&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `client` <span class="keyword">VALUES</span>(<span class="number">402</span>, <span class="string">&#x27;旺来&#x27;</span>, <span class="string">&#x27;45354345&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `client` <span class="keyword">VALUES</span>(<span class="number">403</span>, <span class="string">&#x27;露西&#x27;</span>, <span class="string">&#x27;54354365&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `client` <span class="keyword">VALUES</span>(<span class="number">404</span>, <span class="string">&#x27;艾瑞克&#x27;</span>, <span class="string">&#x27;18783783&#x27;</span>);</span><br><span class="line"><span class="comment">-- 工作</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `works_with` <span class="keyword">VALUES</span>(<span class="number">206</span>, <span class="number">400</span>, <span class="string">&#x27;70000&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `works_with` <span class="keyword">VALUES</span>(<span class="number">207</span>, <span class="number">401</span>, <span class="string">&#x27;24000&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `works_with` <span class="keyword">VALUES</span>(<span class="number">208</span>, <span class="number">402</span>, <span class="string">&#x27;9800&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `works_with` <span class="keyword">VALUES</span>(<span class="number">208</span>, <span class="number">403</span>, <span class="string">&#x27;24000&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `works_with` <span class="keyword">VALUES</span>(<span class="number">210</span>, <span class="number">404</span>, <span class="string">&#x27;87940&#x27;</span>);</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826170429151.png" alt="image-20230826170429151" style="zoom:80%;" />



<h3 id="第八课：练习"><a href="#第八课：练习" class="headerlink" title="第八课：练习"></a>第八课：练习</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1.取得所有员工资料</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `employee`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2.取得所有客户资料</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `client`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3.按照薪水低到高取得员工资料</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `employee` <span class="keyword">ORDER</span> <span class="keyword">BY</span> `salary`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4.取得薪水前三的员工名字、薪水</span></span><br><span class="line"><span class="keyword">SELECT</span> `name`, `salary` <span class="keyword">FROM</span> `employee` <span class="keyword">ORDER</span> <span class="keyword">BY</span> `salary` <span class="keyword">DESC</span> LIMIT <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5.取得所有性别，不重复</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> `sex` <span class="keyword">FROM</span> `employee`;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826174427828.png" alt="image-20230826174427828" style="zoom:80%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826174440581.png" alt="image-20230826174440581" style="zoom:80%;" /> </p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826174620092.png" alt="image-20230826174620092" style="zoom:80%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826174917541.png" alt="image-20230826174917541" style="zoom:80%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826175123281.png" alt="image-20230826175123281" style="zoom:80%;" /></p>
<h3 id="第九课：聚合函数"><a href="#第九课：聚合函数" class="headerlink" title="第九课：聚合函数"></a>第九课：聚合函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- aggregate functions 聚合函数</span></span><br><span class="line"><span class="comment">-- 1. 员工人数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> `employee`;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(`sup_id`) <span class="keyword">FROM</span> `employee`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 所有出生于1970-01-01之后的女性员工人数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> `employee` <span class="keyword">WHERE</span> `birth_date` <span class="operator">&gt;</span> <span class="string">&#x27;1970-01-01&#x27;</span> <span class="keyword">AND</span> `sex` <span class="operator">=</span> <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 所有员工的平均薪水</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(`salary`) <span class="keyword">FROM</span> `employee`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4. 所有员工薪水总和</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(`salary`) <span class="keyword">FROM</span> `employee`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5. 薪水最高/最低的员工</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(`salary`) <span class="keyword">FROM</span> `employee`;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(`salary`) <span class="keyword">FROM</span> `employee`;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826175521720.png" alt="image-20230826175521720" style="zoom:80%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826175547437.png" alt="image-20230826175547437" style="zoom:80%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826175726742.png" alt="image-20230826175726742" style="zoom:80%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826175822463.png" alt="image-20230826175822463" style="zoom:80%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826175934137.png" alt="image-20230826175934137" style="zoom:80%;" /></p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826180047403.png" alt="image-20230826180047403" style="zoom:80%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826180059087.png" alt="image-20230826180059087" style="zoom:80%;" /> </p>
<h3 id="第十课：通配符"><a href="#第十课：通配符" class="headerlink" title="第十课：通配符"></a>第十课：通配符</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">通配符</span><br><span class="line">_ 单个字元</span><br><span class="line"><span class="operator">%</span> 多个字元</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE `sql_tutorial`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1.全部客户</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `client`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2.尾号335</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `client` <span class="keyword">WHERE</span> `phone` <span class="keyword">LIKE</span> <span class="string">&#x27;%335&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3.开头25</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `client` <span class="keyword">WHERE</span> `phone` <span class="keyword">LIKE</span> <span class="string">&#x27;25%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4.中间54</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `client` <span class="keyword">WHERE</span> `phone` <span class="keyword">LIKE</span> <span class="string">&#x27;%54%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5.姓氏为艾</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `client` <span class="keyword">WHERE</span> `client_name` <span class="keyword">LIKE</span> <span class="string">&#x27;艾%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 6.生日在12月的员工</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `employee` <span class="keyword">WHERE</span> `birth_date` <span class="keyword">LIKE</span> <span class="string">&#x27;_____12%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826203100174.png" alt="image-20230826203100174" style="zoom:80%;" /> 

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826202905883.png" alt="image-20230826202905883" style="zoom:80%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826203134508.png" alt="image-20230826203134508" style="zoom:80%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826203155832.png" alt="image-20230826203155832" style="zoom:80%;" /> </p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826203325962.png" alt="image-20230826203325962" style="zoom:80%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826203600624.png" alt="image-20230826203600624" style="zoom:80%;" /> </p>
<h3 id="第十一课：联集"><a href="#第十一课：联集" class="headerlink" title="第十一课：联集"></a>第十一课：联集</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 员工、客户 </span></span><br><span class="line"><span class="keyword">SELECT</span> `name` </span><br><span class="line"><span class="keyword">FROM</span> `employee`</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> `client_name`</span><br><span class="line"><span class="keyword">FROM</span> `client`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 员工、客户、部门名 </span></span><br><span class="line"><span class="keyword">SELECT</span> `name` </span><br><span class="line"><span class="keyword">FROM</span> `employee`</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> `client_name`</span><br><span class="line"><span class="keyword">FROM</span> `client`</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> `branch_name`</span><br><span class="line"><span class="keyword">FROM</span> `branch`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. ID+名字 </span></span><br><span class="line"><span class="keyword">SELECT</span> `emp_id`,`name` </span><br><span class="line"><span class="keyword">FROM</span> `employee`</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> `client_id`,`client_name`</span><br><span class="line"><span class="keyword">FROM</span> `client`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4. 导出名字自定义 </span></span><br><span class="line"><span class="keyword">SELECT</span> `emp_id` <span class="keyword">AS</span> `ID`,`name` <span class="keyword">AS</span> `Name` </span><br><span class="line"><span class="keyword">FROM</span> `employee`</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> `client_id`,`client_name`</span><br><span class="line"><span class="keyword">FROM</span> `client`;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826203945825.png" alt="image-20230826203945825" style="zoom:80%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826204115508.png" alt="image-20230826204115508" style="zoom:80%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826204308275.png" alt="image-20230826204308275" style="zoom:80%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826204536942.png" alt="image-20230826204536942" style="zoom:80%;" /> </p>
<h3 id="第十二课：连接"><a href="#第十二课：连接" class="headerlink" title="第十二课：连接"></a>第十二课：连接</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `branch` <span class="keyword">VALUES</span>(<span class="number">4</span>, <span class="string">&#x27;偷懒&#x27;</span>, <span class="keyword">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1. 取得所有部门经理信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> `employee` <span class="keyword">JOIN</span> `branch`</span><br><span class="line"><span class="keyword">ON</span> `emp_id` <span class="operator">=</span> `manager_id`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 简短显示 </span></span><br><span class="line"><span class="keyword">SELECT</span> `emp_id`, `name`, `branch_name`</span><br><span class="line"><span class="keyword">FROM</span> `employee` <span class="keyword">JOIN</span> `branch`</span><br><span class="line"><span class="keyword">ON</span> `emp_id` <span class="operator">=</span> `manager_id`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3.防止表格冲突，更加完善的写法 </span></span><br><span class="line"><span class="keyword">SELECT</span> `employee`.`emp_id`, `employee`.`name`, `branch`.`branch_name`</span><br><span class="line"><span class="keyword">FROM</span> `employee` <span class="keyword">JOIN</span> `branch`</span><br><span class="line"><span class="keyword">ON</span> `employee`.`emp_id` <span class="operator">=</span> `branch`.`manager_id`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4. 左表全连 </span></span><br><span class="line"><span class="keyword">SELECT</span> `employee`.`emp_id`, `employee`.`name`, `branch`.`branch_name`</span><br><span class="line"><span class="keyword">FROM</span> `employee` <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> `branch`</span><br><span class="line"><span class="keyword">ON</span> `employee`.`emp_id` <span class="operator">=</span> `branch`.`manager_id`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5. 右表全连 </span></span><br><span class="line"><span class="keyword">SELECT</span> `employee`.`emp_id`, `employee`.`name`, `branch`.`branch_name`</span><br><span class="line"><span class="keyword">FROM</span> `employee` <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> `branch`</span><br><span class="line"><span class="keyword">ON</span> `employee`.`emp_id` <span class="operator">=</span> `branch`.`manager_id`;</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826205130194.png" alt="image-20230826205130194" style="zoom:80%;" /> 

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826205315790.png" alt="image-20230826205315790" style="zoom:80%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826205515468.png" alt="image-20230826205515468" style="zoom:80%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826205651640.png" alt="image-20230826205651640" style="zoom:80%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826205805280.png" alt="image-20230826205805280" style="zoom:80%;" /> </p>
<h3 id="第十三课：子查询"><a href="#第十三课：子查询" class="headerlink" title="第十三课：子查询"></a>第十三课：子查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- subquery 子查询 </span></span><br><span class="line"><span class="comment">-- 1. 研发部门的经理的名字 </span></span><br><span class="line"><span class="keyword">SELECT</span> `name` <span class="keyword">FROM</span> `employee`</span><br><span class="line"><span class="keyword">WHERE</span> `emp_id` <span class="operator">=</span> (</span><br><span class="line">	<span class="keyword">SELECT</span> `manager_id` <span class="keyword">FROM</span> `branch`</span><br><span class="line">	<span class="keyword">WHERE</span> `branch_name` <span class="operator">=</span> <span class="string">&#x27;研发&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 对客户销售金额超过50000的员工的名字 </span></span><br><span class="line"><span class="keyword">SELECT</span> `name` <span class="keyword">FROM</span> `employee`</span><br><span class="line"><span class="keyword">WHERE</span> `emp_id` <span class="keyword">IN</span> (</span><br><span class="line">	<span class="keyword">SELECT</span> `emp_id` <span class="keyword">FROM</span> `works_with`</span><br><span class="line">    <span class="keyword">WHERE</span> `total_sales` <span class="operator">&gt;</span> <span class="number">50000</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826210452530.png" alt="image-20230826210452530" style="zoom:80%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/sqlquick/image-20230826210809503.png" alt="image-20230826210809503" style="zoom:80%;" /> </p>
<h3 id="第十四课：参数"><a href="#第十四课：参数" class="headerlink" title="第十四课：参数"></a>第十四课：参数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 部门</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `branch`(</span><br><span class="line">	`branch_id` <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    `branch_name` <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    `manager_id` <span class="type">INT</span>,</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (`manager_id`) <span class="keyword">REFERENCES</span> `employee`(`emp_id`) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">SET</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 工作</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `works_with`(</span><br><span class="line">	`emp_id` <span class="type">INT</span>,</span><br><span class="line">    `client_id` <span class="type">INT</span>,</span><br><span class="line">    `total_sales` <span class="type">INT</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`emp_id`, `client_id`),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (`emp_id`) <span class="keyword">REFERENCES</span> `employee`(`emp_id`) <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE,</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (`client_id`) <span class="keyword">REFERENCES</span> `client`(`client_id`) <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>ON DELETE SET NULL</code></p>
<p>当指向的 employee 被删除时，此处的 manager_id 则设为 NULL。</p>
</li>
<li><p><code>ON DELETE CASCADE</code></p>
<p>当指向的 employee 被删除时，此处的 emp_id 跟着一起删除。</p>
</li>
</ul>
<blockquote>
<p>可以思考得知：工作关系的删除方式是不能为第一种的。</p>
<p>为什么？</p>
<p>因为works_with的这两个值同时还是主键，若是删除设为NULL，会导致出错。</p>
</blockquote>
<h3 id="第十五课：Python-连接-MySQL"><a href="#第十五课：Python-连接-MySQL" class="headerlink" title="第十五课：Python 连接 MySQL"></a>第十五课：Python 连接 MySQL</h3><ul>
<li>Python 安装库</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install mysql-connector-python</span><br></pre></td></tr></table></figure>

<ul>
<li>创建方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mysql.connector</span><br><span class="line"></span><br><span class="line">connection = mysql.connector.connect(</span><br><span class="line">    host = <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">	port = <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">    user = <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">	password = <span class="string">&#x27;password&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cursor = connection.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库</span></span><br><span class="line">cursor.excute(<span class="string">&quot;CREATE DATABASE `sql_tutorial`;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有数据库</span></span><br><span class="line">cursor.excute(<span class="string">&quot;SHOW DATABASES;&quot;</span>)</span><br><span class="line">records = cursor.fetchall()</span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> records:</span><br><span class="line">    <span class="built_in">print</span>(r)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用数据库</span></span><br><span class="line">cursor.excute(<span class="string">&quot;USE `sql_tutorial`;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建表格</span></span><br><span class="line">cursor.excute(<span class="string">&quot;CREATE TABLE `qq`(`qq` INT);&quot;</span>)</span><br><span class="line"></span><br><span class="line">cursor.close()</span><br><span class="line">connection.close()</span><br></pre></td></tr></table></figure>

<ul>
<li>查询方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mysql.connector</span><br><span class="line"></span><br><span class="line">connection = mysql.connector.connect(</span><br><span class="line">    host = <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">	port = <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">    user = <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">	password = <span class="string">&#x27;password&#x27;</span>,</span><br><span class="line">	database = <span class="string">&#x27;sql_tutorial&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cursor = connection.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取得部门资料</span></span><br><span class="line">cursor.excute(<span class="string">&quot;SELECT * FROM `branch`;&quot;</span>)</span><br><span class="line">records = cursor.fetchall()</span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> records:</span><br><span class="line">    <span class="built_in">print</span>(r)</span><br><span class="line"></span><br><span class="line">cursor.close()</span><br><span class="line">connection.close()</span><br></pre></td></tr></table></figure>

<ul>
<li>修改资料</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mysql.connector</span><br><span class="line"></span><br><span class="line">connection = mysql.connector.connect(</span><br><span class="line">    host = <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">	port = <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">    user = <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">	password = <span class="string">&#x27;password&#x27;</span>,</span><br><span class="line">	database = <span class="string">&#x27;sql_tutorial&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cursor = connection.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增</span></span><br><span class="line">cursor.excute(<span class="string">&quot;INSERT INTO `branch` VALUES(5, &#x27;qq&#x27;, NULL);&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">cursor.excute(<span class="string">&quot;UPDATE `branch` SET `manager_id` = NULL WHERE `branch_id` = 4;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">cursor.excute(<span class="string">&quot;DELETE FROM `branch` WHERE `branch_id` = 5;&quot;</span>)</span><br><span class="line"></span><br><span class="line">cursor.close()</span><br><span class="line">cursor.commit()		<span class="comment"># 修改资料的最后都要进行提交</span></span><br><span class="line"></span><br><span class="line">connection.close()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>双色素材收集</title>
    <url>/butterflyblog/2023/08/04/%E5%8F%8C%E8%89%B2%E7%B4%A0%E6%9D%90%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<h1 id="双色素材收集"><a href="#双色素材收集" class="headerlink" title="双色素材收集"></a>双色素材收集</h1><blockquote>
<p>来源：网络收集</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/color/image-20230805142624931.png" alt="image-20230805142624931" style="zoom:50%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/color/image-20230805142734561.png" alt="image-20230805142734561" style="zoom:50%;" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#18545A - #F1F2B5</span><br><span class="line">#F902FF - #00DBDE</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/color/image-20230805142946263.png" alt="image-20230805142946263" style="zoom:50%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/color/image-20230805143004439.png" alt="image-20230805143004439" style="zoom:50%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/color/image-20230805143022880.png" alt="image-20230805143022880" style="zoom:50%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/color/image-20230805143051753.png" alt="image-20230805143051753" style="zoom:50%;" /> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#F8DF72 - #057748</span><br><span class="line">#93D5DC - #2E317C</span><br><span class="line">#E9DB39 - #2E317C</span><br><span class="line">#E9F1F6 - #12AA9C</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/color/image-20230805143240829.png" alt="image-20230805143240829" style="zoom:50%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/color/image-20230805143306085.png" alt="image-20230805143306085" style="zoom:50%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/color/image-20230805143324079.png" alt="image-20230805143324079" style="zoom:50%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/color/image-20230805143341551.png" alt="image-20230805143341551" style="zoom:50%;" /> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#F0C9CF - #2F2F35</span><br><span class="line">#B01F24 - #003472</span><br><span class="line">#F2DE76 - #AB96C5</span><br><span class="line">#F0C9CF - #AB96C5</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/color/image-20230805143608325.png" alt="image-20230805143608325" style="zoom:50%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/color/image-20230805143622503.png" alt="image-20230805143622503" style="zoom:50%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/color/image-20230805143647202.png" alt="image-20230805143647202" style="zoom:50%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/color/image-20230805143704117.png" alt="image-20230805143704117" style="zoom:50%;" /> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#83CBAC - #003472</span><br><span class="line">#475164 - #A4CAB6</span><br><span class="line">#B9DEC9 - #2775B6</span><br><span class="line">#207F4C - #2D2D30</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/color/image-20230805143859167.png" alt="image-20230805143859167" style="zoom:50%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/color/image-20230805143921542.png" alt="image-20230805143921542" style="zoom:50%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/color/image-20230805144001731.png" alt="image-20230805144001731" style="zoom:50%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/color/image-20230805144017810.png" alt="image-20230805144017810" style="zoom:50%;" /> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#CCA4E3 - #15559A</span><br><span class="line">#F0F5E5 - #1F2040</span><br><span class="line">#BEC936 - #223E36</span><br><span class="line">#1677B3 - #C6E6E8</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/color/image-20230805144159269.png" alt="image-20230805144159269" style="zoom:50%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/color/image-20230805144218945.png" alt="image-20230805144218945" style="zoom:50%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/color/image-20230805144254856.png" alt="image-20230805144254856" style="zoom:50%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/color/image-20230805144348704.png" alt="image-20230805144348704" style="zoom:50%;" /> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#DAD4CB - #8076A3</span><br><span class="line">#2775B6 - #BACCD9</span><br><span class="line">#EF498B - #1F2040</span><br><span class="line">#5E616D - #F7CFBA</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>通用知识</category>
      </categories>
      <tags>
        <tag>颜色素材</tag>
      </tags>
  </entry>
  <entry>
    <title>《sqlmap中文用法指南》</title>
    <url>/butterflyblog/2023/09/19/%E3%80%8Asqlmap%E4%B8%AD%E6%96%87%E7%94%A8%E6%B3%95%E6%8C%87%E5%8D%97%E3%80%8B/</url>
    <content><![CDATA[<h1 id="《sqlmap中文用法指南》"><a href="#《sqlmap中文用法指南》" class="headerlink" title="《sqlmap中文用法指南》"></a>《sqlmap中文用法指南》</h1><blockquote>
<p>sqlmap官方：<a href="https://github.com/sqlmapproject/sqlmap">sqlmap</a></p>
<p>说明：首先保证您的主机已经安装Python环境（若您未安装，请百度安装方法）</p>
</blockquote>
<h2 id="1、用法"><a href="#1、用法" class="headerlink" title="1、用法"></a>1、用法</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python sqlmap.py [选项]</span><br></pre></td></tr></table></figure>

<h2 id="2、选项"><a href="#2、选项" class="headerlink" title="2、选项"></a>2、选项</h2><h3 id="2-1-帮助信息"><a href="#2-1-帮助信息" class="headerlink" title="2.1 帮助信息"></a>2.1 帮助信息</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-h, --help            显示基本帮助信息并退出</span><br><span class="line">-hh                   显示高级帮助信息并退出</span><br><span class="line">--version             显示程序版本信息并退出</span><br><span class="line">-v VERBOSE            输出信息详细程度级别：0-6（默认为 1）</span><br></pre></td></tr></table></figure>

<h3 id="2-2-目标"><a href="#2-2-目标" class="headerlink" title="2.2 目标"></a>2.2 目标</h3><ul>
<li>至少提供一个以下选项以指定目标</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-d DIRECT           直接连接数据库</span><br><span class="line">-u URL, --url=URL   目标 URL（例如：&quot;http://www.site.com/vuln.php?id=1&quot;）</span><br><span class="line">-l LOGFILE          从 Burp 或 WebScarab 代理的日志文件中解析目标地址</span><br><span class="line">-x SITEMAPURL       从远程网站地图（.xml）文件中解析目标</span><br><span class="line">-m BULKFILE         从文本文件中获取批量目标</span><br><span class="line">-r REQUESTFILE      从文件中读取 HTTP 请求</span><br><span class="line">-g GOOGLEDORK       使用 Google dork 结果作为目标</span><br><span class="line">-c CONFIGFILE       从 INI 配置文件中加载选项</span><br></pre></td></tr></table></figure>

<h3 id="2-3-请求"><a href="#2-3-请求" class="headerlink" title="2.3 请求"></a>2.3 请求</h3><ul>
<li>以下选项可以指定连接目标地址的方式</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--method=METHOD     强制使用提供的 HTTP 方法（例如：PUT）</span><br><span class="line">--data=DATA         使用 POST 发送数据串</span><br><span class="line">--param-del=PARA..  设置参数值分隔符</span><br><span class="line">--cookie=COOKIE     指定 HTTP Cookie </span><br><span class="line">--cookie-del=COO..  设置 cookie 分隔符</span><br><span class="line">--load-cookies=L..  指定以 Netscape/wget 格式存放 cookies 的文件</span><br><span class="line">--drop-set-cookie   忽略 HTTP 响应中的 Set-Cookie 参数</span><br><span class="line">--user-agent=AGENT  指定 HTTP User-Agent</span><br><span class="line">--random-agent      使用随机的 HTTP User-Agent</span><br><span class="line">--host=HOST         指定 HTTP Host</span><br><span class="line">--referer=REFERER   指定 HTTP Referer</span><br><span class="line">-H HEADER, --hea..  设置额外的 HTTP 头参数（例如：&quot;X-Forwarded-For: 127.0.0.1&quot;）</span><br><span class="line">--headers=HEADERS   设置额外的 HTTP 头参数（例如：&quot;Accept-Language: fr\nETag: 123&quot;）</span><br><span class="line">--auth-type=AUTH..  HTTP 认证方式（Basic，Digest，NTLM 或 PKI）</span><br><span class="line">--auth-cred=AUTH..  HTTP 认证凭证（username:password）</span><br><span class="line">--auth-file=AUTH..  HTTP 认证 PEM 证书/私钥文件</span><br><span class="line">--ignore-code=IG..  忽略 HTTP 错误码（例如：401）</span><br><span class="line">--ignore-proxy      忽略系统默认代理设置</span><br><span class="line">--ignore-redirects  忽略重定向尝试</span><br><span class="line">--ignore-timeouts   忽略连接超时</span><br><span class="line">--proxy=PROXY       使用代理连接目标 URL</span><br><span class="line">--proxy-cred=PRO..  使用代理进行认证（username:password）</span><br><span class="line">--proxy-file=PRO..  从文件中加载代理列表</span><br><span class="line">--tor               使用 Tor 匿名网络</span><br><span class="line">--tor-port=TORPORT  设置 Tor 代理端口代替默认端口</span><br><span class="line">--tor-type=TORTYPE  设置 Tor 代理方式（HTTP，SOCKS4 或 SOCKS5（默认））</span><br><span class="line">--check-tor         检查是否正确使用了 Tor</span><br><span class="line">--delay=DELAY       设置每个 HTTP 请求的延迟秒数</span><br><span class="line">--timeout=TIMEOUT   设置连接响应的有效秒数（默认为 30）</span><br><span class="line">--retries=RETRIES   连接超时时重试次数（默认为 3）</span><br><span class="line">--randomize=RPARAM  随机更改给定的参数值</span><br><span class="line">--safe-url=SAFEURL  测试过程中可频繁访问且合法的 URL 地址（译者注：</span><br><span class="line">                    有些网站在你连续多次访问错误地址时会关闭会话连接，</span><br><span class="line">                    后面的“请求”小节有详细说明）</span><br><span class="line">--safe-post=SAFE..  使用 POST 方法发送合法的数据</span><br><span class="line">--safe-req=SAFER..  从文件中加载合法的 HTTP 请求</span><br><span class="line">--safe-freq=SAFE..  每访问两次给定的合法 URL 才发送一次测试请求</span><br><span class="line">--skip-urlencode    不对 payload 数据进行 URL 编码</span><br><span class="line">--csrf-token=CSR..  设置网站用来反 CSRF 攻击的 token</span><br><span class="line">--csrf-url=CSRFURL  指定可提取反 CSRF 攻击 token 的 URL</span><br><span class="line">--force-ssl         强制使用 SSL/HTTPS</span><br><span class="line">--hpp               使用 HTTP 参数污染攻击</span><br><span class="line">--eval=EVALCODE     在发起请求前执行给定的 Python 代码（例如：</span><br><span class="line">                    &quot;import hashlib;id2=hashlib.md5(id).hexdigest()&quot;）</span><br></pre></td></tr></table></figure>

<h3 id="2-4-优化"><a href="#2-4-优化" class="headerlink" title="2.4 优化"></a>2.4 优化</h3><ul>
<li>以下选项用于优化 sqlmap 性能</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-o                  开启所有优化开关</span><br><span class="line">--predict-output    预测常用请求的输出</span><br><span class="line">--keep-alive        使用持久的 HTTP(S) 连接</span><br><span class="line">--null-connection   仅获取页面大小而非实际的 HTTP 响应</span><br><span class="line">--threads=THREADS   设置 HTTP(S) 请求并发数最大值（默认为 1）</span><br></pre></td></tr></table></figure>

<h3 id="2-5-注入"><a href="#2-5-注入" class="headerlink" title="2.5 注入"></a>2.5 注入</h3><ul>
<li><p>以下选项用于指定要测试的参数，</p>
<p>提供自定义注入 payloads 和篡改参数的脚本</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-p TESTPARAMETER    指定需要测试的参数</span><br><span class="line">--skip=SKIP         指定要跳过的参数</span><br><span class="line">--skip-static       指定跳过非动态参数</span><br><span class="line">--param-exclude=..  用正则表达式排除参数（例如：&quot;ses&quot;）</span><br><span class="line">--dbms=DBMS         指定 DBMS 类型（例如：MySQL）</span><br><span class="line">--dbms-cred=DBMS..  DBMS 认证凭据（username:password）</span><br><span class="line">--os=OS             指定 DBMS 服务器的操作系统类型</span><br><span class="line">--invalid-bignum    将无效值设置为大数</span><br><span class="line">--invalid-logical   对无效值使用逻辑运算</span><br><span class="line">--invalid-string    对无效值使用随机字符串</span><br><span class="line">--no-cast           关闭 payload 构造机制</span><br><span class="line">--no-escape         关闭字符串转义机制</span><br><span class="line">--prefix=PREFIX     注入 payload 的前缀字符串</span><br><span class="line">--suffix=SUFFIX     注入 payload 的后缀字符串</span><br><span class="line">--tamper=TAMPER     用给定脚本修改注入数据</span><br></pre></td></tr></table></figure>

<h3 id="2-6-检测"><a href="#2-6-检测" class="headerlink" title="2.6 检测"></a>2.6 检测</h3><ul>
<li>以下选项用于自定义检测方式</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--level=LEVEL       设置测试等级（1-5，默认为 1）</span><br><span class="line">--risk=RISK         设置测试风险等级（1-3，默认为 1）</span><br><span class="line">--string=STRING     用于确定查询结果为真时的字符串</span><br><span class="line">--not-string=NOT..  用于确定查询结果为假时的字符串</span><br><span class="line">--regexp=REGEXP     用于确定查询结果为真时的正则表达式</span><br><span class="line">--code=CODE         用于确定查询结果为真时的 HTTP 状态码</span><br><span class="line">--text-only         只根据页面文本内容对比页面</span><br><span class="line">--titles            只根据页面标题对比页面</span><br></pre></td></tr></table></figure>

<h3 id="2-7-技术"><a href="#2-7-技术" class="headerlink" title="2.7 技术"></a>2.7 技术</h3><ul>
<li>以下选项用于调整特定 SQL 注入技术的测试方法</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--technique=TECH    使用的 SQL 注入技术（默认为“BEUSTQ”，译者注：</span><br><span class="line">                    B: Boolean-based blind SQL injection（布尔型盲注）</span><br><span class="line">                    E: Error-based SQL injection（报错型注入）</span><br><span class="line">                    U: UNION query SQL injection（联合查询注入）</span><br><span class="line">                    S: Stacked queries SQL injection（堆查询注入）</span><br><span class="line">                    T: Time-based blind SQL injection（时间型盲注）</span><br><span class="line">                    Q: inline Query injection（内联查询注入）</span><br><span class="line">--time-sec=TIMESEC  延迟 DBMS 的响应秒数（默认为 5）</span><br><span class="line">--union-cols=UCOLS  设置联合查询注入测试的列数目范围</span><br><span class="line">--union-char=UCHAR  用于暴力猜解列数的字符</span><br><span class="line">--union-from=UFROM  设置联合查询注入 FROM 处用到的表</span><br><span class="line">--dns-domain=DNS..  设置用于 DNS 渗出攻击的域名（译者注：</span><br><span class="line">                    推荐阅读《在SQL注入中使用DNS获取数据》</span><br><span class="line">                    http://cb.drops.wiki/drops/tips-5283.html，</span><br><span class="line">                    在后面的“技术”小节中也有相应解释）</span><br><span class="line">--second-order=S..  设置二阶响应的结果显示页面的 URL（译者注：</span><br><span class="line">                    该选项用于二阶 SQL 注入）</span><br></pre></td></tr></table></figure>

<h3 id="2-8-指纹识别"><a href="#2-8-指纹识别" class="headerlink" title="2.8 指纹识别"></a>2.8 指纹识别</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-f, --fingerprint   执行广泛的 DBMS 版本指纹识别</span><br></pre></td></tr></table></figure>

<h3 id="2-9-枚举"><a href="#2-9-枚举" class="headerlink" title="2.9 枚举"></a>2.9 枚举</h3><ul>
<li><p>以下选项用于获取后端数据库管理系统的信息，结构和数据表中的数据。</p>
<p>此外，还可以运行你输入的 SQL 语句</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-a, --all           获取所有信息、数据</span><br><span class="line">-b, --banner        获取 DBMS banner</span><br><span class="line">--current-user      获取 DBMS 当前用户</span><br><span class="line">--current-db        获取 DBMS 当前数据库</span><br><span class="line">--hostname          获取 DBMS 服务器的主机名</span><br><span class="line">--is-dba            探测 DBMS 当前用户是否为 DBA（数据库管理员）</span><br><span class="line">--users             枚举出 DBMS 所有用户</span><br><span class="line">--passwords         枚举出 DBMS 所有用户的密码哈希</span><br><span class="line">--privileges        枚举出 DBMS 所有用户特权级</span><br><span class="line">--roles             枚举出 DBMS 所有用户角色</span><br><span class="line">--dbs               枚举出 DBMS 所有数据库</span><br><span class="line">--tables            枚举出 DBMS 数据库中的所有表</span><br><span class="line">--columns           枚举出 DBMS 表中的所有列</span><br><span class="line">--schema            枚举出 DBMS 所有模式</span><br><span class="line">--count             获取数据表数目</span><br><span class="line">--dump              导出 DBMS 数据库表项</span><br><span class="line">--dump-all          导出所有 DBMS 数据库表项</span><br><span class="line">--search            搜索列，表和/或数据库名</span><br><span class="line">--comments          获取 DBMS 注释</span><br><span class="line">-D DB               指定要枚举的 DBMS 数据库</span><br><span class="line">-T TBL              指定要枚举的 DBMS 数据表</span><br><span class="line">-C COL              指定要枚举的 DBMS 数据列</span><br><span class="line">-X EXCLUDECOL       指定要排除的 DBMS 数据列</span><br><span class="line">-U USER             指定枚举的 DBMS 用户</span><br><span class="line">--exclude-sysdbs    枚举所有数据表时，指定排除特定系统数据库</span><br><span class="line">--pivot-column=P..  指定主列</span><br><span class="line">--where=DUMPWHERE   在转储表时使用 WHERE 条件语句</span><br><span class="line">--start=LIMITSTART  指定要导出的数据表条目开始行数</span><br><span class="line">--stop=LIMITSTOP    指定要导出的数据表条目结束行数</span><br><span class="line">--first=FIRSTCHAR   指定获取返回查询结果的开始字符位</span><br><span class="line">--last=LASTCHAR     指定获取返回查询结果的结束字符位</span><br><span class="line">--sql-query=QUERY   指定要执行的 SQL 语句</span><br><span class="line">--sql-shell         调出交互式 SQL shell</span><br><span class="line">--sql-file=SQLFILE  执行文件中的 SQL 语句</span><br></pre></td></tr></table></figure>

<h3 id="2-10-暴力破解"><a href="#2-10-暴力破解" class="headerlink" title="2.10 暴力破解"></a>2.10 暴力破解</h3><ul>
<li>以下选项用于暴力破解测试</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--common-tables     检测常见的表名是否存在</span><br><span class="line">--common-columns    检测常用的列名是否存在</span><br></pre></td></tr></table></figure>

<h3 id="2-11-用户自定义函数注入"><a href="#2-11-用户自定义函数注入" class="headerlink" title="2.11 用户自定义函数注入"></a>2.11 用户自定义函数注入</h3><ul>
<li>以下选项用于创建用户自定义函数</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--udf-inject        注入用户自定义函数</span><br><span class="line">--shared-lib=SHLIB  共享库的本地路径</span><br></pre></td></tr></table></figure>

<h3 id="2-12-访问文件系统"><a href="#2-12-访问文件系统" class="headerlink" title="2.12 访问文件系统"></a>2.12 访问文件系统</h3><ul>
<li>以下选项用于访问后端数据库管理系统的底层文件系统</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--file-read=RFILE   读取后端 DBMS 文件系统中的文件</span><br><span class="line">--file-write=WFILE  写入后端 DBMS 文件系统中的文件</span><br><span class="line">--file-dest=DFILE   使用文件绝对路径写入到后端 DBMS</span><br></pre></td></tr></table></figure>

<h3 id="2-13-访问操作系统"><a href="#2-13-访问操作系统" class="headerlink" title="2.13 访问操作系统"></a>2.13 访问操作系统</h3><ul>
<li>以下选项用于访问后端数据库管理系统的底层操作系统</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--os-cmd=OSCMD      执行操作系统命令</span><br><span class="line">--os-shell          调出交互式操作系统 shell</span><br><span class="line">--os-pwn            调出 OOB shell，Meterpreter 或 VNC</span><br><span class="line">--os-smbrelay       一键调出 OOB shell，Meterpreter 或 VNC</span><br><span class="line">--os-bof            利用存储过程的缓冲区溢出</span><br><span class="line">--priv-esc          数据库进程用户提权</span><br><span class="line">--msf-path=MSFPATH  Metasploit 框架的本地安装路径</span><br><span class="line">--tmp-path=TMPPATH  远程临时文件目录的绝对路径</span><br></pre></td></tr></table></figure>

<h3 id="2-14-访问-Windows-注册表"><a href="#2-14-访问-Windows-注册表" class="headerlink" title="2.14 访问 Windows 注册表"></a>2.14 访问 Windows 注册表</h3><ul>
<li>以下选项用于访问后端数据库管理系统的 Windows 注册表</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--reg-read          读取一个 Windows 注册表键值</span><br><span class="line">--reg-add           写入一个 Windows 注册表键值数据</span><br><span class="line">--reg-del           删除一个 Windows 注册表键值</span><br><span class="line">--reg-key=REGKEY    指定 Windows 注册表键</span><br><span class="line">--reg-value=REGVAL  指定 Windows 注册表键值</span><br><span class="line">--reg-data=REGDATA  指定 Windows 注册表键值数据</span><br><span class="line">--reg-type=REGTYPE  指定 Windows 注册表键值类型</span><br></pre></td></tr></table></figure>

<h3 id="2-15-通用选项"><a href="#2-15-通用选项" class="headerlink" title="2.15 通用选项"></a>2.15 通用选项</h3><ul>
<li>以下选项用于设置通用的参数</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-s SESSIONFILE      从文件（.sqlite）中读入会话信息</span><br><span class="line">-t TRAFFICFILE      保存所有 HTTP 流量记录到指定文本文件</span><br><span class="line">--batch             从不询问用户输入，使用默认配置</span><br><span class="line">--binary-fields=..  具有二进制值的结果字段（例如：&quot;digest&quot;）</span><br><span class="line">--check-internet    在访问目标之前检查是否正常连接互联网</span><br><span class="line">--crawl=CRAWLDEPTH  从目标 URL 开始爬取网站</span><br><span class="line">--crawl-exclude=..  用正则表达式筛选爬取的页面（例如：&quot;logout&quot;）</span><br><span class="line">--csv-del=CSVDEL    指定输出到 CVS 文件时使用的分隔符（默认为“,”）</span><br><span class="line">--charset=CHARSET   指定 SQL 盲注字符集（例如：&quot;0123456789abcdef&quot;）</span><br><span class="line">--dump-format=DU..  导出数据的格式（CSV（默认），HTML 或 SQLITE）</span><br><span class="line">--encoding=ENCOD..  指定获取数据时使用的字符编码（例如：GBK）</span><br><span class="line">--eta               显示每个结果输出的预计到达时间</span><br><span class="line">--flush-session     清空当前目标的会话文件</span><br><span class="line">--forms             解析并测试目标 URL 的表单</span><br><span class="line">--fresh-queries     忽略存储在会话文件中的查询结果</span><br><span class="line">--har=HARFILE       将所有 HTTP 流量记录到一个 HAR 文件中</span><br><span class="line">--hex               获取数据时调用 DBMS 的 hex 函数</span><br><span class="line">--output-dir=OUT..  自定义输出目录路径</span><br><span class="line">--parse-errors      从响应中解析并显示 DBMS 错误信息</span><br><span class="line">--save=SAVECONFIG   将选项设置保存到一个 INI 配置文件</span><br><span class="line">--scope=SCOPE       用正则表达式从提供的代理日志中过滤目标</span><br><span class="line">--test-filter=TE..  根据 payloads 和/或标题（例如：ROW）选择测试</span><br><span class="line">--test-skip=TEST..  根据 payloads 和/或标题（例如：BENCHMARK）跳过部分测试</span><br><span class="line">--update            更新 sqlmap</span><br></pre></td></tr></table></figure>

<h3 id="2-16-其他选项"><a href="#2-16-其他选项" class="headerlink" title="2.16 其他选项"></a>2.16 其他选项</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-z MNEMONICS        使用短助记符（例如：“flu,bat,ban,tec=EU”）</span><br><span class="line">--alert=ALERT       在找到 SQL 注入时运行 OS 命令</span><br><span class="line">--answers=ANSWERS   设置问题答案（例如：“quit=N,follow=N”）</span><br><span class="line">--beep              出现问题提醒或在发现 SQL 注入时发出提示音</span><br><span class="line">--cleanup           指定移除 DBMS 中的特定的 UDF 或者数据表</span><br><span class="line">--dependencies      检查 sqlmap 缺少什么（非核心）依赖</span><br><span class="line">--disable-coloring  关闭彩色控制台输出</span><br><span class="line">--gpage=GOOGLEPAGE  指定页码使用 Google dork 结果</span><br><span class="line">--identify-waf      针对 WAF/IPS/IDS 保护进行彻底的测试</span><br><span class="line">--mobile            使用 HTTP User-Agent 模仿智能手机</span><br><span class="line">--offline           在离线模式下工作（仅使用会话数据）</span><br><span class="line">--purge-output      安全地删除输出目录的所有内容</span><br><span class="line">--skip-waf          跳过启发式检测 WAF/IPS/IDS 保护</span><br><span class="line">--smart             只有在使用启发式检测时才进行彻底的测试</span><br><span class="line">--sqlmap-shell      调出交互式 sqlmap shell</span><br><span class="line">--tmp-dir=TMPDIR    指定用于存储临时文件的本地目录</span><br><span class="line">--web-root=WEBROOT  指定 Web 服务器根目录（例如：&quot;/var/www&quot;）</span><br><span class="line">--wizard            适合初级用户的向导界面</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：</p>
<p>sqlmap默认输出路径为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\用户名\AppData\Local\sqlmap\output\网址\dump\数据库名\表名</span><br></pre></td></tr></table></figure>

<p>可以通过 <code>--output-dir=D:\自定义路径</code> 自定义输出目录路径。</p>
</blockquote>
]]></content>
      <categories>
        <category>脚本工具</category>
      </categories>
      <tags>
        <tag>sqlmap</tag>
      </tags>
  </entry>
  <entry>
    <title>弹性盒子 flex 布局语法</title>
    <url>/butterflyblog/2023/07/10/%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90flex%E5%B8%83%E5%B1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="弹性盒子flex布局语法"><a href="#弹性盒子flex布局语法" class="headerlink" title="弹性盒子flex布局语法"></a>弹性盒子flex布局语法</h1><blockquote>
<p>传统为盒子模型布局，但有缺点，如：无法实现垂直居中</p>
<p>Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。</p>
</blockquote>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p><strong>任何一个容器都可以指定为Flex布局。</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>行内元素也可以使用Flex布局。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Webkit内核的浏览器，必须加上-webkit前缀。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex; <span class="comment">/* Safari */</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。</p>
<ul>
<li><p>采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。</p>
<p>它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230402162410751.png" alt="image-20230402162410751" style="zoom: 80%;" />

<ul>
<li><p>容器默认存在两根轴：</p>
<ul>
<li><p>水平的主轴（main axis）</p>
<blockquote>
<p>主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end</p>
</blockquote>
</li>
<li><p>垂直的交叉轴（cross axis）</p>
<blockquote>
<p>交叉轴的开始位置叫做cross start，结束位置叫做cross end</p>
</blockquote>
</li>
</ul>
</li>
<li><p>项目默认沿主轴排列。</p>
</li>
<li><p>单个项目占据的主轴空间叫做main size，</p>
<p>占据的交叉轴空间叫做cross size。</p>
</li>
</ul>
</li>
</ul>
<h3 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h3><h4 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h4><p>决定主轴的方向（即项目的排列方向）</p>
<ul>
<li>row（默认值）：主轴为水平方向，起点在左端。</li>
<li>row-reverse：主轴为水平方向，起点在右端。</li>
<li>column：主轴为垂直方向，起点在上沿。</li>
<li>column-reverse：主轴为垂直方向，起点在下沿。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230402162751718.png" alt="image-20230402162751718" style="zoom:80%;" />

<h4 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h4><p>默认情况下，项目都排在一条线（又称”轴线”）上。</p>
<p>flex-wrap属性定义，如果一条轴线排不下，如何换行。</p>
<ul>
<li><p>nowrap（默认）：不换行</p>
</li>
<li><p>wrap：换行，第一行在上方</p>
</li>
<li><p>wrap-reverse：换行，第一行在下方</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230402162859131.png" alt="image-20230402162859131" style="zoom:80%;" />

<h4 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h4><p>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式</p>
<p>默认值为row nowrap</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; &lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h4><p>定义了项目在主轴上的对齐方式</p>
<p>具体对齐方式与轴的方向有关，下面假设主轴为从左到右。</p>
<ul>
<li>flex-start（默认值）：左对齐</li>
<li>flex-end：右对齐</li>
<li>center： 居中</li>
<li>space-between：两端对齐，项目之间的间隔都相等</li>
<li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://www.runoob.com/wp-content/uploads/2015/07/c55dfe8e3422458b50e985552ef13ba5.png" alt="img" style="zoom:80%;" />



<h4 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h4><p>定义项目在交叉轴上如何对齐</p>
<p>具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p>
<ul>
<li>flex-start：交叉轴的起点对齐</li>
<li>flex-end：交叉轴的终点对齐</li>
<li>center：交叉轴的中点对齐</li>
<li>baseline: 项目的第一行文字的基线对齐</li>
<li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://www.runoob.com/wp-content/uploads/2015/07/2b0c39c7e7a80d5a784c8c2ca63cde17.png" alt="img" style="zoom:80%;" />



<h4 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h4><p>定义了多根轴线的对齐方式。</p>
<p>如果项目只有一根轴线，该属性不起作用</p>
<ul>
<li>flex-start：与交叉轴的起点对齐</li>
<li>flex-end：与交叉轴的终点对齐</li>
<li>center：与交叉轴的中点对齐</li>
<li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布</li>
<li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍</li>
<li>stretch（默认值）：轴线占满整个交叉轴</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://www.runoob.com/wp-content/uploads/2015/07/f10918ccb8a13247c9d47715a2bd2c33.png" alt="img" style="zoom:80%;" />

<h3 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h3><h4 id="order"><a href="#order" class="headerlink" title="order"></a>order</h4><p>定义项目的排列顺序。</p>
<p>数值越小，排列越靠前，默认为0。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: &lt;integer&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230402163850395.png" alt="image-20230402163850395" style="zoom:80%;" />

<h4 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h4><p>定义项目的放大比例。</p>
<p>默认为0，即如果存在剩余空间，也不放大。</p>
<blockquote>
<p>如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。</p>
<p>如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: &lt;number&gt;; <span class="comment">/* default 0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230402163934529.png" alt="image-20230402163934529" style="zoom:80%;" />

<h4 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h4><p>定义了项目的缩小比例。</p>
<p>默认为1，即如果空间不足，该项目将缩小。</p>
<blockquote>
<p>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。</p>
<p>如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。</p>
<p>负值对该属性无效。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: &lt;number&gt;; <span class="comment">/* default 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230402164028190.png" alt="image-20230402164028190" style="zoom:80%;" />

<h4 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h4><p>定义了在分配多余空间之前，项目占据的主轴空间（main size）。</p>
<p>浏览器根据这个属性，计算主轴是否有多余空间。</p>
<p>它的默认值为auto，即项目的本来大小。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: &lt;length&gt; | auto; <span class="comment">/* default auto */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。</p>
<h4 id="x3D-x3D-flex"><a href="#x3D-x3D-flex" class="headerlink" title="&#x3D;&#x3D;flex"></a>&#x3D;&#x3D;flex</h4><p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写。</p>
<p>默认值为0 1 auto。后两个属性可选。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: none | [ &lt;<span class="string">&#x27;flex-grow&#x27;</span>&gt; &lt;<span class="string">&#x27;flex-shrink&#x27;</span>&gt;? || &lt;<span class="string">&#x27;flex-basis&#x27;</span>&gt; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该属性有两个快捷值：</p>
<ul>
<li><p>auto (1 1 auto) </p>
<p>全都等比例放大或缩小</p>
</li>
<li><p>none (0 0 auto)</p>
<p>全都不放大缩小</p>
</li>
</ul>
<p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>
<h4 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h4><p>允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。</p>
<p>默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p>
<p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://www.runoob.com/wp-content/uploads/2015/07/55b19171b8b6b9487d717bf2ecbba6de.png" alt="img" style="zoom:80%;" />

]]></content>
      <categories>
        <category>Web技术</category>
      </categories>
      <tags>
        <tag>flex布局</tag>
      </tags>
  </entry>
  <entry>
    <title>数字逻辑实验Notes持续更新</title>
    <url>/butterflyblog/2023/09/21/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E5%AE%9E%E9%AA%8CNotes%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<h1 id="数字逻辑实验Notes持续更新"><a href="#数字逻辑实验Notes持续更新" class="headerlink" title="数字逻辑实验Notes持续更新"></a>数字逻辑实验Notes持续更新</h1><blockquote>
<p>@isSeymour</p>
<p>2023.9.21</p>
</blockquote>
<h2 id="一、软件介绍"><a href="#一、软件介绍" class="headerlink" title="一、软件介绍"></a>一、软件介绍</h2><h3 id="1-logisim"><a href="#1-logisim" class="headerlink" title="1. logisim"></a>1. logisim</h3><ul>
<li><p>画逻辑门图</p>
<p>这是画图的，与后面的 Vivado 并无关系！</p>
</li>
<li><p>你可以不画图，也可以在脑子里画图，</p>
<p>这个软件只是让你的逻辑门电路图变得清晰好看，仅此而已！</p>
</li>
</ul>
<h3 id="2-ModelSim-PE"><a href="#2-ModelSim-PE" class="headerlink" title="2. ModelSim PE"></a>2. ModelSim PE</h3><ul>
<li><p>模拟软件</p>
<p>这是在你做好一个vivado工程，进行模拟仿真的。</p>
</li>
<li><p>与Vivado 关联，必须使用</p>
</li>
</ul>
<h3 id="3-Vivado"><a href="#3-Vivado" class="headerlink" title="3. Vivado"></a>3. Vivado</h3><ul>
<li><p><code>.xpr</code>文件的开发软件</p>
<p>这是你所有工程文件的创建软件，需要在此新建设计文件，写入verilog 代码</p>
</li>
<li><p>核心，必须使用</p>
</li>
</ul>
<h2 id="二、一般流程"><a href="#二、一般流程" class="headerlink" title="二、一般流程"></a>二、一般流程</h2><h3 id="1-logisim-画图"><a href="#1-logisim-画图" class="headerlink" title="1. logisim 画图"></a>1. logisim 画图</h3><ul>
<li>先用loigim画图，画出你的逻辑门电路图。</li>
</ul>
<h3 id="2-Vivado-工程"><a href="#2-Vivado-工程" class="headerlink" title="2. Vivado 工程"></a>2. Vivado 工程</h3><ul>
<li><p>新建工程</p>
<ul>
<li><p>打开 Vivado 2016.2 软件</p>
</li>
<li><p>点击新建工程 Create New Project，自行选择 保存路径</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>注：若是打开已有工程，则是Open Project，找到工程文件夹下的<code>.xpr</code>文件，打开。</p>
</blockquote>
<ul>
<li>新增源文件<ul>
<li>点击左上方的 Add Sources</li>
<li>选择 Add or create design sources，点击next</li>
<li>点击 Create New File</li>
<li>输入你的模块名作为文件名 File Name，点击Finish</li>
<li>这里模块名可以不用改，I&#x2F;O端口自行添加、删除、命名、设置INPUT&#x2F;OUTPUT模式</li>
<li>点击OK</li>
</ul>
</li>
</ul>
<blockquote>
<p>若要删除源文件，右键选中文件，Remove，记得勾选Alse delete 来删除文件夹中的文件。</p>
</blockquote>
<ul>
<li><p>写入verilog 代码</p>
<ul>
<li>在这里的<code>.v</code>文件可以写入你的 module 代码设置</li>
</ul>
</li>
<li><p>模拟仿真</p>
<ul>
<li>都写好了<code>.v</code>文件，点击左侧栏的 Run Simulation 进行模拟</li>
<li>进入模拟框，点击 Run all 按钮（中间上方的蓝色的播放按钮）</li>
<li>查看模拟结果，模拟结束</li>
</ul>
</li>
<li><p>综合</p>
<ul>
<li><p>选中模拟生成多出来的文件（一般在对应的<code>.v</code>文件下，多出来一个<code>.v</code>文件）</p>
</li>
<li><p>选中这个<code>.v</code>文件，选择 Set as top，作为顶层文件</p>
</li>
<li><p>点击左侧栏中的运行综合 Run Synthesis</p>
</li>
<li><p>综合结束后，弹出一个框，选择Open Synthesized Design</p>
</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/DigitLogic/image-20230921212239287.png" alt="image-20230921212239287" style="zoom: 80%;" /> 
</li>
<li><p>添加约束</p>
<ul>
<li>上方栏 layout 中改为 I&#x2F;O planning。</li>
<li>在底线有一栏，找到 I&#x2F;O ports 点击打开，在这里选择每个端口对应的脚约束，如 J17、H15、M13等等。</li>
</ul>
<blockquote>
<p>这里电平和标准显示有红色的默认值 Default，我们要自行选一下，仍然选那个默认的值即可。</p>
<p>否则，后面会因为端口争用而报错。</p>
</blockquote>
<ul>
<li>点击左上角的保存按钮（快捷键Crtl + S），会让你保存到已有<code>.xdc</code>文件，或新建。这里新建，命名文件。</li>
</ul>
</li>
<li><p>生成下板</p>
<ul>
<li>Source栏的文件里，多了<code>.xdc</code>文件，双击查看。</li>
<li>点击左侧栏的 Generate Bitstream</li>
<li>等待一会，正在生成。完成后会弹出下图框。选择Open Implemented Design。</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/DigitLogic/image-20230921212959247.png" alt="image-20230921212959247" style="zoom: 80%;" /> 

<ul>
<li>点击左侧栏的 Open Hardware Manager。</li>
<li>关闭开关，把你的开发板连接到电脑，打开开关。</li>
<li>正上方有浅绿色的提示连接，点击Open Target 后选择 Auto Connect自动连接。</li>
<li>连接成功后，正上方会有浅绿色提示导入程序 Program device，按提示点下一步即可。</li>
<li>导入结束，可以测试你的程序效果了。</li>
</ul>
</li>
</ul>
<h2 id="三、实验报告问题"><a href="#三、实验报告问题" class="headerlink" title="三、实验报告问题"></a>三、实验报告问题</h2><h3 id="1-logisim逻辑验证图"><a href="#1-logisim逻辑验证图" class="headerlink" title="1. logisim逻辑验证图"></a>1. logisim逻辑验证图</h3><ul>
<li><p>打开Logisim 画一下图即可</p>
<p>说明见下图</p>
</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/DigitLogic/image-20230930190857258.png" alt="image-20230930190857258" style="zoom:80%;" /> 



<h3 id="2-modelsim仿真波形图"><a href="#2-modelsim仿真波形图" class="headerlink" title="2. modelsim仿真波形图"></a>2. modelsim仿真波形图</h3><ul>
<li>打开vivado工程文件（<code>.xpr</code>文件）</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/DigitLogic/image-20230930191344505.png" alt="image-20230930191344505" style="zoom:80%;" /> 

<blockquote>
<p>Run Simulation中，选择Run Behavioral Simulation。</p>
</blockquote>
<ul>
<li>调整波形图位置为合适位置</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/DigitLogic/image-20230930191955770.png" alt="image-20230930191955770" style="zoom:80%;" /> 

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/DigitLogic/image-20230930192128856.png" alt="image-20230930192128856" style="zoom:80%;" /> 

<h3 id="3-下板实验结果"><a href="#3-下板实验结果" class="headerlink" title="3. 下板实验结果"></a>3. 下板实验结果</h3><ul>
<li>打开硬件管理 Open Hardware Manager</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/DigitLogic/image-20230930192546513.png" alt="image-20230930192546513" style="zoom:80%;" /> 

<ul>
<li>连接开发板</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/DigitLogic/image-20230930192818904.png" alt="image-20230930192818904" style="zoom:80%;" /> 

<ul>
<li>程序写入开发板</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/DigitLogic/image-20230930193104097.png" alt="image-20230930193104097" style="zoom:80%;" /> 

<ul>
<li>测试你的开发板吧</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/DigitLogic/image-20230930193453775.png" alt="image-20230930193453775" style="zoom:80%;" /> 

<blockquote>
<p>备注：</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/DigitLogic/image-20230930194029079.png" alt="image-20230930194029079" style="zoom:80%;" /> 

<p>改了之后，需要重新Generate Bitstream。</p>
</blockquote>
<h3 id="4-源文件-v-在哪？"><a href="#4-源文件-v-在哪？" class="headerlink" title="4.  源文件 .v 在哪？"></a>4.  源文件 .v 在哪？</h3><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/DigitLogic/image-20230930205352087.png" alt="image-20230930205352087" style="zoom:80%;" /> 



<h3 id="5-文件-bit-在哪？"><a href="#5-文件-bit-在哪？" class="headerlink" title="5. 文件.bit 在哪？"></a>5. 文件.bit 在哪？</h3><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/DigitLogic/image-20230930211145857.png" alt="image-20230930211145857" style="zoom:80%;" /> 

<blockquote>
<p>备注：</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/DigitLogic/27d3012fc22e892dc6829314189f52b.jpg" alt="27d3012fc22e892dc6829314189f52b" style="zoom: 33%;" /> 
</blockquote>
<h3 id="6-提交规范"><a href="#6-提交规范" class="headerlink" title="6. 提交规范"></a>6. 提交规范</h3><p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/DigitLogic/image-20230930212748213.png" alt="image-20230930212748213"> </p>
<h2 id="四、注意事项"><a href="#四、注意事项" class="headerlink" title="四、注意事项"></a>四、注意事项</h2><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><p><img src="C:\Users\86182\AppData\Roaming\Typora\typora-user-images\image-20231009222156469.png" alt="image-20231009222156469"></p>
]]></content>
      <categories>
        <category>数字逻辑</category>
      </categories>
      <tags>
        <tag>数字逻辑实验</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构C库Notes</title>
    <url>/butterflyblog/2023/09/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84C%E5%BA%93Notes/</url>
    <content><![CDATA[<h1 id="数据结构C库Notes"><a href="#数据结构C库Notes" class="headerlink" title="数据结构C库Notes"></a>数据结构C库Notes</h1><h2 id="一、输入输出"><a href="#一、输入输出" class="headerlink" title="一、输入输出"></a>一、输入输出</h2><h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> b;</span><br><span class="line">    <span class="type">double</span> f;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">255</span>];</span><br><span class="line">    </span><br><span class="line">	<span class="comment">// 输入</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %c %s&quot;</span>, &amp;a, &amp;ch, str);	<span class="comment">// 整型、字符、字符串</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;b);		<span class="comment">// 长长整型</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;f);</span><br><span class="line">    getchar(ch);	<span class="comment">// 输入字符，只要是ASCII码表上有的，都会读入（不忽略任何字符）。返回值为int类型ASCII码值</span></span><br><span class="line">    gets(str);		<span class="comment">// 输入字符串，遇到换行符才为结束，读入后会吸收掉换行符。返回值为str首地址（文件尾返回值NULL）</span></span><br><span class="line">    </span><br><span class="line">	<span class="comment">// 输出</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %c %s&quot;</span>, a, ch, str);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%5.2f&quot;</span>, &amp;f);		<span class="comment">// 右对齐并占用宽度为 5，保留2位小数的浮点数</span></span><br><span class="line">    <span class="built_in">putchar</span>(ch);</span><br><span class="line">    <span class="built_in">puts</span>(str);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="二、内存分配"><a href="#二、内存分配" class="headerlink" title="二、内存分配"></a>二、内存分配</h2><h3 id="代码解释-1"><a href="#代码解释-1" class="headerlink" title="代码解释"></a>代码解释</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// malloc</span></span><br><span class="line"><span class="comment">// 用于申请一片新的地址空间</span></span><br><span class="line"><span class="comment">// 例：顺序表新建InitList，直接申请新空间即可</span></span><br><span class="line">L-&gt;elem = (ElemType*)<span class="built_in">malloc</span>(LIST_INIT_SIZE * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line"></span><br><span class="line"><span class="comment">// realloc</span></span><br><span class="line"><span class="comment">// 用于在已使用的内存进行分配，会帮你扩大连续的内存空间，连续的！</span></span><br><span class="line"><span class="comment">// 例：顺序表插入，已有空间不足够了，要扩大，同时还要保证扩大后的空间仍然和之前的连续！</span></span><br><span class="line">ElemType* newbase;</span><br><span class="line">newbase = (ElemType*)<span class="built_in">realloc</span>(L-&gt;elem, (L-&gt;listsize + LISTINCREMENT) * <span class="keyword">sizeof</span>(ElemType));</span><br></pre></td></tr></table></figure>



<h2 id="三、字符串处理C版"><a href="#三、字符串处理C版" class="headerlink" title="三、字符串处理C版"></a>三、字符串处理C版</h2><h3 id="代码解释-2"><a href="#代码解释-2" class="headerlink" title="代码解释"></a>代码解释</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入的字符串是否为insert</span></span><br><span class="line"><span class="type">char</span> option[<span class="number">255</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, option);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(option, <span class="string">&quot;insert&quot;</span>)==<span class="number">0</span>)		<span class="comment">// 比较结果是0为相等，正数前者大，负数后者大</span></span><br><span class="line">&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制字符串</span></span><br><span class="line"><span class="type">char</span> str1[<span class="number">255</span>], str2[<span class="number">255</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str1);</span><br><span class="line"><span class="built_in">strcpy</span>(str2, str1);		<span class="comment">// 把str1复制到str2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串长度</span></span><br><span class="line"><span class="type">char</span> s1[<span class="number">255</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s1);</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">strlen</span>(s1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拼接字符串</span></span><br><span class="line"><span class="type">char</span> Str1[<span class="number">255</span>], Str[<span class="number">255</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, Str1);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, Str2);</span><br><span class="line"><span class="built_in">strcat</span>(Str1, Str2);		<span class="comment">// 把Str2接在Str1末尾</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找字符串中含某字符</span></span><br><span class="line"><span class="type">char</span> STR[<span class="number">255</span>] = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line"><span class="type">char</span> ch = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line"><span class="type">char</span> *ptr;</span><br><span class="line">ptr = <span class="built_in">strchr</span>(STR, ch);</span><br><span class="line"><span class="keyword">if</span>(ptr!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;位置：%ld，输出：%s&quot;</span>, ptr-str+<span class="number">1</span>, ptr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;没有找到&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="四、字符串处理C-版"><a href="#四、字符串处理C-版" class="headerlink" title="四、字符串处理C++版"></a>四、字符串处理C++版</h2><ul>
<li><p>C++大大增强了对字符串的支持，除了可以使用C风格的字符串，还可以使用内置的 string 类。</p>
<p>string 类处理起字符串来会方便很多，完全可以代替C语言中的字符数组或字符串指针。</p>
</li>
</ul>
<h3 id="初步认识"><a href="#初步认识" class="headerlink" title="初步认识"></a>初步认识</h3><ul>
<li>string 变量可以直接通过赋值操作符<code>=</code>进行赋值</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string s1;	<span class="comment">//默认值是&quot;&quot;，也即空字符串。</span></span><br><span class="line">    string s2 = <span class="string">&quot;c plus plus&quot;</span>;	<span class="comment">// 初始化为&quot;c plus plus&quot;。与C风格的字符串不同，string 的结尾没有结束标志&#x27;\0&#x27;。</span></span><br><span class="line">    string s3 = s2;	<span class="comment">// s3 的内容也是&quot;c plus plus&quot;。</span></span><br><span class="line">    <span class="function">string <span class="title">s4</span> <span class="params">(<span class="number">5</span>, <span class="string">&#x27;s&#x27;</span>)</span></span>;	<span class="comment">// 由 5 个&#x27;s&#x27;字符组成的字符串，也就是&quot;sssss&quot;。</span></span><br><span class="line">    <span class="comment">// 输入输出</span></span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;s;  <span class="comment">//输入字符串（cin遇到空格就认为结束！）</span></span><br><span class="line">    cout&lt;&lt;s&lt;&lt;endl;  <span class="comment">//输出字符串</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：</p>
<p>abcd  efgh↙<br>abcd</p>
<p>虽然我们输入了两个由空格隔开的网址，但是只输出了一个，这是因为输入运算符<code>&gt;&gt;</code>默认会忽略空格，遇到空格就认为输入结束，所以最后输入的<code>efgh</code>没有被存储到变量 s。</p>
</blockquote>
<h3 id="代码解释-3"><a href="#代码解释-3" class="headerlink" title="代码解释"></a>代码解释</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 求长度 length()</span></span><br><span class="line">string s = <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line"><span class="type">int</span> len = s.<span class="built_in">length</span>();	<span class="comment">// 4 (由于 string 的末尾没有&#x27;\0&#x27;字符，所以 length() 返回的是字符串的真实长度，而不是长度 +1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问单个字符，从0开始计数</span></span><br><span class="line">s[<span class="number">5</span>] = <span class="string">&#x27;5&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拼接（很简单！怎么拼都行，且只需要写+即可）</span></span><br><span class="line">string s1 = <span class="string">&quot;first &quot;</span>;</span><br><span class="line">string s2 = <span class="string">&quot;second &quot;</span>;</span><br><span class="line"><span class="type">char</span> *s3 = <span class="string">&quot;third &quot;</span>;</span><br><span class="line"><span class="type">char</span> s4[] = <span class="string">&quot;fourth &quot;</span>;</span><br><span class="line"><span class="type">char</span> ch = <span class="string">&#x27;@&#x27;</span>;</span><br><span class="line">string s5 = s1 + s2;</span><br><span class="line">string s6 = s1 + s3;</span><br><span class="line">string s7 = s1 + s4;</span><br><span class="line">string s8 = s1 + ch;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增删改查</span></span><br><span class="line"><span class="comment">// [插入]</span></span><br><span class="line">string s1, s2;</span><br><span class="line">s1 = <span class="string">&quot;1234567890&quot;</span>;</span><br><span class="line">s2 = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">5</span>, s2);	<span class="comment">// 也可以直接插 s1.insert(5, &quot;aaa&quot;);</span></span><br><span class="line"><span class="comment">// 结果：12345aaa67890</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// [删除]</span></span><br><span class="line">string s1, s2, s3;</span><br><span class="line">s1 = s2 = <span class="string">&quot;1234567890&quot;</span>;</span><br><span class="line">s1.<span class="built_in">erase</span>(<span class="number">5</span>);	<span class="comment">//12345</span></span><br><span class="line">s2.<span class="built_in">erase</span>(<span class="number">5</span>, <span class="number">3</span>);	<span class="comment">//1234590</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// [截取]</span></span><br><span class="line">string s1 = <span class="string">&quot;first second third&quot;</span>;</span><br><span class="line">string s2;</span><br><span class="line">s2 = s1.<span class="built_in">substr</span>(<span class="number">6</span>, <span class="number">6</span>);	<span class="comment">//second</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// [查找]</span></span><br><span class="line">string s1 = <span class="string">&quot;first second third&quot;</span>;</span><br><span class="line">string s2 = <span class="string">&quot;second&quot;</span>;</span><br><span class="line"><span class="type">int</span> index = s1.<span class="built_in">find</span>(s2,<span class="number">5</span>);	<span class="comment">// 表示在s1的第5个字符开始查找，默认0</span></span><br><span class="line"><span class="comment">// 结果：6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换为C风格的字符串 c_str()</span></span><br><span class="line">string path = <span class="string">&quot;D:\\demo.txt&quot;</span>;	<span class="comment">// 有时候必须要使用C风格的字符串（例如打开文件时的路径）</span></span><br><span class="line">FILE *fp = <span class="built_in">fopen</span>(path.<span class="built_in">c_str</span>(), <span class="string">&quot;rt&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="数字字符"><a href="#数字字符" class="headerlink" title="数字字符"></a>数字字符</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数字转字符串</span></span><br><span class="line">string s = <span class="built_in">to_string</span>(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串转数字</span></span><br><span class="line"><span class="type">int</span> a = <span class="built_in">stoi</span>(s);</span><br></pre></td></tr></table></figure>



<h2 id="五、C-标准库-lt-stdarg-h-gt"><a href="#五、C-标准库-lt-stdarg-h-gt" class="headerlink" title="五、C 标准库 &lt;stdarg.h&gt;"></a>五、C 标准库 &lt;stdarg.h&gt;</h2><blockquote>
<p><strong>stdarg.h</strong> 头文件定义了一个变量类型 <strong>va_list</strong> 和三个宏，这三个宏可用于在参数个数未知（即参数个数可变）时获取函数中的参数。</p>
<p>可变参数的函数通在参数列表的末尾是使用省略号(,…)定义的。</p>
</blockquote>
<h3 id="库变量"><a href="#库变量" class="headerlink" title="库变量"></a>库变量</h3><table>
<thead>
<tr>
<th align="left">变量</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>va_list</strong></td>
<td align="left">这是一个适用于 <strong>va_start()、va_arg()</strong> 和 <strong>va_end()</strong> 这三个宏存储信息的类型。</td>
</tr>
</tbody></table>
<h3 id="库宏"><a href="#库宏" class="headerlink" title="库宏"></a>库宏</h3><table>
<thead>
<tr>
<th align="left">宏</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>void va_start(va_list ap, last_arg)</strong></td>
<td align="left">这个宏初始化 <strong>ap</strong> 变量，它与 <strong>va_arg</strong> 和 <strong>va_end</strong> 宏是一起使用的。<strong>last_arg</strong> 是最后一个传递给函数的已知的固定参数，即省略号之前的参数。</td>
</tr>
<tr>
<td align="left"><strong>type va_arg(va_list ap, type)</strong></td>
<td align="left">这个宏检索函数参数列表中类型为 <strong>type</strong> 的下一个参数。</td>
</tr>
<tr>
<td align="left"><strong>void va_end(va_list ap)</strong></td>
<td align="left">这个宏允许使用了 <strong>va_start</strong> 宏的带有可变参数的函数返回。如果在从函数返回之前没有调用 <strong>va_end</strong>，则结果为未定义。</td>
</tr>
</tbody></table>
<h4 id="va-start"><a href="#va-start" class="headerlink" title="va_start"></a>va_start</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>描述</span><br><span class="line">C 库宏 <span class="function"><span class="type">void</span> <span class="title">va_start</span><span class="params">(va_list ap, last_arg)</span> 初始化 ap 变量，它与 va_arg 和 va_end 宏是一起使用的。last_arg 是最后一个传递给函数的已知的固定参数，即省略号之前的参数。</span></span><br><span class="line"><span class="function">这个宏必须在使用 va_arg 和 va_end 之前被调用。</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">2.声明</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">va_start</span><span class="params">(va_list ap, last_arg)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>参数</span><br><span class="line">ap -- 这是一个 va_list 类型的对象，它用来存储通过 va_arg 获取额外参数时所必需的信息。</span><br><span class="line">last_arg -- 最后一个传递给函数的已知的固定参数。</span><br></pre></td></tr></table></figure>

<h4 id="var-arg"><a href="#var-arg" class="headerlink" title="var_arg"></a>var_arg</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>描述</span><br><span class="line">C 库宏 <span class="function">type <span class="title">va_arg</span><span class="params">(va_list ap, type)</span> 检索函数参数列表中类型为 type 的下一个参数。它无法判断检索到的参数是否是传给函数的最后一个参数。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2.声明</span></span><br><span class="line"><span class="function">type <span class="title">va_arg</span><span class="params">(va_list ap, type)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">3.参数</span></span><br><span class="line"><span class="function">ap -- 这是一个 va_list 类型的对象，存储了有关额外参数和检索状态的信息。该对象应在第一次调用 va_arg 之前通过调用 va_start 进行初始化。</span></span><br><span class="line"><span class="function">type -- 这是一个类型名称。该类型名称是作为扩展自该宏的表达式的类型来使用的。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">4.返回值</span></span><br><span class="line"><span class="function">该宏返回下一个额外的参数，是一个类型为 type 的表达式。</span></span><br></pre></td></tr></table></figure>

<h4 id="var-end"><a href="#var-end" class="headerlink" title="var_end"></a>var_end</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>描述</span><br><span class="line">C 库宏 <span class="function"><span class="type">void</span> <span class="title">va_end</span><span class="params">(va_list ap)</span> 允许使用了 va_start 宏的带有可变参数的函数返回。如果在从函数返回之前没有调用 va_end，则结果为未定义。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2.声明</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">va_end</span><span class="params">(va_list ap)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">3.参数</span></span><br><span class="line"><span class="function">ap -- 这是之前由同一函数中的 va_start 初始化的 va_list 对象。</span></span><br></pre></td></tr></table></figure>

<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span>, ...)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;10、20 和 30 的和 = %d\n&quot;</span>,  <span class="built_in">sum</span>(<span class="number">3</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>) );</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;4、20、25 和 30 的和 = %d\n&quot;</span>,  <span class="built_in">sum</span>(<span class="number">4</span>, <span class="number">4</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>) );</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> num_args, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="type">int</span> val = <span class="number">0</span>;</span><br><span class="line">   va_list ap;</span><br><span class="line">   <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">va_start</span>(ap, num_args);</span><br><span class="line">   <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; num_args; i++)</span><br><span class="line">   &#123;</span><br><span class="line">      val += <span class="built_in">va_arg</span>(ap, <span class="type">int</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">va_end</span>(ap);</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10、20 和 30 的和 = 60</span><br><span class="line">4、20、25 和 30 的和 = 79</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构Notes持续更新...</title>
    <url>/butterflyblog/2023/09/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84Notes%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<h1 id="数据结构Notes持续更新…"><a href="#数据结构Notes持续更新…" class="headerlink" title="数据结构Notes持续更新…"></a>数据结构Notes持续更新…</h1><blockquote>
<p>来源：数据结构课程总结</p>
<p>2023.9~2024.1@isSeymour</p>
</blockquote>
<h2 id="一、线性表"><a href="#一、线性表" class="headerlink" title="一、线性表"></a>一、线性表</h2><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/DataStructure/image-20230930213805446.png" alt="image-20230930213805446" style="zoom:80%;" /> 

<h3 id="1-1-顺序表"><a href="#1-1-顺序表" class="headerlink" title="1.1 顺序表"></a>1.1 顺序表</h3><blockquote>
<p>元素位置从1开始作为参数 i 传入（不是从0开始）。</p>
</blockquote>
<h4 id="定义、声明"><a href="#定义、声明" class="headerlink" title="定义、声明"></a>定义、声明</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LIST_INIT_SIZE 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LIST_INCREMENT 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;	<span class="comment">// !!!这里可以把int改成你自己需要的任何类型，结构体也可以</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    ElemType* elem;	<span class="comment">// 顺序表元素首地址</span></span><br><span class="line">    <span class="type">int</span> length;		<span class="comment">// 当前顺序表长度</span></span><br><span class="line">    <span class="type">int</span> listsize;	<span class="comment">// 顺序表容量</span></span><br><span class="line">&#125; sqlist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Status;	<span class="comment">// 函数返回状态</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INFEASIBLE -1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OVERFLOW -2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化、销毁、清空</span></span><br><span class="line">Status <span class="title function_">InitList</span><span class="params">(sqlist* L)</span>;</span><br><span class="line">Status <span class="title function_">DestroyList</span><span class="params">(sqlist* L)</span>;</span><br><span class="line">Status <span class="title function_">ClearList</span><span class="params">(sqlist* L)</span>;</span><br><span class="line"><span class="comment">// 求长度、取元素</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ListLength</span><span class="params">(sqlist L)</span>;</span><br><span class="line">Status <span class="title function_">GetElem</span><span class="params">(sqlist L, <span class="type">int</span> i, ElemType* e)</span>;</span><br><span class="line"><span class="comment">// 插入、删除</span></span><br><span class="line">Status <span class="title function_">ListInsert</span><span class="params">(sqlist* L, <span class="type">int</span> i, ElemType e)</span>;</span><br><span class="line">Status <span class="title function_">ListDelete</span><span class="params">(sqlist* L, <span class="type">int</span> i, ElemType* e)</span>;</span><br><span class="line"><span class="comment">// 更多</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">LocateElem</span><span class="params">(sqlist L, ElemType e, Status (*compare)(ElemType e1, ElemType e2))</span>;</span><br><span class="line">Status <span class="title function_">PriorElem</span><span class="params">(sqlist L, ElemType cur_e, ElemType* pre_e)</span>;</span><br><span class="line">Status <span class="title function_">NextElem</span><span class="params">(sqlist L, ElemType cur_e, ElemType* next_e)</span>;</span><br><span class="line">Status <span class="title function_">ListTraverse</span><span class="params">(sqlist L, Status (*visit)(ElemType e))</span>;</span><br></pre></td></tr></table></figure>

<h4 id="初始化、销毁、清空"><a href="#初始化、销毁、清空" class="headerlink" title="初始化、销毁、清空"></a>初始化、销毁、清空</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Status <span class="title function_">InitList</span><span class="params">(sqlist* L)</span></span><br><span class="line">&#123;</span><br><span class="line">    L-&gt;elem = (ElemType*)<span class="built_in">malloc</span>(LIST_INIT_SIZE * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">    <span class="keyword">if</span> (L-&gt;elem == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">    L-&gt;length = <span class="number">0</span>;</span><br><span class="line">    L-&gt;listsize = LIST_INIT_SIZE;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">DestroyList</span><span class="params">(sqlist* L)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (L-&gt;elem)</span><br><span class="line">        <span class="built_in">free</span>(L-&gt;elem);</span><br><span class="line">    L-&gt;length = <span class="number">0</span>;</span><br><span class="line">    L-&gt;listsize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">ClearList</span><span class="params">(sqlist* L)</span></span><br><span class="line">&#123;</span><br><span class="line">    L-&gt;length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="求长度、取元素"><a href="#求长度、取元素" class="headerlink" title="求长度、取元素"></a>求长度、取元素</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">ListLength</span><span class="params">(sqlist L)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> L.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">GetElem</span><span class="params">(sqlist L, <span class="type">int</span> i, ElemType* e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length)</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line"></span><br><span class="line">    *e = L.elem[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="插入、删除"><a href="#插入、删除" class="headerlink" title="插入、删除"></a>插入、删除</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 将元素插入顺序表指定位置</span></span><br><span class="line"><span class="comment"> * @param L 顺序表</span></span><br><span class="line"><span class="comment"> * @param i 指定位置</span></span><br><span class="line"><span class="comment"> * @param e 待插入元素</span></span><br><span class="line"><span class="comment"> * @return Status </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Status <span class="title function_">ListInsert</span><span class="params">(sqlist* L, <span class="type">int</span> i, ElemType e)</span></span><br><span class="line">&#123;</span><br><span class="line">    ElemType *p, *q;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L-&gt;length + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (L-&gt;length &gt;= L-&gt;listsize) &#123;</span><br><span class="line">        ElemType* newbase;</span><br><span class="line">        newbase = (ElemType*)<span class="built_in">realloc</span>(L-&gt;elem, (L-&gt;listsize + LIST_INCREMENT) * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">        <span class="keyword">if</span> (!newbase)</span><br><span class="line">            <span class="keyword">return</span> OVERFLOW;</span><br><span class="line"></span><br><span class="line">        L-&gt;elem = newbase;</span><br><span class="line">        L-&gt;listsize += LIST_INCREMENT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    q = &amp;(L-&gt;elem[i - <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (p = &amp;(L-&gt;elem[L-&gt;length - <span class="number">1</span>]); p &gt;= q; --p)</span><br><span class="line">        *(p + <span class="number">1</span>) = *p;</span><br><span class="line"></span><br><span class="line">    *q = e;</span><br><span class="line">    L-&gt;length++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">ListDelete</span><span class="params">(sqlist* L, <span class="type">int</span> i, ElemType* e)</span></span><br><span class="line">&#123;</span><br><span class="line">    ElemType *p, *q;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L-&gt;length)</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line"></span><br><span class="line">    p = &amp;(L-&gt;elem[i - <span class="number">1</span>]);</span><br><span class="line">    *e = *p;</span><br><span class="line">    q = &amp;(L-&gt;elem[L-&gt;length - <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (++p; p &lt;= q; ++p)</span><br><span class="line">        *(p - <span class="number">1</span>) = *p;</span><br><span class="line"></span><br><span class="line">    L-&gt;length--;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 查找指定元素是否存在于顺序表中，</span></span><br><span class="line"><span class="comment"> *        若存在则返回其位置</span></span><br><span class="line"><span class="comment"> * @param L 顺序表</span></span><br><span class="line"><span class="comment"> * @param e 指定元素</span></span><br><span class="line"><span class="comment"> * @param compare 元素间判断相等的函数</span></span><br><span class="line"><span class="comment"> * @return int </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">LocateElem</span><span class="params">(sqlist L, ElemType e, Status (*compare)(ElemType e1, ElemType e2))</span></span><br><span class="line">&#123;</span><br><span class="line">    ElemType* p = L.elem;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= L.length &amp;&amp; (*compare)(*p++, e) == FALSE)</span><br><span class="line">        i++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (i &lt;= L.length) ? i : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">PriorElem</span><span class="params">(sqlist L, ElemType cur_e, ElemType* pre_e)</span></span><br><span class="line">&#123;</span><br><span class="line">    ElemType* p = L.elem;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= L.length &amp;&amp; *p != cur_e) &#123;</span><br><span class="line">        i++;</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">1</span> || i &gt; L.length)</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line"></span><br><span class="line">    *pre_e = *--p;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">NextElem</span><span class="params">(sqlist L, ElemType cur_e, ElemType* next_e)</span></span><br><span class="line">&#123;</span><br><span class="line">    ElemType* p = L.elem;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; L.length &amp;&amp; *p != cur_e) &#123;</span><br><span class="line">        i++;</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i &gt;= L.length)</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line"></span><br><span class="line">    *next_e = *++p;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line">Status <span class="title function_">ListTraverse</span><span class="params">(sqlist L, Status (*visit)(ElemType e))</span></span><br><span class="line">&#123;</span><br><span class="line">    ElemType* p = L.elem;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= L.length &amp;&amp; (*visit)(*p++) == TRUE)</span><br><span class="line">        i++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i &lt;= L.length)</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="main"><a href="#main" class="headerlink" title="main"></a>main</h4><blockquote>
<p>程序并不完整，这里只是给出在main中使用的一般流程</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    sqlist L;</span><br><span class="line">    <span class="type">int</span> n, x;</span><br><span class="line">    InitList(&amp;L);</span><br><span class="line">    </span><br><span class="line">	......</span><br><span class="line">    </span><br><span class="line">    DestroyList(&amp;L);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-单链表"><a href="#1-2-单链表" class="headerlink" title="1.2 单链表"></a>1.2 单链表</h3><h4 id="定义、声明-1"><a href="#定义、声明-1" class="headerlink" title="定义、声明"></a>定义、声明</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="type">int</span> p;</span><br><span class="line">	<span class="type">int</span> e;</span><br><span class="line">&#125; Equation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> Equation ElemType;	<span class="comment">// 指定自己的元素类型 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">	ElemType data;	<span class="comment">// 单链表数据域 </span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span>	<span class="comment">// 单链表指针域 </span></span><br><span class="line">&#125; LNode, *LinkList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Status;	<span class="comment">// 函数返回状态 </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INFEASIBLE -1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OVERFLOW -2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化（有头结点） </span></span><br><span class="line">Status <span class="title function_">InitLink</span><span class="params">(LinkList &amp;L)</span>;</span><br><span class="line"><span class="comment">// 销毁</span></span><br><span class="line">Status <span class="title function_">DestroyLink</span><span class="params">(LinkList &amp;L)</span>; </span><br><span class="line"><span class="comment">// 求表长</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ListLength</span><span class="params">(LinkList &amp;L)</span>; </span><br><span class="line"><span class="comment">// 查找第i个元素，返回元素地址 （从i=1作为第一个元素 ） </span></span><br><span class="line">LNode* <span class="title function_">GetElem</span><span class="params">(LinkList &amp;L, <span class="type">int</span> i)</span>; </span><br><span class="line"><span class="comment">// 插入（尾插法）插入成为第i个 </span></span><br><span class="line">Status <span class="title function_">ListInsert</span><span class="params">(LinkList &amp;L, <span class="type">int</span> i, ElemType data)</span>; </span><br><span class="line"><span class="comment">// 删除 （删除第i个元素） </span></span><br><span class="line">Status <span class="title function_">ListDelete</span><span class="params">(LinkList &amp;L, <span class="type">int</span> i)</span>; </span><br></pre></td></tr></table></figure>

<h4 id="初始化、销毁"><a href="#初始化、销毁" class="headerlink" title="初始化、销毁"></a>初始化、销毁</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Status <span class="title function_">InitLink</span><span class="params">(LinkList &amp;L)</span></span><br><span class="line">&#123;</span><br><span class="line">	L = (LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">	L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">DestroyLink</span><span class="params">(LinkList &amp;L)</span></span><br><span class="line">&#123;</span><br><span class="line">	LNode *p = L, *t;</span><br><span class="line">	<span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		t = p-&gt;next;</span><br><span class="line">		<span class="built_in">free</span>(p);</span><br><span class="line">		p = t;</span><br><span class="line">	 &#125; </span><br><span class="line">	 <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="求表长、查找元素"><a href="#求表长、查找元素" class="headerlink" title="求表长、查找元素"></a>求表长、查找元素</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Status <span class="title function_">ListLength</span><span class="params">(LinkList &amp;L)</span></span><br><span class="line">&#123;</span><br><span class="line">	LNode *p = L-&gt;next;</span><br><span class="line">	<span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(p)</span><br><span class="line">	&#123;</span><br><span class="line">		count++;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LNode* <span class="title function_">GetElem</span><span class="params">(LinkList &amp;L, <span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(i&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//printf(&quot;a&quot;);</span></span><br><span class="line">	<span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">	LNode *p = L;</span><br><span class="line">	<span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; j&lt;i)</span><br><span class="line">	&#123;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">		j++;</span><br><span class="line">		<span class="comment">//printf(&quot;b&quot;);</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> p;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure>

<h4 id="插入、删除-1"><a href="#插入、删除-1" class="headerlink" title="插入、删除"></a>插入、删除</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Status <span class="title function_">ListInsert</span><span class="params">(LinkList &amp;L, <span class="type">int</span> i, ElemType data)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(i&lt;<span class="number">1</span>) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">	LNode *newnode = (LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">	newnode-&gt;data = data;</span><br><span class="line">	newnode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	LNode *t = GetElem(L, i<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">if</span>(t)</span><br><span class="line">	&#123;</span><br><span class="line">		newnode-&gt;next = t-&gt;next;</span><br><span class="line">		t-&gt;next = newnode;</span><br><span class="line">		<span class="keyword">return</span> OK;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">LinkDelete</span><span class="params">(LinkList &amp;L, <span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">	LNode *t1 = GetElem(L, i<span class="number">-1</span>);</span><br><span class="line">	LNode *t2 = GetElem(L, i);</span><br><span class="line">	<span class="keyword">if</span>(t1 &amp;&amp; t2)</span><br><span class="line">	&#123;</span><br><span class="line">		t1-&gt;next = t2-&gt;next;</span><br><span class="line">		<span class="built_in">free</span>(t2);</span><br><span class="line">		<span class="keyword">return</span> OK;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ERROR;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure>

<h4 id="main-1"><a href="#main-1" class="headerlink" title="main"></a>main</h4><blockquote>
<p>程序并不完整，这里只是给出在main中使用的一般流程</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	LinkList L1, L2, L3, L4;</span><br><span class="line">	InitLink(L1), InitLink(L2), InitLink(L3), InitLink(L4);</span><br><span class="line">    </span><br><span class="line">	......</span><br><span class="line">	</span><br><span class="line">	DestroyLink(L1), DestroyLink(L2), DestroyLink(L3), DestroyLink(L4);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure>





<h2 id="二、栈和队列"><a href="#二、栈和队列" class="headerlink" title="二、栈和队列"></a>二、栈和队列</h2><h3 id="2-1-栈（顺序栈）"><a href="#2-1-栈（顺序栈）" class="headerlink" title="2.1 栈（顺序栈）"></a>2.1 栈（顺序栈）</h3><h4 id="定义、声明-2"><a href="#定义、声明-2" class="headerlink" title="定义、声明"></a>定义、声明</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> STACK_INIT_SIZE 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STACK_INCREMENT 10 </span></span><br><span class="line"><span class="comment">// 注意：这里define是不能加;的，书上错误了</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Status;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OVERFLOW -1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FALSE 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> SElemType;</span><br><span class="line"><span class="comment">// 顺序栈 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">	SElemType *top;		<span class="comment">// 栈顶指针 </span></span><br><span class="line">	SElemType *base;	<span class="comment">// 栈底指针 </span></span><br><span class="line">	<span class="type">int</span> stacksize;		<span class="comment">// 当前已分配的存储空间，以元素为单位 </span></span><br><span class="line">&#125; SqStack;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InitStack</span><span class="params">(SqStack &amp;S)</span></span>;		<span class="comment">// 初始化空栈 </span></span><br><span class="line"><span class="function">Status <span class="title">DestroyStack</span><span class="params">(SqStack &amp;S)</span></span>;	<span class="comment">// 销毁栈  </span></span><br><span class="line"><span class="function">Status <span class="title">ClearStack</span><span class="params">(SqStack &amp;S)</span></span>;		<span class="comment">// 清空栈 </span></span><br><span class="line"><span class="function">Status <span class="title">StackEmpty</span><span class="params">(SqStack S)</span></span>;		<span class="comment">// 栈是否为空 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">StackLength</span><span class="params">(SqStack S)</span></span>;			<span class="comment">// 栈长度（元素个数） </span></span><br><span class="line"><span class="function">Status <span class="title">GetTop</span><span class="params">(SqStack S, SElemType &amp;e)</span></span>;<span class="comment">// 若栈不空，用e返回S的栈顶元素，返回OK，否则返回ERROR </span></span><br><span class="line"><span class="function">Status <span class="title">Push</span><span class="params">(SqStack &amp;S, SElemType e)</span></span>;	<span class="comment">// 插入元素e为新的栈顶元素 </span></span><br><span class="line"><span class="function">Status <span class="title">Pop</span><span class="params">(SqStack &amp;S, SElemType &amp;e)</span></span>;	<span class="comment">// 若栈不空，删除栈顶元素，用e接住，返回OK，否则返回ERROR</span></span><br><span class="line"><span class="function">Status <span class="title">StackTraverse</span><span class="params">(SqStack S, Status (* visit)(SElemType *p))</span></span>;	<span class="comment">// 从栈底到栈顶依次对栈中每个元素调用函数visit() </span></span><br></pre></td></tr></table></figure>

<h4 id="初始化、销毁-1"><a href="#初始化、销毁-1" class="headerlink" title="初始化、销毁"></a>初始化、销毁</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化空栈 </span></span><br><span class="line"><span class="function">Status <span class="title">InitStack</span><span class="params">(SqStack &amp;S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	S.base = (SElemType *)<span class="built_in">malloc</span>(STACK_INIT_SIZE * <span class="built_in">sizeof</span>(SElemType));</span><br><span class="line">	<span class="keyword">if</span>(!S.base)</span><br><span class="line">		<span class="built_in">exit</span>(OVERFLOW);	<span class="comment">// 分配失败 </span></span><br><span class="line">	S.top = S.base;</span><br><span class="line">	S.stacksize = STACK_INIT_SIZE;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 销毁栈 </span></span><br><span class="line"><span class="function">Status <span class="title">DestroyStack</span><span class="params">(SqStack &amp;S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(S.base)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">free</span>(S.base);</span><br><span class="line">		S.base = S.top = <span class="literal">NULL</span>;</span><br><span class="line">		S.stacksize = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure>

<h4 id="清空、查空、长度、顶元素"><a href="#清空、查空、长度、顶元素" class="headerlink" title="清空、查空、长度、顶元素"></a>清空、查空、长度、顶元素</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 清空栈</span></span><br><span class="line"><span class="function">Status <span class="title">ClearStack</span><span class="params">(SqStack &amp;S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(S.base)</span><br><span class="line">		S.top = S.base;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 栈是否为空 </span></span><br><span class="line"><span class="function">Status <span class="title">StackEmpty</span><span class="params">(SqStack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(S.top == S.base)</span><br><span class="line">		<span class="keyword">return</span> TRUE;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 栈长度</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">StackLength</span><span class="params">(SqStack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> S.top - S.base;</span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取栈顶元素 </span></span><br><span class="line"><span class="function">Status <span class="title">GetTop</span><span class="params">(SqStack S, SElemType &amp;e)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(S.top == S.base)</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	e = *(S.top - <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="入栈、出栈"><a href="#入栈、出栈" class="headerlink" title="入栈、出栈"></a>入栈、出栈</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 入栈</span></span><br><span class="line"><span class="function">Status <span class="title">Push</span><span class="params">(SqStack &amp;S, SElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 先看是否栈满</span></span><br><span class="line">	<span class="keyword">if</span>(S.top - S.base &gt;= S.stacksize)</span><br><span class="line">	&#123;</span><br><span class="line">		S.base = (SElemType *)<span class="built_in">realloc</span>(S.base, (S.stacksize + STACK_INCREMENT) * <span class="built_in">sizeof</span>(SElemType));</span><br><span class="line">		<span class="keyword">if</span>(!S.base)</span><br><span class="line">			<span class="built_in">exit</span>(OVERFLOW);	<span class="comment">// 分配失败 </span></span><br><span class="line">		S.top = S.base + S.stacksize;</span><br><span class="line">		S.stacksize += STACK_INCREMENT;</span><br><span class="line">	 &#125; </span><br><span class="line">	*S.top = e;</span><br><span class="line">	S.top++;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 出栈 </span></span><br><span class="line"><span class="function">Status <span class="title">Pop</span><span class="params">(SqStack &amp;S, SElemType &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(S.top == S.base)</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	S.top--;</span><br><span class="line">	e = *S.top;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure>

<h4 id="更多-1"><a href="#更多-1" class="headerlink" title="更多"></a>更多</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 遍历调用visit</span></span><br><span class="line"><span class="function">Status <span class="title">StackTraverse</span><span class="params">(SqStack S, Status (* visit)(SElemType *p))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(S.base == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	SElemType *p1 = S.top;</span><br><span class="line">	SElemType *p2 = S.base;</span><br><span class="line">	<span class="keyword">while</span>(p1 &gt; p2)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">visit</span>(p2);</span><br><span class="line">		p2++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure>



<h3 id="2-2-队列（链式队列）"><a href="#2-2-队列（链式队列）" class="headerlink" title="2.2 队列（链式队列）"></a>2.2 队列（链式队列）</h3><h4 id="定义、声明-3"><a href="#定义、声明-3" class="headerlink" title="定义、声明"></a>定义、声明</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Status;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OVERFLOW -1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FALSE 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 链式队列 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> QElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">QNode</span>&#123;</span><br><span class="line">	QElemType data;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">QNode</span> *next;</span><br><span class="line">&#125;QNode, *QueuePtr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">	QueuePtr front;	<span class="comment">// 队头指针</span></span><br><span class="line">	QueuePtr rear;	<span class="comment">// 队尾指针 </span></span><br><span class="line">&#125; LinkQueue;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InitQueue</span><span class="params">(LinkQueue &amp;Q)</span></span>;		<span class="comment">// 初始化</span></span><br><span class="line"><span class="function">Status <span class="title">DestroyQueue</span><span class="params">(LinkQueue &amp;Q)</span></span>;	<span class="comment">// 销毁 </span></span><br><span class="line"><span class="function">Status <span class="title">ClearQueue</span><span class="params">(LinkQueue &amp;Q)</span></span>;	<span class="comment">// 清空</span></span><br><span class="line"><span class="function">Status <span class="title">QueueEmpty</span><span class="params">(LinkQueue Q)</span></span>;		<span class="comment">// 是否为空 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QueueLength</span><span class="params">(LinkQueue Q)</span></span>;		<span class="comment">// 队列长度 </span></span><br><span class="line"><span class="function">Status <span class="title">GetHead</span><span class="params">(LinkQueue Q, QElemType &amp;e)</span></span>;	<span class="comment">// 获取队头元素 </span></span><br><span class="line"><span class="function">Status <span class="title">EnQueue</span><span class="params">(LinkQueue &amp;Q, QElemType e)</span></span>;	<span class="comment">// e到队尾排队 </span></span><br><span class="line"><span class="function">Status <span class="title">DeQueue</span><span class="params">(LinkQueue &amp;Q, QElemType &amp;e)</span></span>;	<span class="comment">// 队头e离开</span></span><br></pre></td></tr></table></figure>

<h4 id="初始化、销毁-2"><a href="#初始化、销毁-2" class="headerlink" title="初始化、销毁"></a>初始化、销毁</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function">Status <span class="title">InitQueue</span><span class="params">(LinkQueue &amp;Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 申请头结点出来 </span></span><br><span class="line">	Q.front = Q.rear = (QueuePtr)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(QNode));</span><br><span class="line">	<span class="keyword">if</span>(!Q.front)</span><br><span class="line">		<span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">	Q.front-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 销毁</span></span><br><span class="line"><span class="function">Status <span class="title">DestroyQueue</span><span class="params">(LinkQueue &amp;Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 连带头结点，全部销毁 </span></span><br><span class="line">	<span class="keyword">while</span>(Q.front)</span><br><span class="line">	&#123;</span><br><span class="line">		Q.rear = Q.front-&gt;next;</span><br><span class="line">		<span class="built_in">free</span>(Q.front);</span><br><span class="line">		Q.front = Q.rear;</span><br><span class="line">	 &#125; </span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure>

<h4 id="清空、为空、长度、队头"><a href="#清空、为空、长度、队头" class="headerlink" title="清空、为空、长度、队头"></a>清空、为空、长度、队头</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 清空 </span></span><br><span class="line"><span class="function">Status <span class="title">ClearQueue</span><span class="params">(LinkQueue &amp;Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 头结点都没有，报错 </span></span><br><span class="line">	<span class="keyword">if</span>(!Q.front)</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	<span class="comment">// 清空会留下头结点，置头结点的next为NULL，front/rear指向头结点</span></span><br><span class="line">	QueuePtr p = Q.front-&gt;next, t;</span><br><span class="line">	<span class="keyword">while</span>(p)</span><br><span class="line">	&#123;</span><br><span class="line">		t = p-&gt;next;</span><br><span class="line">		<span class="built_in">free</span>(p);</span><br><span class="line">		p = t;</span><br><span class="line">	 &#125; </span><br><span class="line">	Q.rear = Q.front;</span><br><span class="line">	Q.front-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否为空 </span></span><br><span class="line"><span class="function">Status <span class="title">QueueEmpty</span><span class="params">(LinkQueue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(Q.front == Q.rear)</span><br><span class="line">		<span class="keyword">return</span> TRUE;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 队列长度 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QueueLength</span><span class="params">(LinkQueue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">	QueuePtr p = Q.front-&gt;next;</span><br><span class="line">	<span class="keyword">while</span>(p)</span><br><span class="line">	&#123;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">		len++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> len;</span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 获取队头元素</span></span><br><span class="line"><span class="function">Status <span class="title">GetHead</span><span class="params">(LinkQueue Q, QElemType &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!Q.front)</span><br><span class="line">		<span class="keyword">return</span> ERROR;	<span class="comment">// 没有头结点（未初始化） </span></span><br><span class="line">	<span class="keyword">if</span>(Q.front == Q.rear)</span><br><span class="line">		<span class="keyword">return</span> ERROR;	<span class="comment">// 没有元素 </span></span><br><span class="line">	e = Q.front-&gt;next-&gt;data;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure>

<h4 id="队尾排队、队头出队"><a href="#队尾排队、队头出队" class="headerlink" title="队尾排队、队头出队"></a>队尾排队、队头出队</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// e到队尾排队 </span></span><br><span class="line"><span class="function">Status <span class="title">EnQueue</span><span class="params">(LinkQueue &amp;Q, QElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 申请空间 </span></span><br><span class="line">	QueuePtr p = (QueuePtr)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(QNode));</span><br><span class="line">	<span class="keyword">if</span>(!p)</span><br><span class="line">		<span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">	<span class="comment">// 队尾排队 </span></span><br><span class="line">	p-&gt;data = e;</span><br><span class="line">	p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	Q.rear-&gt;next = p;</span><br><span class="line">	Q.rear = p;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 队头e离开</span></span><br><span class="line"><span class="function">Status <span class="title">DeQueue</span><span class="params">(LinkQueue &amp;Q, QElemType &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!Q.front)</span><br><span class="line">		<span class="keyword">return</span> ERROR;	<span class="comment">// 没有头结点（未初始化）</span></span><br><span class="line">	<span class="keyword">if</span>(Q.front == Q.rear)</span><br><span class="line">		<span class="keyword">return</span> ERROR;	<span class="comment">// 没有元素</span></span><br><span class="line">	<span class="comment">// 队头离开 </span></span><br><span class="line">	QueuePtr p = Q.front-&gt;next;</span><br><span class="line">	e = p-&gt;data;</span><br><span class="line">	Q.front = p-&gt;next;</span><br><span class="line">	<span class="comment">// 队头元素同时是队尾元素，那么需要更新队尾指针 </span></span><br><span class="line">	<span class="keyword">if</span>(Q.rear == p)</span><br><span class="line">		Q.rear = Q.front;</span><br><span class="line">	<span class="built_in">free</span>(p);	<span class="comment">// 释放空间 </span></span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure>



<h2 id="三、树"><a href="#三、树" class="headerlink" title="三、树"></a>三、树</h2><h3 id="3-1-二叉树"><a href="#3-1-二叉树" class="headerlink" title="3.1 二叉树"></a>3.1 二叉树</h3><h4 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h4><ol>
<li><p>非空二叉树上的叶子结点数等于度为 2 的结点数加 1 。</p>
<p><strong><code>n0 = n2 +1</code></strong></p>
</li>
<li><p>非空二叉树上<strong>第 k 层</strong>上至多有 <strong>2^k-1^</strong> 个结点（k&gt;&#x3D;1)</p>
</li>
<li><p><strong>高度为 h</strong> 的二叉树至多有 <strong>2^h^ - 1</strong> 个结点（k&gt;&#x3D;1）</p>
</li>
<li><p>对<strong>完全二叉树</strong>按从上到下、从左到右的顺序依次编号 1,2,…,n，则有以下关系：</p>
<ol>
<li><p>当 i&gt;1 时，结点 i 的双亲编号为 <strong><code>floor(i/2)</code></strong></p>
<p>i 为偶数，双亲编号为 i&#x2F;2，它为双亲的左孩子；</p>
<p>i 为奇数，双亲编号为 (i-1)&#x2F;2，它为双亲的右孩子。</p>
</li>
<li><p>当 2i &lt;&#x3D; n 时，结点 i 的<strong>左孩子</strong>编号为 <strong>2i</strong>，否则无左孩子；</p>
<p>当 2i+1 &lt;&#x3D; n 时，结点 i 的<strong>右孩子</strong>编号为 <strong>2i+1</strong>，否则无右孩子。</p>
</li>
<li><p>结点 i 所在层次（深度）为 <strong>floor( log<del>2</del> i ) + 1</strong> 。</p>
</li>
</ol>
</li>
<li><p>具有 <strong>n 个结点</strong>（n&gt;0）的<strong>完全二叉树</strong>的高度为 <strong>ceiling( log<del>2</del> (n+1) )</strong> 或 <strong>floor( log<del>2</del> n ) + 1</strong> 。</p>
</li>
</ol>
<blockquote>
<ul>
<li>存储结构若采用顺序存储时，建议下标1开始，否则不满足条件4。</li>
<li>由于顺序存储空间利用率低，因此二叉树一般采用链式存储结构。</li>
</ul>
</blockquote>
<h4 id="定义、声明-4"><a href="#定义、声明-4" class="headerlink" title="定义、声明"></a>定义、声明</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//头文件需要添加</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义状态码 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Status;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OVERFLOW -1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FALSE 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义元素数据类型 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二叉链表 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BiTNode</span>&#123;</span><br><span class="line">	ElemType data;	<span class="comment">// 数据域 </span></span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">BiTNode</span> *lchild, *rchild;	<span class="comment">// 左右孩子指针 </span></span><br><span class="line">&#125; BiTNode, *BiTree;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>含n个结点的二叉链表中，含有n+1个空链域，后续可作线索链表 </p>
</blockquote>
<h4 id="构造、销毁、树空、访问"><a href="#构造、销毁、树空、访问" class="headerlink" title="构造、销毁、树空、访问"></a>构造、销毁、树空、访问</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造空树</span></span><br><span class="line"><span class="function">Status <span class="title">InitTree</span><span class="params">(BiTree &amp;T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	T = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 销毁树</span></span><br><span class="line"><span class="function">Status <span class="title">DestroyTree</span><span class="params">(BiTree &amp;T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(T)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">DestroyTree</span>(T-&gt;lchild);</span><br><span class="line">		<span class="built_in">DestroyTree</span>(T-&gt;rchild);</span><br><span class="line">		<span class="built_in">free</span>(T);		</span><br><span class="line">	&#125;</span><br><span class="line">	T = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造树（具体重写）</span></span><br><span class="line"><span class="function">Status <span class="title">CreateBiTree</span><span class="params">(BiTree &amp;T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 先序输入构造</span></span><br><span class="line">	<span class="type">char</span> ch;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;ch);</span><br><span class="line">	<span class="keyword">if</span>(ch == <span class="string">&#x27;#&#x27;</span>)	<span class="comment">// #表示此处为空 </span></span><br><span class="line">		T = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(!(T = (BiTNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(BiTNode))))</span><br><span class="line">			<span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">		T-&gt;data = ch;				<span class="comment">// 根结点 </span></span><br><span class="line">		<span class="built_in">CreateBiTree</span>(T-&gt;lchild);	<span class="comment">// 构造左子树 </span></span><br><span class="line">		<span class="built_in">CreateBiTree</span>(T-&gt;rchild); 	<span class="comment">// 构造右子树 </span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空树（与销毁等效）</span></span><br><span class="line"><span class="function">Status <span class="title">ClearTree</span><span class="params">(BiTree &amp;T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(T)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">ClearTree</span>(T-&gt;lchild);</span><br><span class="line">		<span class="built_in">ClearTree</span>(T-&gt;rchild);</span><br><span class="line">		<span class="built_in">free</span>(T);</span><br><span class="line">	&#125;</span><br><span class="line">	T = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 树空</span></span><br><span class="line"><span class="function">Status <span class="title">TreeEmpty</span><span class="params">(BiTree &amp;T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(T)</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问一个结点 </span></span><br><span class="line"><span class="function">Status <span class="title">visit</span><span class="params">(BiTNode* T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, T-&gt;data);</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="递归：先、中、后序遍历"><a href="#递归：先、中、后序遍历" class="headerlink" title="递归：先、中、后序遍历"></a>递归：先、中、后序遍历</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先序遍历（递归）</span></span><br><span class="line"><span class="function">Status <span class="title">PreOrder</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(T)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">visit</span>(T);</span><br><span class="line">		<span class="built_in">PreOrder</span>(T-&gt;lchild);</span><br><span class="line">		<span class="built_in">PreOrder</span>(T-&gt;rchild);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 中序遍历（递归）</span></span><br><span class="line"><span class="function">Status <span class="title">InOrder</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(T)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">InOrder</span>(T-&gt;lchild);</span><br><span class="line">		<span class="built_in">visit</span>(T);</span><br><span class="line">		<span class="built_in">InOrder</span>(T-&gt;rchild);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 后序遍历（递归）</span></span><br><span class="line"><span class="function">Status <span class="title">PostOrder</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(T)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">PostOrder</span>(T-&gt;lchild);</span><br><span class="line">		<span class="built_in">PostOrder</span>(T-&gt;rchild);</span><br><span class="line">		<span class="built_in">visit</span>(T);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure>



<h4 id="非递归：先、中、后序遍历"><a href="#非递归：先、中、后序遍历" class="headerlink" title="非递归：先、中、后序遍历"></a>非递归：先、中、后序遍历</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先序遍历（非递归）</span></span><br><span class="line"><span class="function">Status <span class="title">PreOrder2</span><span class="params">(BiTree &amp;T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	stack&lt;BiTree&gt; S;</span><br><span class="line">	BiTree p = T;</span><br><span class="line">	<span class="keyword">while</span>(p || !S.<span class="built_in">empty</span>())	<span class="comment">// p不空或栈不空 </span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(p)	<span class="comment">// 一路向左 </span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">visit</span>(p);		<span class="comment">// 先序 </span></span><br><span class="line">			S.<span class="built_in">push</span>(p);		</span><br><span class="line">			p = p-&gt;lchild;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>	<span class="comment">// 出栈，转向右子树 </span></span><br><span class="line">		&#123;</span><br><span class="line">			p = S.<span class="built_in">top</span>();</span><br><span class="line">			S.<span class="built_in">pop</span>();</span><br><span class="line">			p = p-&gt;rchild;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序遍历（非递归）</span></span><br><span class="line"><span class="function">Status <span class="title">InOrder2</span><span class="params">(BiTree &amp;T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	stack&lt;BiTree&gt; S;</span><br><span class="line">	BiTree p = T;</span><br><span class="line">	<span class="keyword">while</span>(p || !S.<span class="built_in">empty</span>())	<span class="comment">// p不空或栈不空 </span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(p)	<span class="comment">// 一路向左 </span></span><br><span class="line">		&#123;</span><br><span class="line">			S.<span class="built_in">push</span>(p);</span><br><span class="line">			p = p-&gt;lchild;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>	<span class="comment">// 出栈，转向右子树 </span></span><br><span class="line">		&#123;</span><br><span class="line">			p = S.<span class="built_in">top</span>();</span><br><span class="line">			S.<span class="built_in">pop</span>();</span><br><span class="line">			<span class="built_in">visit</span>(p);		<span class="comment">// 中序</span></span><br><span class="line">			p = p-&gt;rchild;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 后序遍历（非递归）</span></span><br><span class="line"><span class="function">Status <span class="title">PostOrder2</span><span class="params">(BiTree &amp;T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	stack&lt;BiTree&gt; S;</span><br><span class="line">	BiTree p = T;</span><br><span class="line">	BiTree r = <span class="literal">NULL</span>;	<span class="comment">// 辅助指针r 用于指向最近访问过的结点（为分清返回时是从左子树返回的还是从右子树返回的） </span></span><br><span class="line">	<span class="keyword">while</span>(p || !S.<span class="built_in">empty</span>())	<span class="comment">// p不空或栈不空 </span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(p)	<span class="comment">// 一路向左 </span></span><br><span class="line">		&#123;</span><br><span class="line">			S.<span class="built_in">push</span>(p);</span><br><span class="line">			p = p-&gt;lchild;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>	<span class="comment">// 出栈，向右转 </span></span><br><span class="line">		&#123;</span><br><span class="line">			p = S.<span class="built_in">top</span>();	<span class="comment">// 读栈顶，但不出栈 </span></span><br><span class="line">			<span class="keyword">if</span>(p-&gt;rchild &amp;&amp; p-&gt;rchild != r)</span><br><span class="line">				p = p-&gt;rchild;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				p = S.<span class="built_in">top</span>();</span><br><span class="line">				S.<span class="built_in">pop</span>();</span><br><span class="line">				<span class="built_in">visit</span>(p);</span><br><span class="line">				r = p;	<span class="comment">// 记录最近访问过的结点 </span></span><br><span class="line">				p = <span class="literal">NULL</span>;	<span class="comment">// 访问完后，重置p指针 </span></span><br><span class="line">			&#125; </span><br><span class="line">		 &#125; </span><br><span class="line">	 &#125; </span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure>



<h4 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 层次遍历</span></span><br><span class="line"><span class="function">Status <span class="title">LevelOrder</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 默认树至少有一个根结点</span></span><br><span class="line">	queue&lt;BiTree&gt; Q;</span><br><span class="line">	BiTNode *p = T;</span><br><span class="line">	Q.<span class="built_in">push</span>(p);</span><br><span class="line">	<span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		p = Q.<span class="built_in">front</span>();</span><br><span class="line">		Q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="built_in">visit</span>(p);</span><br><span class="line">		<span class="keyword">if</span>(p-&gt;lchild)</span><br><span class="line">			Q.<span class="built_in">push</span>(p-&gt;lchild);</span><br><span class="line">		<span class="keyword">if</span>(p-&gt;rchild)</span><br><span class="line">			Q.<span class="built_in">push</span>(p-&gt;rchild);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure>



<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例：abc##d##ef### </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 构造空树</span></span><br><span class="line">	BiTree T = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="built_in">CreateBiTree</span>(T);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 层次遍历</span></span><br><span class="line">	<span class="built_in">LevelOrder</span>(T);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 销毁</span></span><br><span class="line">	<span class="built_in">DestroyTree</span>(T); </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/DataStructure/image-20231112000855430.png" alt="image-20231112000855430" style="zoom:50%;" /> 



<h3 id="3-2-线索二叉树"><a href="#3-2-线索二叉树" class="headerlink" title="3.2 线索二叉树"></a>3.2 线索二叉树</h3><ul>
<li>很少用</li>
</ul>
<h2 id="四、图"><a href="#四、图" class="headerlink" title="四、图"></a>四、图</h2><h3 id="4-0-知识框架"><a href="#4-0-知识框架" class="headerlink" title="4.0 知识框架"></a>4.0 知识框架</h3><ul>
<li>图的定义</li>
<li>图结构的存储<ul>
<li>邻接矩阵法、邻接表法</li>
<li>邻接多重表、十字表</li>
</ul>
</li>
<li>图的遍历<ul>
<li>DFS 深度优先遍历</li>
<li>BFS 广度优先遍历</li>
</ul>
</li>
<li>图的相关应用<ul>
<li>最小生成树：Prim 算法、Kruskal 算法</li>
<li>最短路径：Dijkstra 算法、Floyd 算法</li>
<li>拓扑排序：AOV 网</li>
<li>关键路径：AOE 网</li>
</ul>
</li>
</ul>
<h3 id="4-1-图的基本概念"><a href="#4-1-图的基本概念" class="headerlink" title="4.1 图的基本概念"></a>4.1 图的基本概念</h3><ul>
<li><p>图</p>
<p>图 G 由顶点集 V 和边集 E 组成，记为 <code>G = (V, E)</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">G = (V, E)</span><br><span class="line">V = &#123;1, 2, 3&#125;</span><br><span class="line">E = &#123;&lt;1,2&gt;, &lt;2,1&gt;, &lt;2,3&gt;&#125;</span><br></pre></td></tr></table></figure>

<p>注：线性表可以是空表，树可以是空树，但<strong>图不可以是空图</strong>。</p>
<p>就是说，图中不能一个顶点也没有，图的<strong>顶点集 V 一定非空</strong>，但边集 E 可以为空，此时图中只有顶点而没有边。</p>
</li>
<li><p>基本概念与术语</p>
<ul>
<li><p>方向性</p>
<ul>
<li><p>有向图</p>
<p>边是顶点的有序对。（弧）</p>
</li>
<li><p>无向图</p>
<p>边是顶点的无序对。（边）</p>
</li>
</ul>
</li>
<li><p>复杂度</p>
<ul>
<li>简单图<ol>
<li>不存在重复边</li>
<li>不存在顶点到自身的边</li>
</ol>
</li>
<li>多重图</li>
</ul>
<p>注：学习中，只讨论简单图。</p>
</li>
<li><p>完全图（简单完全图）</p>
<ul>
<li>无向图：任意两个顶点之间都存在边。</li>
<li>有向图：任意两个顶点之间都存在方向相反的弧。</li>
</ul>
</li>
<li><p>子图与生成子图</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">G = (V, E)</span><br><span class="line">G&#x27; = (V&#x27;, E&#x27;)</span><br><span class="line"></span><br><span class="line">子图：</span><br><span class="line">V‘ 是 V 的子集，E&#x27; 是 E 的子集，则 G’ 是 G 的子图。</span><br><span class="line">生成子图：</span><br><span class="line">且满足 V(G&#x27;) = V(G)。（即，在子图的那些顶点的边是完全的，并不缺边）</span><br></pre></td></tr></table></figure>

<p>注：并非 V 和 E 的任何子集都能构成 G 的子图。因为可能这样的子集可能不是图。</p>
</li>
<li><p>连通</p>
<p>在无向图中讨论连通性，</p>
<p>在有向图中讨论强连通性。</p>
<ol>
<li><p>无向图</p>
<ul>
<li><p>连通</p>
<p>在<strong>无向图</strong>中，若从顶点 v 到顶点 w 有路径存在，则称 v 和 w 是<strong>连通</strong>的。</p>
</li>
<li><p>连通图</p>
<p>若图 G 中任意两个顶点都是连通的</p>
</li>
<li><p>连通分量（极大连通子图）</p>
<p>无向图中的<strong>极大连通子图</strong>，称为<strong>连通分量</strong>。</p>
</li>
</ul>
</li>
<li><p>有向图</p>
<ul>
<li><p>强连通</p>
<p>在<strong>有向图</strong>中，一对顶点v, w之间有相反的路径，则这两个顶点是强连通的。</p>
</li>
<li><p>强连通图</p>
<p>任何一对顶点都是强连通的</p>
</li>
<li><p>强连通分量（极大强连通子图）</p>
<p>有向图中的<strong>极大强连通子图</strong>，称为<strong>强连通分量</strong>。</p>
</li>
</ul>
</li>
</ol>
</li>
<li><p>生成树（连通图才有）</p>
<p>连通图的生成树，是包含图中全部顶点的一个极小连通子图。</p>
<blockquote>
<ul>
<li><p>极大连通子图</p>
<p>要求包含所有边</p>
</li>
<li><p>极小连通子图</p>
<p>既要图连通，又要边数最少。</p>
</li>
</ul>
</blockquote>
</li>
<li><p>生成森林（非连通图可以）</p>
<p>非连通图中，连通分量的生成树构成了非连通图的生成森林。</p>
</li>
</ul>
</li>
</ul>
<h3 id="4-2-图的存储及基本操作"><a href="#4-2-图的存储及基本操作" class="headerlink" title="4.2 图的存储及基本操作"></a>4.2 图的存储及基本操作</h3><h4 id="4-2-1-邻接矩阵法（稠密图）"><a href="#4-2-1-邻接矩阵法（稠密图）" class="headerlink" title="4.2.1 邻接矩阵法（稠密图）"></a>4.2.1 邻接矩阵法（稠密图）</h4><ul>
<li><p>介绍</p>
<p>用一个一维数组存储图中顶点的信息，</p>
<p>用一个二维数组存储图中边的信息（各顶点的邻接关系，该二维矩阵是邻接矩阵）。</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/DataStructure/image-20231203000752334.png" alt="image-20231203000752334" style="zoom: 67%;" /> 
</li>
<li><p>适合：稠密图</p>
</li>
<li><p>代码</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_VERTEX_NUM 100		<span class="comment">// 最多顶点数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> VertexType;		<span class="comment">// 顶点的数据类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> EdgeType;			<span class="comment">// 带权图中边上权值的数据类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    VertexType Vex[MAX_VERTEX_NUM];	<span class="comment">// 顶点表</span></span><br><span class="line">    EdgeType Edge[MAX_VERTEX_NUM][MAX_VERTEX_NUM];	<span class="comment">// 边表，邻接矩阵</span></span><br><span class="line">    <span class="type">int</span> vexnum, arcnum;	<span class="comment">// 图的当前顶点数和弧数</span></span><br><span class="line">&#125; MGraph;</span><br></pre></td></tr></table></figure>



<h4 id="4-2-2-邻接表法（稀疏图）"><a href="#4-2-2-邻接表法（稀疏图）" class="headerlink" title="4.2.2 邻接表法（稀疏图）"></a>4.2.2 邻接表法（稀疏图）</h4><ul>
<li><p>介绍</p>
<p>对图 G 中的每一个顶点 vi 建立一个单链表。</p>
<ul>
<li><p>边表（邻接表）：</p>
<p>第 i 个单链表中的结点表示依附于顶点 vi 的边（有向图则是以顶点 vi 为尾的弧），这个单链表就称为顶点 vi 的边表（有向图则是出边表）。</p>
<p>由邻接点域（adjvex）和指向下一条邻接边的指针域（nextarc）构成。</p>
</li>
<li><p>顶点表：</p>
<p>边表的头指针和顶点的数据信息采用顺序存储（称为顶点表）。</p>
<p>由顶点域（data）和指向第一条邻接边的指针（firstarc）构成。</p>
</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/DataStructure/image-20231203000917358.png" alt="image-20231203000917358" style="zoom:67%;" /> 

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/DataStructure/image-20231203000951637.png" alt="image-20231203000951637" style="zoom:67%;" /> 
</li>
<li><p>适合：稀疏图</p>
</li>
<li><p>代码</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_VERTEX_NUM 100		<span class="comment">// 最多顶点数</span></span></span><br><span class="line"><span class="comment">// 边表结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">ArcNode</span>&#123;</span><br><span class="line">    <span class="type">int</span> adjvex;	<span class="comment">// 该弧所指向的顶点的位置</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">ArcNode</span> *next;	<span class="comment">// 指向下一条弧的指针</span></span><br><span class="line">    <span class="comment">// InfoType info;	// 网的边权值</span></span><br><span class="line">&#125;ArcNode;</span><br><span class="line"><span class="comment">// 顶点表结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">VNode</span>&#123;</span><br><span class="line">    VertexType data;	<span class="comment">// 顶点信息</span></span><br><span class="line">    ArcNode *first;		<span class="comment">// 指向第一个依附于该顶点的弧的指针</span></span><br><span class="line">&#125;VNode, AdjList[MAX_VERTEX_NUM];</span><br><span class="line"><span class="comment">// 邻接表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    AdjList vertices;	<span class="comment">// 邻接表</span></span><br><span class="line">    <span class="type">int</span> vexnum, arcnum;	<span class="comment">// 顶点数、弧数</span></span><br><span class="line">&#125;ALGraph;	<span class="comment">// 以邻接表存储的图类型</span></span><br></pre></td></tr></table></figure>



<h4 id="4-2-3-十字链表（有向图）"><a href="#4-2-3-十字链表（有向图）" class="headerlink" title="4.2.3 十字链表（有向图）"></a>4.2.3 十字链表（有向图）</h4><ul>
<li><p>介绍</p>
<p>十字链表是<strong>有向图</strong>的一种<strong>链式</strong>存储结构。</p>
<p>在十字链表中，对应于有向图中的每条弧有一个结点，对应于每个顶点也有一个结点。</p>
<ul>
<li><p>弧结点：</p>
<p>tailvex 和 headvex 分别指向弧尾和弧头两个顶点的编号；</p>
<p>hlink 指向弧头相同的下一个弧结点；</p>
<p>tlink 指向弧尾相同的下一个弧结点；</p>
<p>info 存放该弧的相关信息。</p>
<p>注：这样做，弧头相同的弧就在同一个链表上，弧尾相同的弧也在同一个链表上。</p>
</li>
<li><p>顶点结点：</p>
<p>data 域存放该顶点的数据信息；</p>
<p>firstin 指向以该顶点为弧头的第一个弧结点；</p>
<p>firstout 指向以该顶点为弧尾的第一个弧结点。</p>
<p>注：顶点之间是顺序存储的。</p>
</li>
</ul>
</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/DataStructure/image-20231203001125465.png" alt="image-20231203001125465" style="zoom:67%;" /> 



<h4 id="4-2-4-邻接多重链表（无向图）"><a href="#4-2-4-邻接多重链表（无向图）" class="headerlink" title="4.2.4 邻接多重链表（无向图）"></a>4.2.4 邻接多重链表（无向图）</h4><ul>
<li><p>介绍</p>
<p>邻接多重链表是<strong>无向图</strong>的另一种<strong>链式</strong>存储结构。</p>
<ul>
<li><p>边结点：</p>
<p>ivex 和 jvex 指示该边依附的两个顶点的编号；</p>
<p>ilink 指向下一个依附于顶点 ivex 的边；</p>
<p>jlink 指向下一个依附于顶点 jvex 的边；</p>
<p>info 存放该边的相关信息。</p>
</li>
<li><p>顶点结点：</p>
<p>data 存放该顶点的相关信息；</p>
<p>firstedge 指向第一条依附于该顶点的边。</p>
</li>
</ul>
</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/DataStructure/image-20231203001159702.png" alt="image-20231203001159702" style="zoom:67%;" /> 

<p>注：在邻接多重链表中，所有依附于同一顶点的边串联在同一链表中，由于每条边依附于两个顶点，因此每个边结点同时链接在两个链表中。</p>
<p>对于无向图，其邻接多重链表和邻接表的差别仅在于，同一条边在邻接表中用两个结点表示，而在邻接多重链表中只有一个结点。</p>
<h3 id="4-3-图的遍历"><a href="#4-3-图的遍历" class="headerlink" title="4.3 图的遍历"></a>4.3 图的遍历</h3><h4 id="4-3-1-广度优先搜索（BFS）"><a href="#4-3-1-广度优先搜索（BFS）" class="headerlink" title="4.3.1 广度优先搜索（BFS）"></a>4.3.1 广度优先搜索（BFS）</h4><ul>
<li><p>介绍</p>
<p>广度优先搜索（Breadth-First-Search, BFS）</p>
<ul>
<li><p>基本思想：分层查找，逐层访问</p>
</li>
<li><p>辅助：队列，记录正在访问的顶点的下一层顶点</p>
</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/DataStructure/image-20231203001359676.png" alt="image-20231203001359676" style="zoom:67%;" /> 

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/DataStructure/image-20231203001425955.png" alt="image-20231203001425955" style="zoom:67%;" /> 
</li>
<li><p>代码</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> visited[MAX_VERTEX_NUM];	<span class="comment">// 访问标记数组</span></span><br><span class="line"><span class="comment">// 对图 G 进行广度优先遍历</span></span><br><span class="line"><span class="function">Status <span class="title">BFSTraverse</span><span class="params">(Graph G)</span>	</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;G.vexnum; i++)</span><br><span class="line">        visited[i] = FALSE;		<span class="comment">// 访问标记数组初始化</span></span><br><span class="line">    <span class="built_in">InitQueue</span>(Q);	<span class="comment">// 初始化辅助队列 Q</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;G.vexnum; i++)</span><br><span class="line">        <span class="keyword">if</span>(!visited[i])	<span class="comment">// 对每个连通分量调用一次 BFS</span></span><br><span class="line">            <span class="built_in">BFS</span>(G, i);	<span class="comment">// vi 未访问过，则从 vi 开始 BFS</span></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 从顶点 v 出发，广度优先遍历图 G</span></span><br><span class="line"><span class="function">Status <span class="title">BFS</span><span class="params">(Graph G, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">visit</span>(v);			<span class="comment">// 访问初始顶点 v</span></span><br><span class="line">    visited[v] = TRUE;	<span class="comment">// 标记已访问</span></span><br><span class="line">    <span class="built_in">Enqueue</span>(Q, v);		<span class="comment">// 顶点 v 入队</span></span><br><span class="line">    <span class="comment">// 依次取队头访问</span></span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isEmpty</span>(Q))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">DeQueue</span>(Q, vh);	<span class="comment">// 队头 vh 出队</span></span><br><span class="line">        <span class="comment">// 检测 vh 所有的邻接点</span></span><br><span class="line">        <span class="keyword">for</span>(w=<span class="built_in">FirstNeighbor</span>(G, vh); w&gt;=<span class="number">0</span>; w=<span class="built_in">NextNeighbor</span>(G, vh, w))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!visited[w])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">visit</span>(w);</span><br><span class="line">                visited[w] = TRUE;</span><br><span class="line">                <span class="built_in">EnQueue</span>(Q, w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>时间复杂度</p>
<p>下面 n 为顶点数 |V| ，m 为边数 |E| 。</p>
<ul>
<li>邻接矩阵：O(n^2^)</li>
<li>邻接表：O(n+m)</li>
</ul>
</li>
<li><p>应用</p>
<ul>
<li>求解单源最短路径问题</li>
<li>广度优先生成树</li>
</ul>
</li>
</ul>
<h4 id="4-3-2-深度优先搜索-DFS"><a href="#4-3-2-深度优先搜索-DFS" class="headerlink" title="4.3.2 深度优先搜索 DFS"></a>4.3.2 深度优先搜索 DFS</h4><ul>
<li><p>介绍</p>
<p>深度优先搜索（Depth-First-Search, DFS）</p>
<ul>
<li>基本思想：向下深挖，到底回退一步</li>
<li>辅助：不需要（但本质上使用了栈，函数本身被压栈）</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/DataStructure/image-20231203001247942.png" alt="image-20231203001247942" style="zoom:67%;" /> 

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/DataStructure/image-20231203001322157.png" alt="image-20231203001322157" style="zoom:67%;" /> 
</li>
<li><p>代码</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> visited[MAX_VERTEX_NUM];	<span class="comment">// 访问标记数组</span></span><br><span class="line"><span class="comment">// 对图 G 进行深度优先遍历</span></span><br><span class="line"><span class="function">Status <span class="title">DFSTraverse</span><span class="params">(Graph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> v=<span class="number">0</span>; v&lt;G.vexnum; v++)</span><br><span class="line">        visited[v] = FALSE;	<span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> v=<span class="number">0</span>; v&lt;G.vexnum; v++)</span><br><span class="line">        <span class="keyword">if</span>(!visited[v])</span><br><span class="line">            <span class="built_in">DFS</span>(G, v);</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 从顶点 v 出发，深度优先遍历图 G</span></span><br><span class="line"><span class="function">Status <span class="title">DFS</span><span class="params">(Graph G, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">visit</span>(v);</span><br><span class="line">    visited[v] = TRUE;</span><br><span class="line">    <span class="keyword">for</span>(w=<span class="built_in">FirstNeighbor</span>(G, V); w&gt;=<span class="number">0</span>; w=<span class="built_in">NextNeighbor</span>(G, v, w))</span><br><span class="line">        <span class="keyword">if</span>(!visited[w])</span><br><span class="line">            <span class="built_in">DFS</span>(G, w);</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>时间复杂度</p>
<p>下面 n 为顶点数 |V| ，m 为边数 |E| 。</p>
<ul>
<li>邻接矩阵：O(n^2^)</li>
<li>邻接表：O(n+m)</li>
</ul>
</li>
<li><p>应用</p>
<ul>
<li>深度优先生成树、生成森林</li>
</ul>
</li>
</ul>
<h4 id="4-3-3-遍历与连通性"><a href="#4-3-3-遍历与连通性" class="headerlink" title="4.3.3 遍历与连通性"></a>4.3.3 遍历与连通性</h4><ul>
<li><p>图的遍历算法可以判断图的连通性。</p>
<ul>
<li><p>无向图</p>
<p>若是连通的，则从任意一个结点出发，仅需一次遍历就能访问图中的所有顶点；</p>
<p>若非连通，则从某个顶点出发，一次遍历只能访问到该顶点所在连通分量的所有顶点。</p>
</li>
<li><p>有向图</p>
<p>若从初始点到图中的每个顶点都有路径，则能够访问到图中的所有顶点；</p>
<p>否则，不能访问到所有顶点。</p>
</li>
</ul>
<p>注：故在 BFSTraverse 或 DFSTraverse 中添加了for 循环，再选取初始点，继续进行遍历，以防一次无法遍历图中的所有顶点。</p>
<ul>
<li><p>无向图</p>
<p>在 BFSTraverse &#x2F; DFSTraverse 中调用 BFS &#x2F; DFS 的次数，就是该图的连通分量数。</p>
</li>
<li><p>有向图</p>
<p>不能判断。</p>
<p>因为一个连通的有向图分为强连通的、非强连通的，它的连通子图也分强连通分量、非强连通分量。</p>
<p>其中，非强连通分量一次调用 BFS &#x2F; DFS 也无法访问到该连通分量的所有顶点。</p>
</li>
</ul>
</li>
</ul>
<h3 id="4-4-图的应用"><a href="#4-4-图的应用" class="headerlink" title="4.4 图的应用"></a>4.4 图的应用</h3><h4 id="4-4-1-最小生成树"><a href="#4-4-1-最小生成树" class="headerlink" title="4.4.1 最小生成树"></a>4.4.1 最小生成树</h4><ul>
<li><p>介绍</p>
<ul>
<li><p>前提：连通图</p>
</li>
<li><p>生成树</p>
<p>一个连通图的生成树包含图的所有顶点，并且只含尽可能少的边。</p>
<ul>
<li>砍去一条边，则变成非连通图；增加一条边，则会形成图中的一条回路。</li>
</ul>
</li>
<li><p>最小生成树</p>
<p>对于一个带权连通无向图，生成树不同，每棵树的权（即树中所有边上的权值之和）也可能不同。</p>
<p>设 R 为图 G 的所有生成树的集合，若 T 为 R 中边的权值之和最小的那棵生成树，则称 T 为图 G 的最小生成树（Minimum-Spanning-Tree, MST）</p>
</li>
<li><p>最小生成树的性质</p>
<ul>
<li><p>最小生成树不唯一，可能多个。</p>
<p>若图 G 中的各边权值互不相等时，G 的最小生成树唯一。</p>
<p>若无向连通图 G 的边数比顶点数少1（即 G 本身是一棵树），则 G 的最小生成树是它本身。</p>
</li>
<li><p>最小生成树的边的权值之和总是唯一的。</p>
</li>
<li><p>最小生成树的边数为顶点数减1。</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>性质</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">假设 G = (V, E) 是一个带权连通无向图，U 是顶点集 V 的一个非空子集。</span><br><span class="line">若 (u, v) 是一条具有最小权值的边，其中 u ∈ U，v ∈ V-U，则必存在一棵包含边 (u, v) 的最小生成树。</span><br></pre></td></tr></table></figure>

<p>基于该性质的最小生成树算法主要有 Prim 算法和 Kruskal 算法（都基于贪心算法的策略）。</p>
<p>通用算法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">GENERIC_MST</span>(G)</span><br><span class="line">&#123;</span><br><span class="line">    T = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(T 未形成一棵生成树)</span><br><span class="line">    &#123;</span><br><span class="line">        找到一条最小代价边 (u,v) 并且加入 T 后不会产生回路;</span><br><span class="line">        T = T + (u,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="Prim-算法"><a href="#Prim-算法" class="headerlink" title="Prim 算法"></a>Prim 算法</h5><p>从顶点开始扩展最小生成树</p>
<p>核心：选顶点</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/DataStructure/image-20231203000627015.png" alt="image-20231203000627015" style="zoom:67%;" /> 

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Status <span class="title">Prim</span><span class="params">(G, T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    V = <span class="built_in">GraphAllVertex</span>(G);</span><br><span class="line">    T = 空集;		<span class="comment">// 初始化空树</span></span><br><span class="line">    U = &#123; w &#125;;	<span class="comment">// 添加任意一个顶点 w</span></span><br><span class="line">    <span class="keyword">while</span>((V-U)!=空集)	<span class="comment">// 若不含所有顶点</span></span><br><span class="line">    &#123;</span><br><span class="line">        设(u,v)是使 u ∈ U 与 v ∈ (V-U)，且权值最小的边;</span><br><span class="line">        T = T + (u,v);	<span class="comment">// 边归入树</span></span><br><span class="line">        U = U +v;		<span class="comment">// 顶点归入树</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>时间复杂度</p>
<p>下面 n 为顶点数 |V| ，m 为边数 |E| 。</p>
<p><strong>O(n^2^)，不依赖于 m。</strong></p>
<p>适用：边稠密的图</p>
</li>
</ul>
<h5 id="Kruskal-算法"><a href="#Kruskal-算法" class="headerlink" title="Kruskal 算法"></a>Kruskal 算法</h5><p>按权值的递增次序选择合适的边来构造最小生成树</p>
<p>核心：选边</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/DataStructure/image-20231203000557712.png" alt="image-20231203000557712" style="zoom:67%;" /> 

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Status <span class="title">Kruskal</span><span class="params">(V, T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T = V;	<span class="comment">// 初始化树，仅含顶点</span></span><br><span class="line">    numS = n;	<span class="comment">// 连通分量数</span></span><br><span class="line">    <span class="keyword">while</span>(numS&gt;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        从 E 中取出权值最小的边 (u,v);</span><br><span class="line">        <span class="keyword">if</span>(v 和 u 属于 T 中不同的连通分量)</span><br><span class="line">        &#123;</span><br><span class="line">            T = T + (u,v);	<span class="comment">// 将此边加入生成树</span></span><br><span class="line">            numS--;			<span class="comment">// 连通分量数减1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>时间复杂度</p>
<p>下面 n 为顶点数 |V| ，m 为边数 |E| 。</p>
<p><strong>O(m log2 m)，不依赖于 n。</strong></p>
<p>适用：边稀疏而顶点多的图</p>
</li>
</ul>
</li>
</ul>
<h4 id="4-4-2-最短路径"><a href="#4-4-2-最短路径" class="headerlink" title="4.4.2 最短路径"></a>4.4.2 最短路径</h4><ul>
<li><p>性质</p>
<p>两点之间的最短路径也包含了路径上其他项点间的最短路径。</p>
</li>
<li><p>带权有向图 G 的最短路径</p>
<ul>
<li>单源最短路径：求图中某一顶点到其他各顶点的最短路径——Dijkstra 算法</li>
<li>多源最短路径：求顶点间的最短路径——Floyd 算法</li>
</ul>
</li>
</ul>
<h5 id="单源最短路径——Dijkstra-算法"><a href="#单源最短路径——Dijkstra-算法" class="headerlink" title="单源最短路径——Dijkstra 算法"></a>单源最短路径——Dijkstra 算法</h5><ul>
<li>懂原理即可</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/DataStructure/image-20231203000507715.png" alt="image-20231203000507715" style="zoom:67%;" /> 

<h5 id="多源最短路径——Floyd-算法"><a href="#多源最短路径——Floyd-算法" class="headerlink" title="多源最短路径——Floyd 算法"></a>多源最短路径——Floyd 算法</h5><ul>
<li>懂原理即可</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/DataStructure/image-20231203000436927.png" alt="image-20231203000436927" style="zoom:67%;" /> 



<h4 id="4-4-3-拓扑排序、AOV网"><a href="#4-4-3-拓扑排序、AOV网" class="headerlink" title="4.4.3 拓扑排序、AOV网"></a>4.4.3 拓扑排序、AOV网</h4><ul>
<li><p>AOV网</p>
<p>若用 有向无环图 DAG图表示一个工程，其顶点表示活动，有向边 &lt;vi, vj&gt; 表示活动 vi 必须先于活动 vj 进行的这样一种关系，则将这种有向图称为 顶点表示活动的网络（Activity On Vertex, AOV网）。</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/DataStructure/image-20231203000216909.png" alt="image-20231203000216909" style="zoom:80%;" /> 
</li>
<li><p>拓扑排序</p>
<p>在图论中，由一个有向无环图的顶点组成的序列，当且仅当满足下列条件，称为该图的一个拓扑排序：</p>
<ol>
<li>每个顶点出现且只出现一次</li>
<li>若顶点 A 在序列中排在顶点 B 的前面，则在图中不存在从顶点 B 到顶点 A 的路径。</li>
</ol>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/DataStructure/image-20231203000130193.png" alt="image-20231203000130193" style="zoom:80%;" /> 
</li>
<li><p>每个 AOV 网都有一个或多个拓扑排序。</p>
</li>
<li><p>常用算法步骤：</p>
<ol>
<li>从 AOV 网中选择一个没有前驱的顶点并输出。</li>
<li>从网中删除该顶点和所有以它为起点的有向边。</li>
<li>重复步骤1 和步骤2 直到当前的 AOV 网为空或当前网中不存在无前驱的顶点为止。（后者说明有向图中存在环）</li>
</ol>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/DataStructure/image-20231203000259971.png" alt="image-20231203000259971" style="zoom:80%;" /> 

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/DataStructure/image-20231203000351663.png" alt="image-20231203000351663" style="zoom:67%;" /> 
</li>
<li><p>代码</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Status <span class="title">TopologicalSort</span><span class="params">(Graph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">InitStack</span>(S);	<span class="comment">// 初始化栈，存储入度为0的顶点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;G.vexnum; i++)</span><br><span class="line">        <span class="keyword">if</span>(indegree[i]==<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">Push</span>(S, i);	<span class="comment">// 将所有入度为0的顶点入栈</span></span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;	<span class="comment">// 计数，记录的当前已经输出的顶点数</span></span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isEmpty</span>(S))	<span class="comment">// 栈不空，则存在入度为0的顶点</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> h;</span><br><span class="line">        <span class="built_in">Pop</span>(S, h);	<span class="comment">// 栈顶出栈</span></span><br><span class="line">        print[count++] = h;	<span class="comment">// 输出顶点 h</span></span><br><span class="line">        <span class="keyword">for</span>(p=G.vertices[h].firstarc; p; p=p-&gt;nextarc)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 将所有 h 指向的顶点的入度减1，并且将入度减为0的顶点压入栈S</span></span><br><span class="line">            v = p-&gt;adjvex;</span><br><span class="line">            <span class="keyword">if</span>(!(--indegree[v]))</span><br><span class="line">                <span class="built_in">Push</span>(S, v);	<span class="comment">//入度为0，入栈</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(count&lt;G.vexnum)</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    	<span class="keyword">return</span> TRUE;	<span class="comment">// 拓扑排序成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>时间复杂度</p>
<p>下面 n 为顶点数 |V| ，m 为边数 |E| 。</p>
<ul>
<li>邻接矩阵：O(n^2^)</li>
<li>邻接表：O(n+m)</li>
</ul>
</li>
</ul>
<h4 id="4-4-4-关键路径、AOE网"><a href="#4-4-4-关键路径、AOE网" class="headerlink" title="4.4.4 关键路径、AOE网"></a>4.4.4 关键路径、AOE网</h4><ul>
<li><p>AOE网</p>
<p>在带权有向图中，以顶点表示事件，以有向边表示活动，以边上的权值表示完成该活动的开销（比如时间），称为 用边表示活动的网络（Activity On Edge, AOE网）。</p>
<p>注：AOV 网和 AOE 网都是有向无环图，不同之处在于它们的边和顶点所代表的含义是不同的，且 AOE 网的边有权值，而 AOV 网的边无权值，仅代表顶点之间的前后关系。</p>
<ul>
<li>AOE 网的性质<ol>
<li>只有在某顶点所代表的事件发生后，从该顶点出发的各有向边所代表的活动才能开始</li>
<li>只有在进入某顶点的各有向边所代表的活动都已经结束时，该顶点代表的事件才能发生</li>
</ol>
</li>
</ul>
</li>
<li><p>工程</p>
<p>工程开始：在 AOE 网中，仅有一个入度为0的顶点，是开始顶点（源点）。</p>
<p>工程结束：在 AOE 网中，仅有一个出度为0的顶点，是结束顶点（汇点）。</p>
</li>
<li><p>在 AOE 网中，一些活动是可以并行的。</p>
</li>
<li><p>关键路径</p>
<p>从源点到汇点的所有路径中，具有最大路径长度的路径，称为关键路径。</p>
<ul>
<li><p>关键活动：在关键路径上的活动</p>
</li>
<li><p>关键路径的长度：完成整个工程的最短时间</p>
</li>
</ul>
</li>
<li><p>概念</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ai 活动：vj-&gt;<span class="function">vk</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="title">ve</span><span class="params">(k)</span>	事件 vk 的最早发生时间 </span></span><br><span class="line"><span class="function"><span class="title">vl</span><span class="params">(k)</span>	事件 vk 的最迟发生时间 </span></span><br><span class="line"><span class="function"><span class="title">v</span><span class="params">(i)</span>	活动 ai 的最早开始时间 </span></span><br><span class="line"><span class="function"><span class="title">l</span><span class="params">(i)</span>	活动 ai 的最迟开始时间 </span></span><br><span class="line"><span class="function"><span class="title">d</span><span class="params">(i)</span> </span>= <span class="built_in">l</span>(i) - <span class="built_in">e</span>(i)	活动 ai 的差额空闲余量</span><br><span class="line">    </span><br><span class="line"><span class="built_in">l</span>(i) - <span class="built_in">e</span>(i) = <span class="number">0</span> ,即 <span class="built_in">l</span>(i) = <span class="built_in">e</span>(i) 的活动 ai 是 关键活动。</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/DataStructure/image-20231203000036051.png" alt="image-20231203000036051" style="zoom:80%;" /> 
</li>
<li><p>求关键路径的算法</p>
<ol>
<li>从源点出发，令 <strong>ve(源点) &#x3D; 0</strong>，按<strong>拓扑有序求</strong>其余顶点的<strong>最早发生时间 ve()</strong></li>
<li>从汇点出发，令 <strong>vl(汇点) &#x3D; ve(汇点)<strong>，按</strong>逆拓扑有序求</strong>其余顶点的<strong>最迟发生时间 vl()</strong></li>
<li>根据各顶点的 <strong>ve() 值求</strong>所有<strong>弧的最早开始时间 e()</strong></li>
<li>根据各顶点的 <strong>vl() 值求</strong>所有<strong>弧的最迟开始时间 l()</strong></li>
<li>求 AOE 网中所有活动的<strong>差额 d()</strong></li>
<li>找出<strong>所有 d() &#x3D; 0 的活动</strong>，构成关键路径</li>
</ol>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/DataStructure/image-20231202235949828.png" alt="image-20231202235949828" style="zoom:80%;" /> 

<blockquote>
<ul>
<li><p>如何求 ve() ？</p>
<p>从 ve(1) &#x3D; 0 开始按拓扑有序推进</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ve</span>(j) = Max i&#123; <span class="built_in">ve</span>(i) + Wij&#125;</span><br></pre></td></tr></table></figure>

<p>其中，&lt;i, j&gt; ∈ T， 2&lt;&#x3D;j&lt;&#x3D;n，T是所有以 j 为头的弧的集合。</p>
</li>
<li><p>如何求 vl() ？</p>
<p>从 vl(n) &#x3D; ve(n) 开始按拓扑有序推进</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vl</span>(i) = Min j&#123; <span class="built_in">vl</span>(j) - Wij&#125;</span><br></pre></td></tr></table></figure>

<p>其中，&lt;i, j&gt; ∈ S， 1&lt;&#x3D;i&lt;&#x3D;n-1，S是所有以 i 为尾的弧的集合。</p>
</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/DataStructure/image-20231202235836706.png" alt="image-20231202235836706" style="zoom:80%;" /> 
</blockquote>
</li>
<li><p>注意：</p>
<ul>
<li><p>关键路径上的所有活动都是关键活动，因此可以通过加快关键活动来缩短整个工期。</p>
<p>但也不能任意缩短，因为一旦缩短到一定程度，该关键活动就可能变成非关键活动。</p>
</li>
<li><p>网中的关键路径并不唯一，对于有多条关键路径的网，只提高一条关键路径上的关键活动速度并不能缩短整个工程的工期。</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法常见报错问题</title>
    <url>/butterflyblog/2023/11/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%B8%B8%E8%A7%81%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="数据结构与算法常见报错问题"><a href="#数据结构与算法常见报错问题" class="headerlink" title="数据结构与算法常见报错问题"></a>数据结构与算法常见报错问题</h1><h2 id="ACCEPT"><a href="#ACCEPT" class="headerlink" title="ACCEPT"></a>ACCEPT</h2><ul>
<li>意思：正确</li>
</ul>
<h2 id="WRONG"><a href="#WRONG" class="headerlink" title="WRONG"></a>WRONG</h2><ul>
<li><p>意思：答案错误</p>
</li>
<li><p>错误原因：输出答案不符合题目要求，不是正确答案</p>
</li>
<li><p>查错：</p>
<ul>
<li>如果根本算法错误，那肯定是错误</li>
<li>如果确定算法没问题，那应该是你的输出不符合题目要求输出格式</li>
</ul>
</li>
</ul>
<h2 id="Runtime-Error"><a href="#Runtime-Error" class="headerlink" title="Runtime Error"></a>Runtime Error</h2><ul>
<li><p>意思：运行时出错</p>
</li>
<li><p>错误原因：在运行过程中，出现了内存访问错误，如数组越界访问、指针指向访问越界等</p>
</li>
<li><p>查错：</p>
<ul>
<li><p>数组访问错误</p>
<ul>
<li>看是不是有对数组 <code>arr[-1]</code>的访问，或者<code>arr[ARRMAX+1]</code>的访问（ARRMAX是数组arr的大小）</li>
<li>下标错误，如使用char类型作为下标，超出范围，出现负数</li>
</ul>
</li>
<li><p>指针使用NULL错误</p>
<ul>
<li><p>查看是不是有<code>p</code>是<code>NULL</code>时使用了<code>p-&gt;next</code>或<code>p-&gt;data</code>之类的访问</p>
</li>
<li><p>没有进行指针初始化</p>
</li>
<li><p><code>p-&gt;next</code>跳跃过多</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>悲惨经历</p>
<ul>
<li><p>知道边界值不能访问，也确实判断了是不是边界值，可是有点问题——利用<code>&amp;&amp;</code>的截断机制</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 思考为什么？</span></span><br><span class="line"><span class="comment">// 错误</span></span><br><span class="line"><span class="keyword">if</span>(arr[i] &amp;&amp; i&gt;=<span class="number">0</span>)</span><br><span class="line">    ....;</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">if</span>(i&gt;=<span class="number">0</span> &amp;&amp; arr[i])</span><br><span class="line">    ...;</span><br></pre></td></tr></table></figure></li>
</ul>
</blockquote>
<h2 id="Time-Limit-Exceeded"><a href="#Time-Limit-Exceeded" class="headerlink" title="Time Limit Exceeded"></a>Time Limit Exceeded</h2><ul>
<li><p>意思：超时</p>
</li>
<li><p>错误原因：算法不够优秀，时间复杂度太高，测试时超出了运行时间的限制</p>
</li>
<li><p>查错：</p>
<ul>
<li>改良算法，对时间复杂度进行优化</li>
</ul>
</li>
</ul>
<h2 id="Memory-Limit-Exceeded"><a href="#Memory-Limit-Exceeded" class="headerlink" title="Memory Limit Exceeded"></a>Memory Limit Exceeded</h2><ul>
<li><p>意思：内存超限</p>
</li>
<li><p>错误原因：算法不够优秀，使用内存过大，超出了内存大小限制</p>
</li>
<li><p>查错：</p>
<ul>
<li><p>改良算法，对空间复杂度进行优化</p>
</li>
<li><p>我遇到过的错误情况：</p>
<ul>
<li><p>使用<code>cin</code>输入出错，导致内存错</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// T[i].lchild是整数类型，但是输入会出现字符‘-’</span></span><br><span class="line"><span class="comment">// 因此，后续cin都是fail，需要自己判断并改回clear正确</span></span><br><span class="line">cin &gt;&gt; T[i].lchild; </span><br><span class="line"><span class="keyword">if</span>(cin.<span class="built_in">fail</span>())</span><br><span class="line">&#123;</span><br><span class="line">    cin.<span class="built_in">clear</span>();</span><br><span class="line">    T[i].lchild = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Output-Size-Limit-Exceeded"><a href="#Output-Size-Limit-Exceeded" class="headerlink" title="Output Size Limit Exceeded"></a>Output Size Limit Exceeded</h2><ul>
<li>意思：输出大小限制超时</li>
<li>错误原因：也是超时限制，一般是某地方输出陷入了死循环，或者输出没有明确的终止。</li>
<li>查错：<ul>
<li>应该是没写好输入的停止条件，导致一直在等下一次输入</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>颜色素材——原神</title>
    <url>/butterflyblog/2023/08/03/%E9%A2%9C%E8%89%B2%E7%B4%A0%E6%9D%90%E2%80%94%E2%80%94%E5%8E%9F%E7%A5%9E/</url>
    <content><![CDATA[<h1 id="开发颜色素材——原神"><a href="#开发颜色素材——原神" class="headerlink" title="开发颜色素材——原神"></a>开发颜色素材——原神</h1><blockquote>
<p>一个常用的占位无用背景色：<code>#f8f8f8 </code> 淡浅灰</p>
</blockquote>
<h4 id="来源1：璃月港"><a href="#来源1：璃月港" class="headerlink" title="来源1：璃月港"></a><a href="https://www.bilibili.com/video/BV1i84y1h75N/?spm_id_from=333.999.0.0&vd_source=c8fd2e0497e85b922bd7937e4829dc8f">来源1：璃月港</a></h4><h4 id="1-1-香菱"><a href="#1-1-香菱" class="headerlink" title="1.1 香菱"></a>1.1 香菱</h4><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/genshincolor/image-20230119174702280.png" alt="image-20230119174702280" style="zoom:50%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#000000</span><br><span class="line">#384871</span><br><span class="line">#E7BD39</span><br><span class="line">#AB4F3F</span><br><span class="line">#47855A</span><br></pre></td></tr></table></figure>



<h4 id="1-2-申鹤"><a href="#1-2-申鹤" class="headerlink" title="1.2 申鹤"></a>1.2 申鹤</h4><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/genshincolor/image-20230119174817927.png" alt="image-20230119174817927" style="zoom:50%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#232B36</span><br><span class="line">#5E7C89</span><br><span class="line">#B4BFD0</span><br><span class="line">#8694AD</span><br><span class="line">#9C3129</span><br></pre></td></tr></table></figure>



<h4 id="1-3-魈"><a href="#1-3-魈" class="headerlink" title="1.3 魈"></a>1.3 魈</h4><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/genshincolor/image-20230119174923461.png" alt="image-20230119174923461" style="zoom:50%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#333C42</span><br><span class="line">#316658</span><br><span class="line">#5EA69C</span><br><span class="line">#C2CFA2</span><br><span class="line">#A4795E</span><br><span class="line">#706690</span><br></pre></td></tr></table></figure>



<h4 id="1-4-胡桃"><a href="#1-4-胡桃" class="headerlink" title="1.4 胡桃"></a>1.4 胡桃</h4><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/genshincolor/image-20230119175000000.png" alt="image-20230119175000000" style="zoom:50%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#3A1B19</span><br><span class="line">#7B595E</span><br><span class="line">#C7A085</span><br><span class="line">#FCF0E1</span><br><span class="line">#C94737</span><br></pre></td></tr></table></figure>



<h4 id="1-5-云堇"><a href="#1-5-云堇" class="headerlink" title="1.5 云堇"></a>1.5 云堇</h4><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/genshincolor/image-20230119175045668.png" alt="image-20230119175045668" style="zoom: 50%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#1E1A22</span><br><span class="line">#67A4BA</span><br><span class="line">#4E4C72</span><br><span class="line">#B94E5E</span><br><span class="line">#D389A1</span><br></pre></td></tr></table></figure>



<h4 id="1-6-钟离"><a href="#1-6-钟离" class="headerlink" title="1.6 钟离"></a>1.6 钟离</h4><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/genshincolor/image-20230119175127600.png" alt="image-20230119175127600" style="zoom:50%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#2F2321</span><br><span class="line">#AA4F23</span><br><span class="line">#F8EBDC</span><br><span class="line">#FED875</span><br><span class="line">#CF627A</span><br></pre></td></tr></table></figure>



<h4 id="1-6-甘雨"><a href="#1-6-甘雨" class="headerlink" title="1.6 甘雨"></a>1.6 甘雨</h4><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/genshincolor/image-20230119175157962.png" alt="image-20230119175157962" style="zoom:50%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#33395B</span><br><span class="line">#5D74A2</span><br><span class="line">#C4D8F2</span><br><span class="line">#F2E8E3</span><br><span class="line">#7C282B</span><br></pre></td></tr></table></figure>



<h4 id="1-7-刻晴"><a href="#1-7-刻晴" class="headerlink" title="1.7 刻晴"></a>1.7 刻晴</h4><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/genshincolor/image-20230119175226756.png" alt="image-20230119175226756" style="zoom:50%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#211A3E</span><br><span class="line">#453370</span><br><span class="line">#A597B6</span><br><span class="line">#FEF3E8</span><br><span class="line">#D06C9D</span><br></pre></td></tr></table></figure>





<h4 id="来源2：稻妻城"><a href="#来源2：稻妻城" class="headerlink" title="来源2：稻妻城"></a><a href="https://www.bilibili.com/video/BV1W24y1e75S/?spm_id_from=333.337.search-card.all.click&vd_source=c8fd2e0497e85b922bd7937e4829dc8f">来源2：稻妻城</a></h4><h4 id="2-1-八重神子"><a href="#2-1-八重神子" class="headerlink" title="2.1 八重神子"></a>2.1 八重神子</h4><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/genshincolor/image-20230119175544863.png" alt="image-20230119175544863" style="zoom:50%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#</span><br></pre></td></tr></table></figure>



<h4 id="2-2-早柚"><a href="#2-2-早柚" class="headerlink" title="2.2 早柚"></a>2.2 早柚</h4><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/genshincolor/image-20230119175615925.png" alt="image-20230119175615925" style="zoom:50%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#</span><br></pre></td></tr></table></figure>



<h4 id="2-3-雷电将军"><a href="#2-3-雷电将军" class="headerlink" title="2.3 雷电将军"></a>2.3 雷电将军</h4><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/genshincolor/image-20230119175645940.png" alt="image-20230119175645940" style="zoom:50%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#</span><br></pre></td></tr></table></figure>



<h4 id="2-4-宵宫"><a href="#2-4-宵宫" class="headerlink" title="2.4 宵宫"></a>2.4 宵宫</h4><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/genshincolor/image-20230119175717878.png" alt="image-20230119175717878" style="zoom:50%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">#CD4432</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#</span><br></pre></td></tr></table></figure>



<h4 id="2-5-枫原万叶"><a href="#2-5-枫原万叶" class="headerlink" title="2.5 枫原万叶"></a>2.5 枫原万叶</h4><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/genshincolor/image-20230119175802792.png" alt="image-20230119175802792" style="zoom:50%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">#</span><br><span class="line">#C33828</span><br><span class="line">#</span><br><span class="line">#</span><br></pre></td></tr></table></figure>



<h4 id="2-6-神里绫华"><a href="#2-6-神里绫华" class="headerlink" title="2.6 神里绫华"></a>2.6 神里绫华</h4><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/genshincolor/image-20230119175841853.png" alt="image-20230119175841853" style="zoom:50%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">#414C87</span><br><span class="line">#9CB3D4</span><br><span class="line">#ECEDEB</span><br><span class="line">#</span><br></pre></td></tr></table></figure>



<h4 id="2-7-荒泷一斗"><a href="#2-7-荒泷一斗" class="headerlink" title="2.7 荒泷一斗"></a>2.7 荒泷一斗</h4><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/genshincolor/image-20230119175910185.png" alt="image-20230119175910185" style="zoom:50%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#F7DB78</span><br><span class="line">#</span><br></pre></td></tr></table></figure>



<h4 id="2-8-珊瑚宫心海"><a href="#2-8-珊瑚宫心海" class="headerlink" title="2.8 珊瑚宫心海"></a>2.8 珊瑚宫心海</h4><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/genshincolor/image-20230119175944139.png" alt="image-20230119175944139" style="zoom:50%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">#</span><br><span class="line">#8E8DC8</span><br><span class="line">#F7E2DB</span><br><span class="line">#</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>通用知识</category>
      </categories>
      <tags>
        <tag>原神</tag>
      </tags>
  </entry>
</search>
