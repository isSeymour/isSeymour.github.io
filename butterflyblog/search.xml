<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AAMS-同济教务系统</title>
    <url>/butterflyblog/2023/07/29/AAMS-%E5%90%8C%E6%B5%8E%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="AAMS-同济教务系统"><a href="#AAMS-同济教务系统" class="headerlink" title="AAMS-同济教务系统"></a>AAMS-同济教务系统</h1><blockquote>
<h4 id="网址入口：AAMS-同济教务系统"><a href="#网址入口：AAMS-同济教务系统" class="headerlink" title="网址入口：AAMS-同济教务系统"></a>网址入口：<a href="http://124.222.130.4:9000/">AAMS-同济教务系统</a></h4><p>说明：账号密码请找站长索要</p>
</blockquote>
<h3 id="0x01-AAMS是什么？"><a href="#0x01-AAMS是什么？" class="headerlink" title="0x01 AAMS是什么？"></a>0x01 AAMS是什么？</h3><ul>
<li>Academic Affairs Management System</li>
<li>教务管理系统</li>
</ul>
<p>本次项目致力于搭建一个有数据库支持的、前后端分离的教务管理系统。</p>
<h3 id="0x02-技术栈"><a href="#0x02-技术栈" class="headerlink" title="0x02 技术栈"></a>0x02 技术栈</h3><p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/aams1.png" alt="aams技术栈"></p>
<ul>
<li>前端：Vue 2.x、Vue-Router、ElementUI、Axios</li>
<li>后端：Django、DRF、JWT</li>
<li>数据库：MySQL</li>
</ul>
<p>本次项目采用前后端分离的架构，前端采用 VUE 框架，后端采用Django 框架，前后端通过 AJAX 技术进行连接。</p>
<p>后端主要管理数据库、数据查询、数据操作等功能，构建数据模型、与数据库交互、业务流程处理、网络请求接收并响应等功能。其中网络请求部分，通过传输 JSON 格式数据给前端，前端接收 JSON 格式数据后，把数据传给前端渲染的 data 进行渲染并呈现给用户。</p>
<p>前端是 SPA 单页面应用，功能跳转通过 vue-router 来处理，本地身份认证与路由拦截也通过 vue-router 处理。其中关于网络请求有单独的文件结构，简洁明了。美化工作由 elementUI 和少量原生的 CSS 来处理。</p>
<h3 id="0x03-效果展示"><a href="#0x03-效果展示" class="headerlink" title="0x03 效果展示"></a>0x03 效果展示</h3><h4 id="3-1-学生端"><a href="#3-1-学生端" class="headerlink" title="3.1 学生端"></a>3.1 学生端</h4><h5 id="3-1-1-首页"><a href="#3-1-1-首页" class="headerlink" title="3.1.1 首页"></a>3.1.1 首页</h5><p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/aams2.png" alt="学生端首页"></p>
<p>说明：</p>
<p>（1）登录成功提示；</p>
<p>（2）主页分为头部信息、左侧菜单栏、中间主内容区域；</p>
<p>（3）主页会自动获取最近的几条通知广告，进行自动播放；</p>
<p>（4）右上角的“我的信息”可以退出登录；</p>
<p>（5）“通知公告”处可以打开通知查看详情；</p>
<p>（6）本学期进度是一些个人信息，其中进度圈是指当前的学期阶段（分为5阶段，2是开放选课阶段，未到选课阶段时，无法选课）。</p>
<h5 id="3-1-2-全校课程"><a href="#3-1-2-全校课程" class="headerlink" title="3.1.2 全校课程"></a>3.1.2 全校课程</h5><p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/aams3.png" alt="全校课程"></p>
<p>说明：</p>
<p>（1）可以输入学期代码、下拉选择校区，再点击查询；</p>
<p>（2）在右下角有每页几条、跳转数据、直接跳转数据的功能；</p>
<p>（3）每次查询会给出查询结果，是否成功查询、网络出错等。</p>
<h5 id="3-1-3-个人选课"><a href="#3-1-3-个人选课" class="headerlink" title="3.1.3 个人选课"></a>3.1.3 个人选课</h5><p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/aams4.png" alt="个人选课1"></p>
<p>说明：</p>
<p>（1）刚进入时，显示当前没有对您开放的选课，可以刷新；</p>
<p>（2）刷新若有选课会展示选课的轮次，以供选择；</p>
<p>（3）进入选课有确认阅读选课信息界面。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/aams5.png" alt="个人选课2"></p>
<p>说明：</p>
<p>（1）进入选课界面后，初始时，没有任何数据；</p>
<p>（2）点击“添加课程”，会在选课列表里添加所有可选的课程；</p>
<p>（3）下拉有在线课表的功能，可以查看；</p>
<p>（4）选课列表里的每个课程可以查看，然后进行具体课程班级的选择；</p>
<p>（5）前端自动进行选课是否冲突的判断，不冲突则选课成功，冲突会给出提示；</p>
<p>（6）选好的课程后，可以刷新课表，在下拉课表里查看当前的课程表；</p>
<p>（7）已选的课程会变成“深绿色”的课程序号，未选是“浅绿色”的课程序号；</p>
<p>（8）再次点击已选的课程，会进行退课，退课前会先提示是否确认退课操作；</p>
<p>（9）课程会自动排在课程表里对应时间位置，并写清楚课程名、教师、教室。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/aams6.png" alt="个人选课3"></p>
<p>说明：</p>
<p>（1）进入我的课表页面，点击左上角“学生课表”旁边的“刷新”；</p>
<p>（2）下拉有表格的课程列表，信息更加全面。</p>
<h5 id="3-1-4-成绩查询"><a href="#3-1-4-成绩查询" class="headerlink" title="3.1.4 成绩查询"></a>3.1.4 成绩查询</h5><p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/aams9.png" alt="成绩查询"></p>
<p>说明：</p>
<p>（1）会向后端查询当前账号的所有成绩单；</p>
<p>（2）成绩会按照学期先后进行排序展示，你可以点击“学期编号”旁边的箭头，更改排序的先后顺序；</p>
<p>教师端有录入成绩的功能（后面会展示）。</p>
<h4 id="3-2-教师端"><a href="#3-2-教师端" class="headerlink" title="3.2 教师端"></a>3.2 教师端</h4><h5 id="3-2-1-首页"><a href="#3-2-1-首页" class="headerlink" title="3.2.1 首页"></a>3.2.1 首页</h5><p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/aams10.png" alt="教师端首页"></p>
<p>说明：</p>
<p>（1）该页面大体内容和学生端类似，为了作为区分，我更改了外围的主色调；</p>
<p>（2）教师端的侧边菜单栏功能与学生端不同。</p>
<p>（3）部分通知不一样，部分通知可能并不是发给教师，所以教师看不到。</p>
<h5 id="3-2-2-我的授课"><a href="#3-2-2-我的授课" class="headerlink" title="3.2.2 我的授课"></a>3.2.2 我的授课</h5><p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/aams12.png" alt="我的授课"></p>
<p>说明：</p>
<p>（1）教师授课的课程都会在该页面显示。</p>
<h5 id="3-2-3-录入成绩"><a href="#3-2-3-录入成绩" class="headerlink" title="3.2.3 录入成绩"></a>3.2.3 录入成绩</h5><p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/aams11.png" alt="录入成绩"></p>
<p>说明：</p>
<p>（1）教师可在该页面录入成绩；</p>
<p>（2）录入成绩有学期阶段限制，不是处于第5阶段：学期结束阶段，无法录入；</p>
<h3 id="0x04-杂谈"><a href="#0x04-杂谈" class="headerlink" title="0x04 杂谈"></a>0x04 杂谈</h3><h4 id="4-1-心得"><a href="#4-1-心得" class="headerlink" title="4.1 心得"></a>4.1 心得</h4><p>本次项目，我很早就开始准备了，也是最初一直学了好久的 B 站课程，我前端选的是 VUE，在 B 站上选了一个播放量比较大的，每天有空就学，也因为比较感兴趣，学的不算枯燥，会同时记录 notes，防止自己看了一遍就忘了，就白学了。（视频链接：<a href="https://www.bilibili.com/video/BV1Zy4y1K7SH/">b站尚硅谷Vue2.0+Vue3.0</a>）</p>
<p>尤其计算机操作类的课程，都是很容易生疏，因此，我每天看完的内容，一定会总结一下。大概在 5 月初的样子，把 VUE 教程看完了，对前端感觉了解深刻了很多。同时因为有了这次的经历，对自学新的知识开始转变思想，也比较有信心通过自学能学会新技术。后端原本打算使用Java，但是由于我没有学过 Java，可能 5 月才开始学，会有点晚了。所以，转向使用已学过的 Python 做后端，在 Flask 和 Django 之间，选择了 Django，主要是看重他的框架比较成型，也好让我对后端基本框架有一个更加成熟完备的了解，便于以后更好的学习其他后端框架。同时比较好的是 Django 不需要我直接操作数据库，这点对于我这个还没有学过数据库的同学来说，无疑是最大的好处。我的后端学的不如前端扎实，毕竟学前端时间也长，而学后端的时间少不说，还缺乏比较全面的教程。</p>
<p>在学完前端和后端基本框架之后，我开始着手做这个项目了。做项目的过程中，又引发很多问题。比如说遇到关于登陆后的认证问题，我就去学习了一下 JWT 认证，了解了原理，然后自己再编写；遇到关于后端规范化数据格式，我学习了 DRF，采用 APIView 和序列化器，使得交互数据非常简洁明了；遇到跨域请求问题，学习了解决跨域问题的前端、后端方法。</p>
<p>经历这么一遭，最终也是做好了，也算是比较满意吧。其实我发现，热爱很重要，其实想想学习的这一路还是比较痛苦的，但是由于迫切希望看到结果，我也一直快马加鞭的学了下来。希望以后还能保持这份热爱，继续前行！</p>
<h4 id="4-2-认知"><a href="#4-2-认知" class="headerlink" title="4.2 认知"></a>4.2 认知</h4><p>最后，关于分析国内外的 web 技术，我可能说不出太多认知。我仅说说我学过的这些技术中，我的一些看法吧。</p>
<p>前端技术 vue 是尤雨溪开发出来的一套框架。我其实比较惊喜能够在计算机的某种技术里看到中国人的名字放在第一位。我的体会一直是中国在追赶国外的新兴技术，我们也能做到很好的使用，但是总是缺少开发新兴技术的人。所以，Vue 的出现，让我感到惊喜！</p>
<p>其他 web 技术，我了解的不多，我目前听到的说法是：中国比较庞大的 web 技术生态是微信生态系统，微信提供了许多 API 和开发工具，允许开发人员在其平台上构建应用程序和服务。国外比较多用的也几乎都是类似微信的一些社交媒体，如 Twitter、Facebook、Instagram 等。</p>
<p>我一直认为，能否推动某种技术大力发展取决于它的受众面是否广阔。希望今后能看到更多以中国人名字排头的 web 技术！</p>
]]></content>
      <categories>
        <category>开发项目</category>
      </categories>
      <tags>
        <tag>前后端分离</tag>
      </tags>
  </entry>
  <entry>
    <title>JWT身份认证原理</title>
    <url>/butterflyblog/2023/07/26/JWT%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="JWT身份认证原理"><a href="#JWT身份认证原理" class="headerlink" title="JWT身份认证原理"></a>JWT身份认证原理</h1><blockquote>
<h4 id="官网：Json-Web-Token"><a href="#官网：Json-Web-Token" class="headerlink" title="官网：Json Web Token"></a>官网：<a href="https://jwt.io/">Json Web Token</a></h4><p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/jwt1.png" alt="JWT官方"> </p>
</blockquote>
<h3 id="0x01-认证原理"><a href="#0x01-认证原理" class="headerlink" title="0x01 认证原理"></a>0x01 认证原理</h3><p>JWT，Json Web Token。用户登陆成功后，服务端返回一个 jwt 的 token，服务端不储存，客户端储存。此后客户端每次请求，都带上 token。服务端会 jwt校验 token 的有效性。优点显而易见，是不需要在服务端储存 token，服务端只需要做校验有效性的工作即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/jwt2.png" alt="JWT官方解释"></p>
<p><strong>JWT 格式：</strong></p>
<p>点分三段的字符串：</p>
<p><strong>第一段：HEADER</strong></p>
<p>base64url 加密的密文，可解密。</p>
<p>jwt 头部，包含说明第三段不可解密的编码算法名 HS256、字段数据类型标识 JWT。</p>
<p><strong>第二段：PAYLOAD</strong></p>
<p>base64url 加密的密文，可解密。</p>
<p>jwt 数据，包含自定义的数据。</p>
<p><strong>第三段：VERIFY SIGNATURE</strong></p>
<p>HS256 加密的密文，无法解密</p>
<p>校验签名，第一段密文.第二段密文“盐”进行 HS256 加密，生成密文，再做base64url 加密。</p>
<h3 id="0x02-代码实例"><a href="#0x02-代码实例" class="headerlink" title="0x02 代码实例"></a>0x02 代码实例</h3><p>为了实现用户登录之后的身份认证和授权管理，采用 JWT 认证。</p>
<p><code>pip install pyjwt</code></p>
<h4 id="颁发-token"><a href="#颁发-token" class="headerlink" title="颁发 token"></a>颁发 token</h4><p><code>release.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_token</span>(<span class="params">payload,timeout=<span class="number">30</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    创建token的部分</span></span><br><span class="line"><span class="string">    payload 外部传入payload，即用户信息在外部写，传入这里输出token即可</span></span><br><span class="line"><span class="string">    timeout 超时时间，默认30s</span></span><br><span class="line"><span class="string">    返回值：token</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 构造header</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;alg&quot;</span>:<span class="string">&quot;HS256&quot;</span>,</span><br><span class="line">        <span class="string">&quot;typ&quot;</span>:<span class="string">&quot;jwt&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#构造payload</span></span><br><span class="line">    payload[<span class="string">&#x27;exp&#x27;</span>] = datetime.datetime.utcnow() + datetime.timedelta(seconds=timeout)</span><br><span class="line">    token = jwt.encode(payload=payload,key=settings.SECRET_KEY,algorithm=<span class="string">&quot;HS256&quot;</span>,headers=headers)</span><br><span class="line">    <span class="keyword">return</span> token</span><br></pre></td></tr></table></figure>

<h4 id="认证-token"><a href="#认证-token" class="headerlink" title="认证 token"></a>认证 token</h4><p><code>auth.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> BaseAuthentication</span><br><span class="line"><span class="keyword">from</span> rest_framework.exceptions <span class="keyword">import</span> AuthenticationFailed</span><br><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">from</span> jwt <span class="keyword">import</span> exceptions</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JwtAuthentication</span>(<span class="title class_ inherited__">BaseAuthentication</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">authenticate</span>(<span class="params">self, request</span>):</span><br><span class="line">        token = request.META.get(<span class="string">&quot;HTTP_AAMS_TOKEN&quot;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            payload = jwt.decode(token, settings.SECRET_KEY, algorithms=<span class="string">&quot;HS256&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> exceptions.ExpiredSignatureError:</span><br><span class="line">            <span class="keyword">raise</span> AuthenticationFailed(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">400</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;token已失效&quot;</span>&#125;)</span><br><span class="line">        <span class="keyword">except</span> jwt.DecodeError:</span><br><span class="line">            <span class="keyword">raise</span> AuthenticationFailed(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">400</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;token认证失败&quot;</span>&#125;)</span><br><span class="line">        <span class="keyword">except</span> jwt.InvalidTokenError:</span><br><span class="line">            <span class="keyword">raise</span> AuthenticationFailed(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">400</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;token无效&quot;</span>&#125;)</span><br><span class="line">        <span class="comment"># 这个return是会放行的，并不是直接返回。</span></span><br><span class="line">        <span class="comment"># 这里的意思是会把payload和token挂载在request上</span></span><br><span class="line">        <span class="comment"># payload:储存了username(用户账号)和exp(过期时间)，挂载在request.user</span></span><br><span class="line">        <span class="comment"># token:储存了token信息，挂载在request.auth上</span></span><br><span class="line">        <span class="keyword">return</span> (payload, token)</span><br></pre></td></tr></table></figure>

<h4 id="配置在全局"><a href="#配置在全局" class="headerlink" title="配置在全局"></a>配置在全局</h4><p>若是要哪个请求需要认证才能进行后续业务，那么：</p>
<p><code>views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> myserver.mytoken.auth <span class="keyword">import</span> JwtAuthentication</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">aView</span>(...):</span><br><span class="line">	authentication_class = [JwtAuthentication,]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line">        ..</span><br></pre></td></tr></table></figure>

<p>因为基本上所有的请求，都是要认证再进行业务的。所以可以配置在</p>
<p><code>settings.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SECRET_KEY = <span class="string">&quot;xxxxxxxxxxxx自己设置即可xxxxxxxxxxxxx&quot;</span>	<span class="comment"># 前面设置的密钥（盐）</span></span><br><span class="line"></span><br><span class="line">REST_FRAMEWORK = [</span><br><span class="line">    <span class="string">&quot;DEFAULT_AUTHENTICATION_CLASS&quot;</span>:[</span><br><span class="line">        <span class="string">&quot;myserver.mytoken.JwtAuthentication&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>注意，要在登陆视图函数取消认证配置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LoginView</span>(...):</span><br><span class="line">    authentication_class = [] <span class="comment">#这里设置的优先级会高于全局设置，所以最终Login会取消认证的操作，直接放行</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">...</span>):</span><br></pre></td></tr></table></figure>

<h4 id="login视图函数"><a href="#login视图函数" class="headerlink" title="login视图函数"></a>login视图函数</h4><p><code>views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> ensure_csrf_cookie</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> .mytoken.release <span class="keyword">import</span> create_token</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Major,User</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> CourseSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Login</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    authentication_classes = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&quot;code&quot;</span>:<span class="number">400</span>, <span class="string">&quot;msg&quot;</span>:<span class="string">&quot;后端没有login的get&quot;</span>&#125;,status=status.HTTP_200_OK)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self,request</span>):</span><br><span class="line">        username = request.POST.get(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">&quot;password&quot;</span>)</span><br><span class="line"></span><br><span class="line">        exists = User.objects.<span class="built_in">filter</span>(username=username,password=password).exists()</span><br><span class="line">        <span class="keyword">if</span> exists:</span><br><span class="line">            token = create_token(&#123;<span class="string">&quot;username&quot;</span>:username&#125;)</span><br><span class="line">            res = &#123;</span><br><span class="line">                <span class="string">&quot;code&quot;</span>:<span class="number">200</span>,</span><br><span class="line">                <span class="string">&quot;msg&quot;</span>:<span class="string">&quot;登陆成功！&quot;</span>,</span><br><span class="line">                <span class="string">&quot;data&quot;</span>:&#123;</span><br><span class="line">                    <span class="string">&quot;aams-token&quot;</span>:token,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Response(res,status=status.HTTP_200_OK)</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&quot;code&quot;</span>:<span class="number">400</span>, <span class="string">&quot;msg&quot;</span>:<span class="string">&quot;登陆失败！&quot;</span>&#125;,status=status.HTTP_400_BAD_REQUEST)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>若想一天不失效，可以：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">token = create_token(&#123;<span class="string">&quot;username&quot;</span>:username&#125;,timeout=<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>)    <span class="comment">#一天不失效</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="0x03-认证测试"><a href="#0x03-认证测试" class="headerlink" title="0x03 认证测试"></a>0x03 认证测试</h3><p>正如前面所说，我们采用JWT认证，那么测试登录和认证十分重要。</p>
<p>在第一次登录成功之后，应该由后端颁发一个token（我的系统命名为aams-token）。此后，每次网络请求必须带上这个aams-token作为请求头，后端会在请求头里取到aams-token，由中间件进行认证拦截，认证成功则会放行，否则请求失败。</p>
<h4 id="登录测试"><a href="#登录测试" class="headerlink" title="登录测试"></a>登录测试</h4><p>首先看一下能否在登录成功后得到一个正确的token：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/jwt3.png" alt="登陆测试"></p>
<h4 id="认证测试"><a href="#认证测试" class="headerlink" title="认证测试"></a>认证测试</h4><p>除登录API，随便选择一个API，发起请求，分别看在没有token和带有token的情况下，会收到什么响应：</p>
<p>注：以下所有API的response都是自行设计的code和msg。</p>
<p>为了方便测试，我只采用了少量的code（同时也尽量贴合状态码的原意）和msg。</p>
<blockquote>
<p>code 状态码：200 处理成功；400 处理失败；301 重定向；202 接收处理但等待创建。</p>
<p>msg 状态信息：解释每种情况下的具体信息。</p>
</blockquote>
<h5 id="情况1：不带token"><a href="#情况1：不带token" class="headerlink" title="情况1：不带token"></a>情况1：不带token</h5><p>如下图，可见code状态码为400，msg状态信息为token认证失败。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/jwt4.png" alt="情况1：不带token"></p>
<h5 id="情况2：带失效的token"><a href="#情况2：带失效的token" class="headerlink" title="情况2：带失效的token"></a>情况2：带失效的token</h5><p>如下图，可见code状态码为400，msg状态信息为token已失效。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/jwt5.png" alt="情况2：带失效的token"></p>
<h5 id="情况3：带有效的token"><a href="#情况3：带有效的token" class="headerlink" title="情况3：带有效的token"></a>情况3：带有效的token</h5><p>如下图，可见code状态码为200，msg状态信息为获取成功。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/jwt6.png" alt="情况3：带有效的token"></p>
]]></content>
      <categories>
        <category>Web技术</category>
      </categories>
      <tags>
        <tag>身份认证</tag>
      </tags>
  </entry>
  <entry>
    <title>《Django》入门 Notes（上）</title>
    <url>/butterflyblog/2023/06/01/%E3%80%8ADjango%E3%80%8B%E5%85%A5%E9%97%A8%20Notes%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
    <content><![CDATA[<h1 id="《Django》入门-Notes（上）"><a href="#《Django》入门-Notes（上）" class="headerlink" title="《Django》入门 Notes（上）"></a>《Django》入门 Notes（上）</h1><p>@Seymour0314 来源官方文档<code>https://docs.djangoproject.com/zh-hans/4.2/intro/</code></p>
<blockquote>
<p>本文是Django 后端技术初级入门教程。</p>
<p>编程语言：Python</p>
</blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230510110254656.png" alt="image-20230510110254656" style="zoom: 50%;" />





<h2 id="初识-Django"><a href="#初识-Django" class="headerlink" title="初识 Django"></a>初识 Django</h2><blockquote>
<p>Django 最初被设计用于具有快速开发需求的新闻类站点，目的是要实现简单快捷的网站开发。以下内容简要介绍了如何使用 Django 实现一个数据库驱动的网络应用。</p>
</blockquote>
<blockquote>
<p>从哪里获得帮助：</p>
<p>如果你在阅读本教程的过程中有任何疑问，可以前往 FAQ 的 <a href="https://docs.djangoproject.com/zh-hans/4.2/faq/help/">获取帮助</a> 的版块。</p>
</blockquote>
<blockquote>
<p>官方文档：<a href="https://docs.djangoproject.com/zh-hans/4.2/topics/">https://docs.djangoproject.com/zh-hans/4.2/topics/</a></p>
</blockquote>
<h2 id="快速安装指南"><a href="#快速安装指南" class="headerlink" title="快速安装指南"></a>快速安装指南</h2><h3 id="在-Windows-上安装-Django"><a href="#在-Windows-上安装-Django" class="headerlink" title="在 Windows 上安装 Django"></a>在 Windows 上安装 Django</h3><h5 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h5><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511140356777.png" alt="image-20230511140356777" style="zoom:80%;" /> 

<ul>
<li>Django 是一个 Python Web 框架，因此需要在您的机器上安装 Python。</li>
</ul>
<blockquote>
<p>Python官方下载地址 <a href="https://www.python.org/downloads/">https://www.python.org/downloads/</a></p>
<p>查看版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; py --version</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="配置一个虚拟环境"><a href="#配置一个虚拟环境" class="headerlink" title="配置一个虚拟环境"></a>配置一个虚拟环境</h5><ul>
<li><p>最佳实践是为你创建的每一个Django项目创建一个独立的环境。</p>
<p>在Python生态系统中有许多可以用来管理环境和包的可选工具，一些在 <a href="https://packaging.python.org/guides/tool-recommendations/">Python documentation</a> 被推荐过。我们将会在这份指南中使用Python本身自带的 <a href="https://docs.python.org/3/tutorial/venv.html">venv</a> 来管理环境。</p>
</li>
</ul>
<blockquote>
<p>在当前文件夹下创建虚拟环境：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在 project-name 文件夹下创建一个虚拟环境（若project-name文件夹不存在，则会新建）</span></span><br><span class="line">...\&gt; py -m venv project-name</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">激活环境</span></span><br><span class="line">...\&gt; project-name\Scripts\activate.bat</span><br></pre></td></tr></table></figure>

<p>每次你打开新的命令行窗口，你需要再次激活环境。</p>
</blockquote>
<h5 id="安装-Django"><a href="#安装-Django" class="headerlink" title="安装 Django"></a>安装 Django</h5><ul>
<li>Django 可以轻松地在你的<strong>虚拟环境</strong>中使用 <code>pip</code> 安装。</li>
</ul>
<blockquote>
<p>确保虚拟环境已经激活，输入下面命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; py -m pip install Django</span><br></pre></td></tr></table></figure>

<p>这将下载并安装最新的 Django 发布版本。</p>
<p>安装完成后，你可以在命令提示符运行 <code>django-admin --version</code> 验证你安装的 Django。</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511142702003.png" alt="image-20230511142702003" style="zoom:67%;" />

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511143558371.png" alt="image-20230511143558371" style="zoom: 67%;" />

<blockquote>
<p>非虚拟环境查看版本号：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; py -m django --version</span><br></pre></td></tr></table></figure>
</blockquote>
</blockquote>
<h5 id="安装-Apache-和-mod-wsgi"><a href="#安装-Apache-和-mod-wsgi" class="headerlink" title="安装 Apache 和 mod_wsgi"></a>安装 Apache 和 <code>mod_wsgi</code></h5><ul>
<li><p>如果您只是想试验 Django，请跳到下一部分；</p>
<p>Django 包含一个可用于测试的轻量级 Web 服务器，</p>
<p>因此在准备好在生产环境中部署 Django 之前，您不需要设置 Apache。</p>
</li>
</ul>
<h5 id="运行你的数据库"><a href="#运行你的数据库" class="headerlink" title="运行你的数据库"></a>运行你的数据库</h5><ul>
<li><p>如果你打算使用 Django 的数据库 API 功能，你需要确保一个数据库服务器正在运行。</p>
<p>Django 支持许多不同的数据库服务器，官方支持 <a href="https://www.postgresql.org/">PostgreSQL</a>、<a href="https://mariadb.org/">MariaDB</a>、<a href="https://www.mysql.com/">MySQL</a>、<a href="https://www.oracle.com/">Oracle</a> 和 <a href="https://www.sqlite.org/">SQLite</a>。</p>
</li>
</ul>
<blockquote>
<p>如果你正在开发一个小项目或不打算在生产环境中部署的东西，SQLite 通常是最好的选择，因为它不需要运行一个单独的服务器。然而，SQLite 与其他数据库有许多不同之处，所以如果你正在开发一些实质性的东西，建议使用你计划在生产中使用的同一数据库进行开发。</p>
<p>除了官方支持的数据库，还有 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/databases/#third-party-notes">第三方提供的后端</a> 允许你在 Django 中使用其他数据库。</p>
</blockquote>
<ul>
<li><p>除了数据库后端，你还要确保安装了 Python 数据库绑定。</p>
<ul>
<li><p>如果你正在使用 MySQL 或 MariaDB，则需要一个像 <code>mysqlclient</code> 一样的 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/databases/#mysql-db-api-drivers">DB API 驱动</a>。 </p>
<p>详细信息参见 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/databases/#mysql-notes">MySQL 后端注意事项</a>。</p>
</li>
<li><p>如果你正在使用 SQLite，则可能需要阅读 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/databases/#sqlite-notes">SQLite 后端笔记</a> 。</p>
</li>
</ul>
</li>
<li><p>操作数据库</p>
<ul>
<li><p>如果你打算使用 Django 的 <code>manage.py migrate</code> 命令为你的模型自动创建数据库表（首先安装 Django 并创建项目后），</p>
<p>你需要确保 Django 有权限在你使用的数据库中创建和修改表；</p>
</li>
<li><p>如果你打算手动创建表，你可以授予 Django <code>SELECT</code>、<code>INSERT</code>、<code>UPDATE</code> 和 <code>DELETE</code> 权限。</p>
<p>创建具有这些权限的数据库用户后，你将在项目的配置文件中指定详细信息，详细信息参见 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/settings/#std-setting-DATABASES"><code>DATABASES</code></a>。</p>
</li>
<li><p>如果你正在使用 Django 的 <a href="https://docs.djangoproject.com/zh-hans/4.2/topics/testing/">测试框架</a> 来测试数据库查询，Django 将需要创建测试数据库的权限。</p>
</li>
</ul>
</li>
</ul>
<h2 id="编写你的第一个-Django-应用"><a href="#编写你的第一个-Django-应用" class="headerlink" title="编写你的第一个 Django 应用"></a>编写你的第一个 Django 应用</h2><blockquote>
<p>操作前记得激活环境</p>
</blockquote>
<h4 id="0-0-激活环境"><a href="#0-0-激活环境" class="headerlink" title="0.0 激活环境"></a>0.0 激活环境</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">激活环境</span></span><br><span class="line">...\&gt; project-name\Scripts\activate.bat</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如若激活后，仍然报错说没有<code>Django</code>模块</p>
<p>那么：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; py -m pip install Django</span><br></pre></td></tr></table></figure>

<p>安装好，查看<code>django-admin --version</code>是否正常输出版本号。</p>
</blockquote>
<h2 id="第-1-部分"><a href="#第-1-部分" class="headerlink" title="第 1 部分"></a>第 1 部分</h2><blockquote>
<p>让我们通过示例来学习。</p>
<p>通过这个教程，我们将带着你创建一个基本的投票应用程序。</p>
<p>它将由两部分组成：</p>
<ul>
<li>一个让人们查看和投票的公共站点。</li>
<li>一个让你能添加、修改和删除投票的管理站点。</li>
</ul>
<blockquote>
<p>本教程是为Django 4.2 编写的，它支持 Python 3.8 及以后的版本。</p>
<p>我的版本号是：</p>
<ul>
<li>Django 4.2.1</li>
<li>Python 3.11.1</li>
</ul>
</blockquote>
</blockquote>
<h3 id="1-1-创建项目"><a href="#1-1-创建项目" class="headerlink" title="1.1 创建项目"></a>1.1 创建项目</h3><ul>
<li><p>如果这是你第一次使用 Django 的话，你需要一些初始化设置。</p>
<blockquote>
<p>也就是说，你需要用一些自动生成的代码配置一个 Django project —— 即一个 Django 项目实例需要的设置项集合，包括数据库配置、Django 配置和应用程序配置。</p>
</blockquote>
</li>
<li><p>打开命令行，<code>cd</code> 到一个你想放置你代码的目录，然后运行以下命令：</p>
<blockquote>
<p>我们可以放在与前面<code>project</code>文件夹的并行目录下。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; django-admin startproject mysite</span><br></pre></td></tr></table></figure>

<p>这行代码将会在当前目录下创建一个 <code>mysite</code> 目录。</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511143733355.png" alt="image-20230511143733355" style="zoom: 67%;" />

<blockquote>
<p>mysite结构：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysite/</span><br><span class="line">    manage.py</span><br><span class="line">    mysite/</span><br><span class="line">        __init__.py</span><br><span class="line">        settings.py</span><br><span class="line">        urls.py</span><br><span class="line">        asgi.py</span><br><span class="line">        wsgi.py</span><br></pre></td></tr></table></figure>

<p>这些目录和文件的用处是：</p>
<ul>
<li><p>最外层的 <code>mysite/</code> 根目录只是你项目的容器， 根目录名称对 Django 没有影响，你可以将它重命名为任何你喜欢的名称。</p>
</li>
<li><p><code>manage.py</code>: 一个让你用各种方式管理 Django 项目的命令行工具。</p>
<blockquote>
<p>你可以阅读 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/django-admin/">django-admin 和 manage.py</a> 获取所有 <code>manage.py</code> 的细节。</p>
</blockquote>
</li>
<li><p>里面一层的 <code>mysite/</code> 目录包含你的项目，它是一个纯 Python 包。</p>
<blockquote>
<p>它的名字就是当你引用它内部任何东西时需要用到的 Python 包名。 (比如 <code>mysite.urls</code>).</p>
</blockquote>
</li>
<li><p><code>mysite/__init__.py</code>：一个空文件，告诉 Python 这个目录应该被认为是一个 Python 包。</p>
<blockquote>
<p>如果你是 Python 初学者，阅读官方文档中的 <a href="https://docs.python.org/3/tutorial/modules.html#tut-packages">更多关于包的知识</a>。</p>
</blockquote>
</li>
<li><p><code>mysite/settings.py</code>：Django 项目的配置文件。</p>
<blockquote>
<p>如果你想知道这个文件是如何工作的，请查看 <a href="https://docs.djangoproject.com/zh-hans/4.2/topics/settings/">Django 配置</a> 了解细节。</p>
</blockquote>
</li>
<li><p><code>mysite/urls.py</code>：Django 项目的 URL 声明，就像你网站的“目录”。</p>
<blockquote>
<p>阅读 <a href="https://docs.djangoproject.com/zh-hans/4.2/topics/http/urls/">URL调度器</a> 文档来获取更多关于 URL 的内容。</p>
</blockquote>
</li>
<li><p><code>mysite/asgi.py</code>：作为你的项目的运行在 ASGI 兼容的 Web 服务器上的入口。</p>
<blockquote>
<p>阅读 <a href="https://docs.djangoproject.com/zh-hans/4.2/howto/deployment/asgi/">如何使用 ASGI 来部署</a> 了解更多细节。</p>
</blockquote>
</li>
<li><p><code>mysite/wsgi.py</code>：作为你的项目的运行在 WSGI 兼容的Web服务器上的入口。</p>
<blockquote>
<p>阅读 <a href="https://docs.djangoproject.com/zh-hans/4.2/howto/deployment/wsgi/">如何使用 WSGI 进行部署</a> 了解更多细节。</p>
</blockquote>
</li>
</ul>
</blockquote>
</li>
</ul>
<h3 id="1-2-用于开发的简易服务器"><a href="#1-2-用于开发的简易服务器" class="headerlink" title="1.2 用于开发的简易服务器"></a>1.2 用于开发的简易服务器</h3><ul>
<li><p>让我们来确认一下你的 Django 项目是否真的创建成功了。</p>
<p>如果你的当前目录不是外层的 <code>mysite</code> 目录的话，请切换到此目录，然后运行下面的命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">记得先<span class="built_in">cd</span> mysite</span></span><br><span class="line">...\&gt; py manage.py runserver</span><br></pre></td></tr></table></figure>

<p>你应该会看到如下输出：</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511144922199.png" alt="image-20230511144922199" style="zoom: 50%;" />

<blockquote>
<p>忽略有关未应用最新数据库迁移的警告，稍后我们处理数据库。</p>
</blockquote>
</li>
<li><p>你已经启动了 Django 开发服务器，这是一个用纯 Python 编写的轻量级网络服务器。</p>
<blockquote>
<p>我们在 Django 中包含了这个服务器，所以你可以快速开发，而不需要处理配置生产服务器的问题</p>
<p> 比如 Apache – 直到你准备好用于生产。</p>
<blockquote>
<p>但是，<strong>千万不要</strong> 将这个服务器用于和生产环境相关的任何地方。这个服务器只是为了开发而设计的。</p>
<p>（我们在网络框架方面是专家，在网络服务器方面并不是。）</p>
</blockquote>
</blockquote>
</li>
<li><p>服务器现在正在运行，通过浏览器访问 <code>http://127.0.0.1:8000/ </code>。</p>
<p>你将看到一个“祝贺”页面，有一只火箭正在发射。你成功了！</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511145011477.png" alt="image-20230511145011477" style="zoom:50%;" /></li>
</ul>
<blockquote>
<p>一些问题：</p>
<ul>
<li><p>更换端口</p>
<p>默认情况下，<code>runserver</code> 命令会将服务器设置为监听本机内部 IP 的 8000 端口。</p>
<p>如果你想更换服务器的监听端口，请使用命令行参数。</p>
<p>举个例子，下面的命令会使服务器监听 8080 端口：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; py manage.py runserver 8080</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果你想要修改服务器监听的IP，在端口之前输入新的。</p>
<p>比如，为了监听所有服务器的公开IP（这你运行 Vagrant 或想要向网络上的其它电脑展示你的成果时很有用），</p>
<p>使用：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; py manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure>

<p>关于这个简易服务器的完整信息可以在 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/django-admin/#django-admin-runserver">runserver</a> 文档中找到。</p>
</li>
<li><p>会自动重新加载的服务器 <code>runserver</code></p>
<p>用于开发的服务器在需要的情况下会对每一次的访问请求重新载入一遍 Python 代码。</p>
<p>所以你不需要为了让修改的代码生效而频繁的重新启动服务器。</p>
<blockquote>
<p>然而，一些动作，比如添加新文件，将不会触发自动重新加载，这时你得自己手动重启服务器。</p>
</blockquote>
</li>
</ul>
</blockquote>
<h3 id="1-3-创建投票应用"><a href="#1-3-创建投票应用" class="headerlink" title="1.3 创建投票应用"></a>1.3 创建投票应用</h3><blockquote>
<p>现在你的开发环境——这个“项目” ——已经配置好了，你可以开始干活了。</p>
</blockquote>
<ul>
<li><p>在 Django 中，每一个应用都是一个 Python 包，并且遵循着相同的约定。</p>
<p>Django 自带一个工具，可以帮你生成应用的基础目录结构，这样你就能专心写代码，而不是创建目录了。</p>
<blockquote>
<ul>
<li>项目和应用有什么区别？<ul>
<li>应用是一个专门做某件事的网络应用程序——比如博客系统，或者公共记录的数据库，或者小型的投票程序。</li>
<li>项目则是一个网站使用的配置和应用的集合。项目可以包含很多个应用。应用可以被很多个项目使用。</li>
</ul>
</li>
</ul>
</blockquote>
</li>
<li><p>你的应用可以存放在任何 Python 路径 中定义的路径。</p>
<p>在这个教程中，我们将在你的 <code>manage.py</code> 同级目录下创建投票应用。</p>
<blockquote>
<p>这样它就可以作为顶级模块导入，而不是 <code>mysite</code> 的子模块。</p>
</blockquote>
<p>请确定你现在处于 <code>manage.py</code> 所在的目录（即外层的mysite目录）下，然后运行这行命令来创建一个应用：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个名叫polls 的应用</span></span><br><span class="line">...\&gt; py manage.py startapp polls</span><br></pre></td></tr></table></figure>

<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511150105443.png" alt="image-20230511150105443" style="zoom: 67%;" />

<p>polls 文件的目录结构：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">polls/</span><br><span class="line">    __init__.py</span><br><span class="line">    admin.py</span><br><span class="line">    apps.py</span><br><span class="line">    migrations/</span><br><span class="line">        __init__.py</span><br><span class="line">    models.py</span><br><span class="line">    tests.py</span><br><span class="line">    views.py</span><br></pre></td></tr></table></figure></blockquote>
</li>
</ul>
<h3 id="1-4-编写第一个视图"><a href="#1-4-编写第一个视图" class="headerlink" title="1.4 编写第一个视图"></a>1.4 编写第一个视图</h3><blockquote>
<p>让我们开始编写第一个视图吧。</p>
</blockquote>
<ul>
<li><p>打开 <code>polls/views.py</code>，把下面这些 Python 代码输入进去：</p>
<p><code>polls/views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Hello, world. You&#x27;re at the polls index.&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>这是 Django 中最简单的视图。</p>
<p>如果想看见效果，我们需要将一个 URL 映射到它——这就是我们需要 URLconf 的原因了。</p>
</li>
<li><p>就在<code>polls</code>目录下，新建一个<code>urls.py</code>文件：</p>
<p><code>polls/urls.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;&quot;</span>, views.index, name=<span class="string">&quot;index&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>下一步是要在根 URLconf 文件中指定我们创建的 <code>polls.urls</code> 模块。</p>
<p>在 <code>mysite/mysite/urls.py</code> 文件的 <code>urlpatterns</code> 列表里插入一个 <code>include()</code>， 如下：</p>
<blockquote>
<p>注意：改了两处：</p>
<ul>
<li>import include</li>
<li>path(…)</li>
</ul>
</blockquote>
<p><code>mysite/mysite/urls.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;polls/&quot;</span>, include(<span class="string">&quot;polls.urls&quot;</span>)),</span><br><span class="line">    path(<span class="string">&quot;admin/&quot;</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><p>函数 <code>include()</code>允许引用其它 URLconfs。</p>
<p>每当 Django 遇到 <code>include()</code> 时，</p>
<p>它会截断与此项匹配的 URL 的部分，并将剩余的字符串发送到 URLconf 以供进一步处理。</p>
</li>
</ul>
<blockquote>
<p>我们设计<code>include()</code>的理念是使其可以即插即用。</p>
<p>因为投票应用有它自己的 URLconf( <code>polls/urls.py</code> )，他们能够被放在 “&#x2F;polls&#x2F;“ ， “&#x2F;fun_polls&#x2F;“ ，”&#x2F;content&#x2F;polls&#x2F;“，或者其他任何路径下，这个应用都能够正常工作。</p>
</blockquote>
<ul>
<li><p>何时使用 <code>include()</code></p>
<p>当包括其它 URL 模式时你应该总是使用 <code>include()</code> ， <code>admin.site.urls</code> 是唯一例外。</p>
</li>
</ul>
</blockquote>
</li>
<li><p>你现在把 <code>index</code> 视图添加进了 URLconf。通过以下命令验证是否正常工作：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; py manage.py runserver</span><br></pre></td></tr></table></figure>

<p>用你的浏览器访问 <code>http://localhost:8000/polls/</code>，</p>
<p>你应该能够看见 “<em>Hello, world. You’re at the polls index.</em>“ ，这是你在 <code>index</code> 视图中定义的。</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511152225834.png" alt="image-20230511152225834" style="zoom: 67%;" />

<blockquote>
<p>没有找到页面?（你可能掉了<code>/polls/</code>）</p>
<p>如果你在这里得到了一个错误页面，</p>
<p>检查一下你是不是正访问着<code>http://localhost:8000/polls/</code></p>
<p> 而不应该是 <code>http://localhost:8000/</code>。</p>
</blockquote>
</li>
</ul>
<h4 id="关于-path-函数"><a href="#关于-path-函数" class="headerlink" title="关于 path 函数"></a>关于 path 函数</h4><ul>
<li><p>函数 <code>path()</code>具有四个参数，两个必须参数：<code>route</code> 和 <code>view</code>，两个可选参数：<code>kwargs</code> 和 <code>name</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path(route,view,[kwargs],[name])</span><br></pre></td></tr></table></figure>

<ul>
<li><code>route</code></li>
</ul>
<p>  一个匹配 URL 的准则（类似正则表达式）</p>
<blockquote>
<p>当 Django 响应一个请求时，它会从 <code>urlpatterns</code> 的第一项开始，按顺序依次匹配列表中的项，直到找到匹配的项。</p>
<blockquote>
<p>这些准则不会匹配 GET 和 POST 参数或域名。例如，URLconf 在处理请求 <code>https://www.example.com/myapp/</code> 时，它会尝试匹配 <code>myapp/</code> 。处理请求 <code>https://www.example.com/myapp/?page=3</code> 时，也只会尝试匹配 <code>myapp/</code>。</p>
</blockquote>
</blockquote>
<ul>
<li><p><code>view</code></p>
<p>调用视图</p>
<blockquote>
<p>当 Django 找到了一个匹配的准则，就会调用这个特定的视图函数，</p>
<p>并传入一个 <code>HttpRequest</code>对象作为第一个参数，被“捕获”的参数以关键字参数的形式传入。</p>
<p>稍后，我们会给出一个例子。</p>
</blockquote>
</li>
<li><p><code>kwargs</code></p>
</li>
</ul>
<blockquote>
<p>任意个关键字参数可以作为一个字典传递给目标视图函数。本教程中不会使用这一特性。</p>
</blockquote>
<ul>
<li><p><code>name</code></p>
<blockquote>
<p>为你的 URL 取名能使你在 Django 的任意地方唯一地引用它，尤其是在模板中。这个有用的特性允许你只改一个文件就能全局地修改某个 URL 模式。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="第-2-部分"><a href="#第-2-部分" class="headerlink" title="第 2 部分"></a>第 2 部分</h2><blockquote>
<p>本教程从 教程1结束的地方开始。我们将设置数据库，创建第一个模型，并快速介绍 Django 自动生成的后台界面。</p>
</blockquote>
<h3 id="2-1-数据库配置"><a href="#2-1-数据库配置" class="headerlink" title="2.1 数据库配置"></a>2.1 数据库配置</h3><p>现在，打开 <code>mysite/settings.py</code> 。这是个包含了 Django 项目设置的 Python 模块。</p>
<blockquote>
<ul>
<li><p>通常，这个配置文件使用 SQLite 作为默认数据库。</p>
<p>如果你不熟悉数据库，或者只是想尝试下 Django，这是最简单的选择。</p>
<p>Python 内置 SQLite，所以你无需安装额外东西来使用它。</p>
<p>当你开始一个真正的项目时，你可能更倾向使用一个更具扩展性的数据库，例如 PostgreSQL，避免中途切换数据库这个令人头疼的问题。</p>
</li>
<li><p>如果你想使用其他数据库，你需要安装合适的 <a href="https://docs.djangoproject.com/zh-hans/4.2/topics/install/#database-installation">database bindings</a> ，然后改变设置文件中 <code>DATABASES</code> <code>&#39;default&#39;</code> 项目中的一些键值：</p>
<ul>
<li><code>ENGINE</code> – 可选值有 <code>&#39;django.db.backends.sqlite3&#39;</code>，<code>&#39;django.db.backends.postgresql&#39;</code>，<code>&#39;django.db.backends.mysql&#39;</code>，或 <code>&#39;django.db.backends.oracle&#39;</code>。其它 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/databases/#third-party-notes">可用后端</a>。</li>
<li><code>NAME</code> – 数据库的名称。如果你使用 SQLite，数据库将是你电脑上的一个文件，在这种情况下，<code>NAME</code>应该是此文件完整的绝对路径，包括文件名。默认值 <code>BASE_DIR / &#39;db.sqlite3&#39;</code> 将把数据库文件储存在项目的根目录。</li>
</ul>
<p>如果你不使用 SQLite，则必须添加一些额外设置，比如 <code>USER</code> 、 <code>PASSWORD</code>、 <code>HOST</code>等等。想了解更多数据库设置方面的内容，请看文档：<code>DATABASES</code>。</p>
<blockquote>
<p>SQLite 以外的其它数据库</p>
<p>如果你使用了 SQLite 以外的数据库，请确认在使用前已经创建了数据库。你可以通过在你的数据库交互式命令行中使用 “<code>CREATE DATABASE database_name;</code>“ 命令来完成这件事。</p>
<p>另外，还要确保该数据库用户中提供 <code>mysite/settings.py</code> 具有 “create database” 权限。这使得自动创建的 test database 能被以后的教程使用。</p>
<p>如果你使用 SQLite，那么你不需要在使用前做任何事——数据库会在需要的时候自动创建。</p>
</blockquote>
</li>
</ul>
</blockquote>
<ul>
<li><p>编辑 <code>mysite/settings.py</code> 文件前，先设置 <code>TIME_ZONE</code>为你自己时区。</p>
<blockquote>
<p>中华人民共和国：<code>PRC</code></p>
<p>People’s Republic of China</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511160142502.png" alt="image-20230511160142502" style="zoom:67%;" /> 
</blockquote>
</li>
<li><p>此外，关注一下文件头部的 <code>INSTALLED_APPS</code> 设置项。</p>
<blockquote>
<p>这里包括了会在你项目中启用的所有 Django 应用。应用能在多个项目中使用，你也可以打包并且发布应用，让别人使用它们。</p>
<p>通常， <code>INSTALLED_APPS</code></p>
<ul>
<li><code>django.contrib.admin</code> – 管理员站点， 你很快就会使用它。</li>
<li><code>django.contrib.auth</code>– 认证授权系统。</li>
<li><code>django.contrib.contenttypes</code> – 内容类型框架。</li>
<li><code>django.contrib.sessions</code> – 会话框架。</li>
<li><code>django.contrib.messages</code>– 消息框架。</li>
<li><code>django.contrib.staticfiles</code> – 管理静态文件的框架。</li>
</ul>
<p>这些应用被默认启用是为了给常规项目提供方便。</p>
</blockquote>
<p>默认开启的某些应用需要至少一个数据表，所以，在使用他们之前需要在数据库中创建一些表。请执行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; py manage.py migrate</span><br></pre></td></tr></table></figure>

<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511161637443.png" alt="image-20230511161637443" style="zoom:67%;" /> 

<p>这个 <code>migrate</code>命令查看 <code>INSTALLED_APPS</code> 配置，并根据 <code>mysite/settings.py</code> 文件中的数据库配置和随应用提供的数据库迁移文件（我们将在后面介绍这些），创建任何必要的数据库表。</p>
<p>你会看到它应用的每一个迁移都有一个消息。</p>
<p>如果你有兴趣，运行你的数据库的命令行客户端，输入 <code>\dt</code> （PostgreSQL）， <code>SHOW TABLES;</code> （MariaDB，MySQL）， <code>.tables</code> （SQLite）或 <code>SELECT TABLE_NAME FROM USER_TABLES;</code> （Oracle）来显示 Django 创建的表。</p>
<blockquote>
<p>写给极简主义者</p>
<p>就像之前说的，为了方便大多数项目，我们默认激活了一些应用，但并不是每个人都需要它们。如果你不需要某个或某些应用，你可以在运行 <code>migrate</code>前毫无顾虑地从 <code>INSTALLED_APPS</code> 里注释或者删除掉它们。 <code>migrate</code> 命令只会为在 <code>INSTALLED_APPS</code>里声明了的应用进行数据库迁移。</p>
</blockquote>
</blockquote>
</li>
</ul>
<h3 id="2-2-创建模型"><a href="#2-2-创建模型" class="headerlink" title="2.2 创建模型"></a>2.2 创建模型</h3><blockquote>
<p>在 Django 里写一个数据库驱动的 Web 应用的第一步是定义模型</p>
<p>也就是数据库结构设计和附加的其它元数据。</p>
<blockquote>
<p>设计哲学</p>
<p>一个模型就是单个定义你的数据的信息源。模型中包含了不可缺少的数据区域和你存储数据的行为。Django 遵循 <a href="https://docs.djangoproject.com/zh-hans/4.2/misc/design-philosophies/#dry">DRY 原则</a>。目的就是定义你的数据模型要在一位置上，而且自动从该位置推导一些事情。</p>
<p>来介绍一下迁移 - 举个例子，不像 Ruby On Rails，Django 的迁移代码是由你的模型文件自动生成的，它本质上是个历史记录，Django 可以用它来进行数据库的滚动更新，通过这种方式使其能够和当前的模型匹配。</p>
</blockquote>
</blockquote>
<ul>
<li><p>在这个投票应用中，需要创建两个模型：问题 <code>Question</code> 和选项 <code>Choice</code>。</p>
<ul>
<li><code>Question</code> 模型包括问题描述和发布时间。</li>
<li><code>Choice</code> 模型有两个字段，选项描述和当前得票数。</li>
</ul>
<p>每个选项属于一个问题。</p>
<p>这些概念可以通过一个 Python 类来描述。按照下面的例子来编辑 <code>polls/models.py</code> 文件：</p>
<p><code>polls/models.py</code> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Question</span>(models.Model):</span><br><span class="line">    question_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    pub_date = models.DateTimeField(<span class="string">&quot;date published&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Choice</span>(models.Model):</span><br><span class="line">    question = models.ForeignKey(Question, on_delete=models.CASCADE)</span><br><span class="line">    choice_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    votes = models.IntegerField(default=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>代码解释：</p>
<ul>
<li><p>每个模型被表示为 <code>django.db.models.Model</code> 类的子类。每个模型有许多类变量，它们都表示模型里的一个数据库字段。</p>
<blockquote>
<p>每个字段都是 <code>Field</code> 类的实例 - 比如，字符字段被表示为 <code>CharField</code>，日期时间字段被表示为 <code>DateTimeField</code>。这将告诉 Django 每个字段要处理的数据类型。</p>
</blockquote>
</li>
<li><p>每个 <code>Field</code> 类实例变量的名字（例如 <code>question_text</code> 或 <code>pub_date</code> ）也是字段名，所以最好使用对机器友好的格式。你将会在 Python 代码里使用它们，而数据库会将它们作为列名。</p>
<blockquote>
<p>你可以使用可选的选项来为 <code>Field</code> 定义一个人类可读的名字。这个功能在很多 Django 内部组成部分中都被使用了，而且作为文档的一部分。如果某个字段没有提供此名称，Django 将会使用对机器友好的名称，也就是变量名。</p>
<p>在上面的例子中，我们只为 <code>Question.pub_date</code> 定义了对人类友好的名字。对于模型内的其它字段，它们的机器友好名也会被作为人类友好名使用。</p>
</blockquote>
</li>
<li><p>定义某些 <code>Field</code>类实例需要参数。</p>
<blockquote>
<p>例如 <code>CharField</code> 需要一个 <code>max_length</code> 参数。这个参数的用处不止于用来定义数据库结构，也用于验证数据，我们稍后将会看到这方面的内容。</p>
</blockquote>
</li>
<li><p><code>Field</code>也能够接收多个可选参数；在上面的例子中：我们将 <code>votes</code> 的 <code>default</code> 也就是默认值，设为0。</p>
</li>
<li><p>注意在最后，我们使用 <code>ForeignKey</code>定义了一个关系。</p>
<blockquote>
<p>这将告诉 Django，每个 <code>Choice</code> 对象都关联到一个 <code>Question</code> 对象。Django 支持所有常用的数据库关系：多对一、多对多和一对一。</p>
</blockquote>
</li>
</ul>
</blockquote>
</li>
</ul>
<h3 id="2-3-激活模型"><a href="#2-3-激活模型" class="headerlink" title="2.3 激活模型"></a>2.3 激活模型</h3><blockquote>
<p>上面的一小段用于创建模型的代码给了 Django 很多信息，通过这些信息，Django 可以：</p>
<ul>
<li>为这个应用创建数据库 schema（生成 <code>CREATE TABLE</code> 语句）。</li>
<li>创建可以与 <code>Question</code> 和 <code>Choice</code> 对象进行交互的 Python 数据库 API。</li>
</ul>
<p>但是首先得把 <code>polls</code> 应用安装到我们的项目里。</p>
<blockquote>
<p>设计哲学</p>
<p>Django 应用是“可插拔”的。你可以在多个项目中使用同一个应用。除此之外，你还可以发布自己的应用，因为它们并不会被绑定到当前安装的 Django 上。</p>
</blockquote>
</blockquote>
<ul>
<li><p>为了在我们的工程中包含这个应用，我们需要在配置类 <code>INSTALLED_APPS</code> 中添加设置。</p>
<blockquote>
<p>因为 <code>PollsConfig</code> 类写在文件 <code>polls/apps.py</code> 中，所以它的点式路径是 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;polls.apps.PollsConfig&#x27;</span></span><br></pre></td></tr></table></figure>

<p>在文件 <code>mysite/settings.py</code> 中 <code>INSTALLED_APPS</code>子项添加点式路径后，它看起来像这样：</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511163554111.png" alt="image-20230511163554111" style="zoom:67%;" /> 
</blockquote>
</li>
<li><p>现在你的 Django 项目会包含 <code>polls</code> 应用。接着运行下面的命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; py manage.py makemigrations polls</span><br></pre></td></tr></table></figure>

<blockquote>
<p>你将会看到类似于下面这样的输出：</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511163706521.png" alt="image-20230511163706521" style="zoom: 67%;" /> 

<ul>
<li><p>通过运行 <code>makemigrations</code> 命令，Django 会检测你对模型文件的修改（在这种情况下，你已经取得了新的），并且把修改的部分储存为一次 <em>迁移</em>。</p>
<blockquote>
<ul>
<li><p><strong>迁移</strong>是 Django 对于模型定义（也就是你的数据库结构）的变化的储存形式</p>
<p>它们其实也只是一些你磁盘上的文件。如果你想的话，你可以阅读一下你模型的迁移数据，它被储存在 <code>polls/migrations/0001_initial.py</code> 里。别担心，你不需要每次都阅读迁移文件，但是它们被设计成人类可读的形式，这是为了便于你手动调整 Django 的修改方式。</p>
</li>
</ul>
</blockquote>
</li>
</ul>
</blockquote>
</li>
<li><p>Django 有一个自动执行数据库迁移并同步管理你的数据库结构的命令 ，这个命令是 <code>migrate</code>。</p>
<blockquote>
<p>我们马上就会接触它 - 但是首先，让我们看看迁移命令会执行哪些 SQL 语句。</p>
<p><code>sqlmigrate</code> 命令接收一个迁移的名称，然后返回对应的 SQL：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; py manage.py sqlmigrate polls 0001</span><br></pre></td></tr></table></figure>

<p>你将会看到类似下面这样的输出：</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511164322675.png" alt="image-20230511164322675" style="zoom: 67%;" />

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">BEGIN;</span><br><span class="line">--</span><br><span class="line">-- Create model Question</span><br><span class="line">--</span><br><span class="line">CREATE TABLE &quot;polls_question&quot; (</span><br><span class="line">    &quot;id&quot; bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,</span><br><span class="line">    &quot;question_text&quot; varchar(200) NOT NULL,</span><br><span class="line">    &quot;pub_date&quot; timestamp with time zone NOT NULL</span><br><span class="line">);</span><br><span class="line">--</span><br><span class="line">-- Create model Choice</span><br><span class="line">--</span><br><span class="line">CREATE TABLE &quot;polls_choice&quot; (</span><br><span class="line">    &quot;id&quot; bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,</span><br><span class="line">    &quot;choice_text&quot; varchar(200) NOT NULL,</span><br><span class="line">    &quot;votes&quot; integer NOT NULL,</span><br><span class="line">    &quot;question_id&quot; bigint NOT NULL</span><br><span class="line">);</span><br><span class="line">ALTER TABLE &quot;polls_choice&quot;</span><br><span class="line">  ADD CONSTRAINT &quot;polls_choice_question_id_c5b4b260_fk_polls_question_id&quot;</span><br><span class="line">    FOREIGN KEY (&quot;question_id&quot;)</span><br><span class="line">    REFERENCES &quot;polls_question&quot; (&quot;id&quot;)</span><br><span class="line">    DEFERRABLE INITIALLY DEFERRED;</span><br><span class="line">CREATE INDEX &quot;polls_choice_question_id_c5b4b260&quot; ON &quot;polls_choice&quot; (&quot;question_id&quot;);</span><br><span class="line"></span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure>

<p>请注意以下几点：</p>
<ul>
<li>输出的内容和你使用的数据库有关，上面的输出示例使用的是 PostgreSQL。</li>
<li>数据库的表名是由应用名(<code>polls</code>)和模型名的小写形式( <code>question</code> 和 <code>choice</code>)连接而来。（如果需要，你可以自定义此行为。）</li>
<li>主键(IDs)会被自动创建。(当然，你也可以自定义。)</li>
<li>默认的，Django 会在外键字段名后追加字符串 <code>&quot;_id&quot;</code> 。（同样，这也可以自定义。）</li>
<li>外键关系由 <code>FOREIGN KEY</code> 生成。你不用关心 <code>DEFERRABLE</code> 部分，它只是告诉 PostgreSQL，请在事务全都执行完之后再创建外键关系。</li>
<li>它是为你正在使用的数据库定制的，因此特定于数据库的字段类型，例如“auto_increment”（MySQL）、“bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY”（PostgreSQL）或“integer primary key autoincrement” &#96;&#96; (SQLite) 会自动为您处理。 字段名称的引用也是如此——例如，使用双引号或单引号。</li>
<li>这个 <code>sqlmigrate</code>命令并没有真正在你的数据库中的执行迁移 - 相反，它只是把命令输出到屏幕上，让你看看 Django 认为需要执行哪些 SQL 语句。这在你想看看 Django 到底准备做什么，或者当你是数据库管理员，需要写脚本来批量处理数据库时会很有用。</li>
</ul>
<p>如果你感兴趣，你也可以试试运行 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python manage.py check</span><br></pre></td></tr></table></figure>

<p>这个命令帮助你检查项目中的问题，并且在检查过程中不会对数据库进行任何操作。</p>
</blockquote>
</li>
<li><p>现在，再次运行 <code>migrate</code> 命令，在数据库里创建新定义的模型的数据表：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; py manage.py migrate</span><br></pre></td></tr></table></figure>

<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511164953600.png" alt="image-20230511164953600" style="zoom:67%;" /> 

<p>这个 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/django-admin/#django-admin-migrate"><code>migrate</code></a> 命令选中所有还没有执行过的迁移（Django 通过在数据库中创建一个特殊的表 <code>django_migrations</code> 来跟踪执行过哪些迁移）并应用在数据库上 - 也就是将你对模型的更改同步到数据库结构上。</p>
<blockquote>
<p>迁移是非常强大的功能，它能让你在开发过程中持续的改变数据库结构而不需要重新删除和创建表 - 它专注于使数据库平滑升级而不会丢失数据。</p>
</blockquote>
<p>我们会在后面的教程中更加深入的学习这部分内容，</p>
<p>现在，你只需要记住，&#x3D;&#x3D;改变模型需要这三步&#x3D;&#x3D;：</p>
<ul>
<li>编辑 <code>models.py</code> 文件，改变模型。</li>
<li>运行 <code>python manage.py makemigrations</code> 为模型的改变生成迁移文件。</li>
<li>运行 <code>python manage.py migrate</code>来应用数据库迁移。</li>
</ul>
<blockquote>
<p>数据库迁移被分解成生成和应用两个命令是为了让你能够在代码控制系统上提交迁移数据并使其能在多个应用里使用；这不仅仅会让开发更加简单，也给别的开发者和生产环境中的使用带来方便。</p>
<p>通过阅读文档 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/django-admin/">Django 后台文档</a> ，你可以获得关于 <code>manage.py</code> 工具的更多信息。</p>
</blockquote>
</blockquote>
</li>
</ul>
<h3 id="2-4-初试-API"><a href="#2-4-初试-API" class="headerlink" title="2.4 初试 API"></a>2.4 初试 API</h3><blockquote>
<p>现在让我们进入交互式 Python 命令行，尝试一下 Django 为你创建的各种 API。</p>
</blockquote>
<ul>
<li><p>通过以下命令打开 Python 命令行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; py manage.py shell</span><br></pre></td></tr></table></figure>

<blockquote>
<p>我们使用这个命令而不是简单的使用“python”是因为 <code>manage.py</code> 会设置 <code>DJANGO_SETTINGS_MODULE</code>环境变量，</p>
<p>这个变量会让 Django 根据 <code>mysite/settings.py</code> 文件来设置 Python 包的导入路径。</p>
</blockquote>
<p>进入Shell交互命令行，能做什么？</p>
<ul>
<li>操作models （Django 已经为你创建了对应的API ）</li>
</ul>
<blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from polls.models import Choice, Question  <span class="comment"># Import the model classes we just wrote.</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">No questions are <span class="keyword">in</span> the system yet.</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Question.objects.all()</span></span><br><span class="line">&lt;QuerySet []&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Create a new Question.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Support <span class="keyword">for</span> time zones is enabled <span class="keyword">in</span> the default settings file, so</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Django expects a datetime with tzinfo <span class="keyword">for</span> pub_date. Use timezone.now()</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">instead of datetime.datetime.now() and it will <span class="keyword">do</span> the right thing.</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from django.utils import timezone</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; q = Question(question_text=<span class="string">&quot;What&#x27;s new?&quot;</span>, pub_date=timezone.now())</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Save the object into the database. You have to call save() explicitly.</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; q.save()</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Now it has an ID.</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; q.id</span></span><br><span class="line">1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Access model field values via Python attributes.</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; q.question_text</span></span><br><span class="line">&quot;What&#x27;s new?&quot;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; q.pub_date</span></span><br><span class="line">datetime.datetime(2012, 2, 26, 13, 0, 0, 775217, tzinfo=datetime.timezone.utc)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Change values by changing the attributes, <span class="keyword">then</span> calling save().</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; q.question_text = <span class="string">&quot;What&#x27;s up?&quot;</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; q.save()</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">objects.all() displays all the questions <span class="keyword">in</span> the database.</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Question.objects.all()</span></span><br><span class="line">&lt;QuerySet [&lt;Question: Question object (1)&gt;]&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>添加<code>str</code>方法</p>
<blockquote>
<p><code>&lt;Question: Question object (1)&gt;</code> 对于我们了解这个对象的细节没什么帮助。</p>
<p>让我们通过编辑 <code>Question</code> 模型的代码（位于 <code>polls/models.py</code> 中）来修复这个问题。</p>
<p>给 <code>Question</code> 和 <code>Choice</code> 增加 <code>__str__()</code>方法。</p>
<p><code>polls/models.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Question</span>(models.Model):</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.question_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Choice</span>(models.Model):</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.choice_text</span><br></pre></td></tr></table></figure>

<p>给模型增加 <code>__str__()</code>方法是很重要的，这不仅仅能给你在命令行里使用带来方便，Django 自动生成的 admin 里也使用这个方法来表示对象。</p>
<p>让我们再为此模型添加一个自定义方法：</p>
<p><code>polls/models.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Question</span>(models.Model):</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">was_published_recently</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.pub_date &gt;= timezone.now() - datetime.timedelta(days=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511185059293.png" alt="image-20230511185059293" style="zoom:67%;" /> 

<ul>
<li><p>新加入的 <code>import datetime</code> 和 <code>from django.utils import timezone</code> </p>
<p>分别导入了 Python 的标准 <a href="https://docs.python.org/3/library/datetime.html#module-datetime"><code>datetime</code></a> 模块和 Django 中和时区相关的 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/utils/#module-django.utils.timezone"><code>django.utils.timezone</code></a> 工具模块。</p>
<blockquote>
<p>如果你不太熟悉 Python 中的时区处理，看看 <a href="https://docs.djangoproject.com/zh-hans/4.2/topics/i18n/timezones/">时区支持文档</a> 吧。</p>
</blockquote>
</li>
</ul>
</blockquote>
</li>
<li><p>再次操作Shell</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from polls.models import Choice, Question</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Make sure our __str__() addition worked.</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Question.objects.all()</span></span><br><span class="line">&lt;QuerySet [&lt;Question: What&#x27;s up?&gt;]&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Django provides a rich database lookup API that<span class="string">&#x27;s entirely driven by</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">keyword arguments.</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="string">&gt;&gt; Question.objects.filter(id=1)</span></span></span><br><span class="line">&lt;QuerySet [&lt;Question: What&#x27;s up?&gt;]&gt;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="string">&gt;&gt; Question.objects.filter(question_text__startswith=&quot;What&quot;)</span></span></span><br><span class="line">&lt;QuerySet [&lt;Question: What&#x27;s up?&gt;]&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Get the question that was published this year.</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="string">&gt;&gt; from django.utils import timezone</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="string">&gt;&gt; current_year = timezone.now().year</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="string">&gt;&gt; Question.objects.get(pub_date__year=current_year)</span></span></span><br><span class="line">&lt;Question: What&#x27;s up?&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Request an ID that doesn&#x27;</span>t exist, this will raise an exception.</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Question.objects.get(<span class="built_in">id</span>=2)</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">    ...</span><br><span class="line">DoesNotExist: Question matching query does not exist.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Lookup by a primary key is the most common <span class="keyword">case</span>, so Django provides a</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">shortcut <span class="keyword">for</span> primary-key exact lookups.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The following is identical to Question.objects.get(<span class="built_in">id</span>=1).</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Question.objects.get(pk=1)</span></span><br><span class="line">&lt;Question: What&#x27;s up?&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Make sure our custom method worked.</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; q = Question.objects.get(pk=1)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; q.was_published_recently()</span></span><br><span class="line">True</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Give the Question a couple of Choices. The create call constructs a new</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Choice object, does the INSERT statement, adds the choice to the <span class="built_in">set</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">of available choices and returns the new Choice object. Django creates</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">a <span class="built_in">set</span> to hold the <span class="string">&quot;other side&quot;</span> of a ForeignKey relation</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(e.g. a question<span class="string">&#x27;s choice) which can be accessed via the API.</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="string">&gt;&gt; q = Question.objects.get(pk=1)</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Display any choices from the related object set -- none so far.</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="string">&gt;&gt; q.choice_set.all()</span></span></span><br><span class="line">&lt;QuerySet []&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Create three choices.</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="string">&gt;&gt; q.choice_set.create(choice_text=&quot;Not much&quot;, votes=0)</span></span></span><br><span class="line">&lt;Choice: Not much&gt;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="string">&gt;&gt; q.choice_set.create(choice_text=&quot;The sky&quot;, votes=0)</span></span></span><br><span class="line">&lt;Choice: The sky&gt;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="string">&gt;&gt; c = q.choice_set.create(choice_text=&quot;Just hacking again&quot;, votes=0)</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Choice objects have API access to their related Question objects.</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="string">&gt;&gt; c.question</span></span></span><br><span class="line">&lt;Question: What&#x27;s up?&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">And vice versa: Question objects get access to Choice objects.</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="string">&gt;&gt; q.choice_set.all()</span></span></span><br><span class="line">&lt;QuerySet [&lt;Choice: Not much&gt;, &lt;Choice: The sky&gt;, &lt;Choice: Just hacking again&gt;]&gt;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="string">&gt;&gt; q.choice_set.count()</span></span></span><br><span class="line">3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">The API automatically follows relationships as far as you need.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Use double underscores(双下划线) to separate relationships.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">This works as many levels deep as you want; there&#x27;</span>s no <span class="built_in">limit</span>.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Find all Choices <span class="keyword">for</span> any question whose pub_date is <span class="keyword">in</span> this year</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(reusing the <span class="string">&#x27;current_year&#x27;</span> variable we created above).</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Choice.objects.filter(question__pub_date__year=current_year)</span></span><br><span class="line">&lt;QuerySet [&lt;Choice: Not much&gt;, &lt;Choice: The sky&gt;, &lt;Choice: Just hacking again&gt;]&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Let<span class="string">&#x27;s delete one of the choices. Use delete() for that.</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="string">&gt;&gt; c = q.choice_set.filter(choice_text__startswith=&quot;Just hacking&quot;)</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="string">&gt;&gt; c.delete()</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><p>阅读 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/models/relations/">访问关系对象</a> 文档可以获取关于数据库关系的更多内容。</p>
</li>
<li><p>想知道关于双下划线的更多用法，参见 <a href="https://docs.djangoproject.com/zh-hans/4.2/topics/db/queries/#field-lookups-intro">查找字段</a> 文档。</p>
</li>
<li><p>数据库 API 的所有细节可以在 <a href="https://docs.djangoproject.com/zh-hans/4.2/topics/db/queries/">数据库 API 参考</a> 文档中找到。</p>
</li>
</ul>
</blockquote>
</li>
</ul>
<h3 id="2-5-介绍-Django-管理页面"><a href="#2-5-介绍-Django-管理页面" class="headerlink" title="2.5 介绍 Django 管理页面"></a>2.5 介绍 Django 管理页面</h3><blockquote>
<p>设计哲学</p>
<p>为你的员工或客户生成一个用户添加，修改和删除内容的后台是一项缺乏创造性和乏味的工作。因此，Django 全自动地根据模型创建后台界面。</p>
<p>Django 产生于一个公众页面和内容发布者页面完全分离的新闻类站点的开发过程中。站点管理人员使用管理系统来添加新闻、事件和体育时讯等，这些添加的内容被显示在公众页面上。Django 通过为站点管理人员创建统一的内容编辑界面解决了这个问题。</p>
<p>管理界面不是为了网站的访问者，而是为管理者准备的。</p>
</blockquote>
<h4 id="创建一个管理员账号"><a href="#创建一个管理员账号" class="headerlink" title="创建一个管理员账号"></a>创建一个管理员账号</h4><ul>
<li><p>首先，我们得创建一个能登录管理页面的用户。请运行下面的命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; py manage.py createsuperuser</span><br></pre></td></tr></table></figure>

<p>键入你想要使用的用户名，然后按下回车键：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Username: admin</span><br></pre></td></tr></table></figure>

<p>然后提示你输入想要使用的邮件地址：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Email address: admin@example.com</span><br></pre></td></tr></table></figure>

<p>最后一步是输入密码。你会被要求输入两次密码，第二次的目的是为了确认第一次输入的确实是你想要的密码。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Password: **********</span><br><span class="line">Password (again): *********</span><br><span class="line">Superuser created successfully.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>我的密码使用是：admin0314</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511192431718.png" alt="image-20230511192431718" style="zoom:80%;" /></blockquote>
</li>
</ul>
<h4 id="启动开发服务器"><a href="#启动开发服务器" class="headerlink" title="启动开发服务器"></a>启动开发服务器</h4><ul>
<li><p>Django 的管理界面默认就是启用的。让我们启动开发服务器，看看它到底是什么样的。</p>
<p>如果开发服务器未启动，用以下命令启动它：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; py manage.py runserver</span><br></pre></td></tr></table></figure>
</li>
<li><p>现在，打开浏览器，转到你本地域名的 “&#x2F;admin&#x2F;” 目录， </p>
<p>比如 <code>http://127.0.0.1:8000/admin/ </code>。你应该会看见管理员登录界面：</p>
<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511192719714.png" alt="image-20230511192719714" style="zoom: 50%;" /> 

<blockquote>
<p>因为 <a href="https://docs.djangoproject.com/zh-hans/4.2/topics/i18n/translation/">翻译</a> 功能默认是开启的，如果你设置了 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/settings/#std-setting-LANGUAGE_CODE"><code>LANGUAGE_CODE</code></a>，登录界面将显示你设置的语言（如果 Django 有相应的翻译）。</p>
</blockquote>
</blockquote>
</li>
</ul>
<h4 id="进入管理站点页面"><a href="#进入管理站点页面" class="headerlink" title="进入管理站点页面"></a>进入管理站点页面</h4><ul>
<li><p>现在，试着使用你在上一步中创建的超级用户来登录。然后你将会看到 Django 管理页面的索引页：</p>
<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511192844441.png" alt="image-20230511192844441" style="zoom: 50%;" /> 
</blockquote>
<p>你将会看到几种可编辑的内容：组和用户。</p>
<p>它们是由 <code>django.contrib.auth</code>提供的，这是 Django 开发的认证框架。</p>
</li>
</ul>
<h4 id="向管理页面中加入投票应用"><a href="#向管理页面中加入投票应用" class="headerlink" title="向管理页面中加入投票应用"></a>向管理页面中加入投票应用</h4><blockquote>
<p>但是我们的投票应用在哪呢？它没在索引页面里显示。</p>
<p>只需要再做一件事：</p>
<p>我们得告诉管理，问题 <code>Question</code> 对象需要一个后台接口。</p>
</blockquote>
<ul>
<li><p>打开 <code>polls/admin.py</code> 文件，把它编辑成下面这样</p>
<p><code>polls/admin.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line">admin.site.register(Question)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="体验便捷的管理功能"><a href="#体验便捷的管理功能" class="headerlink" title="体验便捷的管理功能"></a>体验便捷的管理功能</h4><ul>
<li><p>现在我们向管理页面注册了问题 <code>Question</code> 类。</p>
<p>Django 知道它应该被显示在索引页里：</p>
<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511193227553.png" alt="image-20230511193227553" style="zoom:67%;" /> 
</blockquote>
</li>
<li><p>点击 “Questions” 。</p>
<blockquote>
<p>现在看到是问题 “Questions” 对象的列表 “change list” 。</p>
<p>这个界面会显示所有数据库里的问题 Question 对象，你可以选择一个来修改。</p>
<p>这里现在有我们在上一部分中创建的 “What’s up?” 问题。</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511193405499.png" alt="image-20230511193405499" style="zoom: 43%;" /> 
</blockquote>
</li>
<li><p>点击 “What’s up?” 来编辑这个问题（Question）对象：</p>
<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511193459916.png" alt="image-20230511193459916" style="zoom:43%;" /> 

<blockquote>
<p>注意事项：</p>
<ul>
<li>这个表单是从问题 <code>Question</code> 模型中自动生成的</li>
<li>不同的字段类型（日期时间字段 <code>DateTimeField</code> 、字符字段 <code>CharField</code>）会生成对应的 HTML 输入控件。每个类型的字段都知道它们该如何在管理页面里显示自己。</li>
<li>每个日期时间字段 <code>DateTimeField</code>都有 JavaScript 写的快捷按钮。日期有转到今天（Today）的快捷按钮和一个弹出式日历界面。时间有设为现在（Now）的快捷按钮和一个列出常用时间的方便的弹出式列表。</li>
</ul>
<p>页面的底部提供了几个选项：</p>
<ul>
<li>保存（Save） - 保存改变，然后返回对象列表。</li>
<li>保存并继续编辑（Save and continue editing） - 保存改变，然后重新载入当前对象的修改界面。</li>
<li>保存并新增（Save and add another） - 保存改变，然后添加一个新的空对象并载入修改界面。</li>
<li>删除（Delete） - 显示一个确认删除页面。</li>
</ul>
<p>如果显示的 “发布日期(Date Published)” 和你在 教程 1 里创建它们的时间不一致，这意味着你可能没有正确的设置 <code>TIME_ZONE</code>。改变设置，然后重新载入页面看看是否显示了正确的值。</p>
</blockquote>
</blockquote>
</li>
<li><p>编辑一下</p>
<p>通过点击 “今天(Today)” 和 “现在(Now)” 按钮改变 “发布日期(Date Published)”。</p>
<p>然后点击 “保存并继续编辑(Save and add another)”按钮。</p>
<p>然后点击右上角的 “历史(History)”按钮。</p>
<p>你会看到一个列出了所有通过 Django 管理页面对当前对象进行的改变的页面，其中列出了时间戳和进行修改操作的用户名：</p>
<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511193953423.png" alt="image-20230511193953423" style="zoom: 80%;" /> 
</blockquote>
</li>
<li><p>当你熟悉了数据库 API 之后，你就可以开始阅读 教程第 3 部分，</p>
<p>下一部分我们将会学习如何为投票应用添加更多视图。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>《Django》入门 Notes（下）</title>
    <url>/butterflyblog/2023/06/03/%E3%80%8ADjango%E3%80%8B%E5%85%A5%E9%97%A8%20Notes%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
    <content><![CDATA[<h1 id="《Django》入门-Notes（下）"><a href="#《Django》入门-Notes（下）" class="headerlink" title="《Django》入门 Notes（下）"></a>《Django》入门 Notes（下）</h1><p>@Seymour0314 来源官方文档<code>https://docs.djangoproject.com/zh-hans/4.2/intro/</code></p>
<blockquote>
<p>本文是Django 后端技术初级入门教程。</p>
<p>编程语言：Python</p>
</blockquote>
<h2 id="第-6-部分"><a href="#第-6-部分" class="headerlink" title="第 6 部分"></a>第 6 部分</h2><blockquote>
<ul>
<li><p>本教程从 教程第 5 部分结束的地方开始。</p>
<p>我们已经建立了一个经过测试的网络投票应用程序，现在我们将添加一个样式表和一个图像。</p>
</li>
<li><p>除了服务端生成的 HTML 以外，网络应用通常需要一些额外的文件——比如图片，脚本和样式表——来帮助渲染网络页面。</p>
<p>在 Django 中，我们把这些文件统称为“静态文件”。</p>
</li>
<li><p>对于小项目来说，这个问题没什么大不了的，因为你可以把这些静态文件随便放在哪，只要服务程序能够找到它们就行。然而在大项目——特别是由好几个应用组成的大项目——中，处理不同应用所需要的静态文件的工作就显得有点麻烦了。</p>
</li>
<li><p>这就是 <code>django.contrib.staticfiles</code> 存在的意义：</p>
<p>它将各个应用的静态文件（和一些你指明的目录里的文件）统一收集起来，</p>
<p>这样一来，在生产环境中，这些文件就会集中在一个便于分发的地方。</p>
</li>
</ul>
</blockquote>
<h3 id="6-1-自定义-应用-的界面和风格"><a href="#6-1-自定义-应用-的界面和风格" class="headerlink" title="6.1 自定义 应用 的界面和风格"></a>6.1 自定义 <em>应用</em> 的界面和风格</h3><ul>
<li><p>首先，在你的 <code>polls</code> 目录下创建一个名为 <code>static</code> 的目录。</p>
<blockquote>
<ul>
<li><p>Django 将在该目录下查找静态文件，这种方式和 Diango 在 <code>polls/templates/</code> 目录下查找 template 的方式类似。</p>
</li>
<li><p>Django 的 <code>STATICFILES_FINDERS</code> 设置包含了一系列的查找器，它们知道去哪里找到 static 文件。</p>
<ul>
<li><p><code>AppDirectoriesFinder</code> 是默认查找器中的一个，</p>
<p>它会在每个 <code>INSTALLED_APPS</code> 中指定的应用的子文件中寻找名称为 <code>static</code> 的特定文件夹，</p>
<p>就像我们在 <code>polls</code> 中刚创建的那个一样。管理后台采用相同的目录结构管理它的静态文件。</p>
</li>
</ul>
</li>
</ul>
</blockquote>
</li>
<li><p>在你刚创建的 <code>static</code> 文件夹中创建一个名为 <code>polls</code> 的文件夹，再在 <code>polls</code> 文件夹中创建一个名为 <code>style.css</code> 的文件。</p>
<blockquote>
<p>换句话说，你的样式表路径应是 <code>polls/static/polls/style.css</code>。</p>
<p>因为 <code>AppDirectoriesFinder</code> 的存在，</p>
<p>你可以在 Django 中以 <code>polls/style.css</code> 的形式引用此文件，类似你引用模板路径的方式。</p>
<blockquote>
<ul>
<li>静态文件命名空间</li>
</ul>
<p>虽然我们 <em>可以</em> 像管理模板文件一样，把 static 文件直接放入 <code>polls/static</code> （而不是创建另一个名为 <code>polls</code> 的子文件夹），不过这实际上是一个很蠢的做法。Django 只会使用第一个找到的静态文件。如果你在 <em>其它</em> 应用中有一个相同名字的静态文件，Django 将无法区分它们。我们需要指引 Django 选择正确的静态文件，而最好的方式就是把它们放入各自的 <em>命名空间</em> 。也就是把这些静态文件放入 <em>另一个</em> 与应用名相同的目录中。</p>
</blockquote>
</blockquote>
</li>
<li><p>将以下代码放入样式表：</p>
<p><code>polls/static/polls/style.css</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>下一步，在 对应的的文件头添加以下内容：</p>
<p><code>polls/templates/polls/index.html</code> </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% load static %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &#x27;polls/style.css&#x27; %&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>&#123;% static %&#125;</code> 模板标签会生成静态文件的绝对路径。</p>
<p>这就是你开发所需要做的所有事情了。</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512101159792.png" alt="image-20230512101159792" style="zoom:50%;" /> 
</blockquote>
</li>
<li><p>启动服务器(如果它正在运行中，重新启动一次):</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; py manage.py runserver</span><br></pre></td></tr></table></figure>

<p>重新载入 <code>http://localhost:8000/polls/</code> ，</p>
<p>你会发现有问题的链接是绿色的 （这是 Django 自己的问题标注方式），这意味着你追加的样式表起作用了。</p>
<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512101240072.png" alt="image-20230512101240072" style="zoom:80%;" /></blockquote>
</li>
</ul>
<h3 id="6-2-添加一个背景图"><a href="#6-2-添加一个背景图" class="headerlink" title="6.2 添加一个背景图"></a>6.2 添加一个背景图</h3><blockquote>
<p>接下来，我们将为图像创建一个子目录。</p>
</blockquote>
<ul>
<li><p>在 <code>polls/static/polls/</code> 目录中创建 <code>images</code> 子目录。 </p>
<blockquote>
<p>在此目录中，添加您想用作背景的任何图像文件。 </p>
</blockquote>
<p>出于本教程的目的，我们使用了一个名为“background.png”的文件，</p>
<p>它的完整路径为“polls&#x2F;static&#x2F;polls&#x2F;images&#x2F;background.png”。</p>
<blockquote>
<p>注意：我这里测试使用的是jpg格式！</p>
</blockquote>
</li>
<li><p>然后，在样式表中添加对图像的引用：</p>
<p><code>polls/static/polls/style.css</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: white <span class="built_in">url</span>(<span class="string">&quot;images/background.png&quot;</span>) no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>浏览器重载 <code>http://localhost:8000/polls/</code>，你将在屏幕的左上角见到这张背景图。</p>
<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512102107329.png" alt="image-20230512102107329" style="zoom:67%;" /> 
</blockquote>
<blockquote>
<p>警告</p>
<p><code>&#123;% static %&#125;</code> 模板标签在静态文件（例如样式表）中是不可用的，因为它们不是由 Django 生成的。</p>
<p>你应该始终使用 <strong>相对路径</strong> 在你的静态文件之间相互引用，</p>
<p>因为这样你可以更改 <code>STATIC_URL</code>（由 <code>static</code> 模板标签使用来生成 URL），而无需修改大量的静态文件。</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>这些只是 <strong>基础</strong> 。</p>
<p>更多关于设置和框架的资料，参考 <a href="https://docs.djangoproject.com/zh-hans/4.2/howto/static-files/">静态文件解惑</a> 和 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/contrib/staticfiles/">静态文件指南</a>。</p>
<p><a href="https://docs.djangoproject.com/zh-hans/4.2/howto/static-files/deployment/">部署静态文件</a> 介绍了如何在真实服务器上使用静态文件。</p>
<p>当你熟悉静态文件后，阅读 此教程的第 7 部分 来学习如何自定义 Django 自动生成后台网页的过程。</p>
</blockquote>
<h2 id="第-7-部分"><a href="#第-7-部分" class="headerlink" title="第 7 部分"></a>第 7 部分</h2><blockquote>
<p>本教程从 教程第 6 部分 结束的地方开始。</p>
<p>我们继续修改在线投票应用，这次我们专注于自定义我们在 教程第 2 部分初见过的 Django 自动生成后台的过程。</p>
</blockquote>
<h3 id="7-1-自定义后台表单"><a href="#7-1-自定义后台表单" class="headerlink" title="7.1 自定义后台表单"></a>7.1 自定义后台表单</h3><blockquote>
<p>通过 <code>admin.site.register(Question)</code> 注册 <code>Question</code> 模型，Django 能够构建一个默认的表单用于展示。</p>
<p>通常来说，你期望能自定义表单的外观和工作方式。你可以在注册模型时将这些设置告诉 Django。</p>
</blockquote>
<ul>
<li><p>让我们通过重排列表单上的字段来看看它是怎么工作的。</p>
<p>用以下内容替换 <code>admin.site.register(Question)</code>：</p>
<p><code>polls/admin.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QuestionAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    fields = [<span class="string">&quot;pub_date&quot;</span>, <span class="string">&quot;question_text&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">admin.site.register(Question, QuestionAdmin)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>更改对比：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512102642172.png" alt="image-20230512102642172" style="zoom:50%;" /> <img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512103023119.png" alt="image-20230512103023119" style="zoom:50%;" /> </p>
</blockquote>
</li>
<li><p>你需要遵循以下流程：</p>
<p>创建一个模型后台类，</p>
<p>接着将其作为第二个参数传给 <code>admin.site.register()</code> ——在你需要修改模型的后台管理选项时这么做。</p>
<p>以上修改使得 “Publication date” 字段显示在 “Question” 字段之前：</p>
<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512102844334.png" alt="image-20230512102844334" style="zoom: 43%;" /> 
</blockquote>
<p>这在只有两个字段时显得没啥卵用，</p>
<p>但对于拥有数十个字段的表单来说，为表单选择一个直观的排序方法就显得你的针很细了。</p>
<p>说到拥有数十个字段的表单，你可能更期望将表单分为几个字段集：</p>
<p><code>polls/admin.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QuestionAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    fieldsets = [</span><br><span class="line">        (<span class="literal">None</span>, &#123;<span class="string">&quot;fields&quot;</span>: [<span class="string">&quot;question_text&quot;</span>]&#125;),</span><br><span class="line">        (<span class="string">&quot;Date information&quot;</span>, &#123;<span class="string">&quot;fields&quot;</span>: [<span class="string">&quot;pub_date&quot;</span>]&#125;),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">admin.site.register(Question, QuestionAdmin)</span><br></pre></td></tr></table></figure>

<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512103111825.png" alt="image-20230512103111825" style="zoom:50%;" /> 
</blockquote>
<p><code>fieldsets</code>元组中的第一个元素是字段集的标题。以下是我们的表单现在的样子：</p>
<blockquote>
<p>效果：</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512103234752.png" alt="image-20230512103234752" style="zoom: 43%;" /></blockquote>
</li>
</ul>
<h3 id="7-2-添加关联的对象"><a href="#7-2-添加关联的对象" class="headerlink" title="7.2 添加关联的对象"></a>7.2 添加关联的对象</h3><ul>
<li><p>好了，现在我们有了投票的后台页。不过，一个 <code>Question</code> 有多个 <code>Choice</code>，但后台页却没有显示多个选项。</p>
<p>有两个方法可以解决这个问题。</p>
</li>
<li><p>（方法一）第一个就是仿照我们向后台注册 <code>Question</code> 一样注册 <code>Choice</code> ：</p>
<p><code>polls/admin.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Choice, Question</span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">admin.site.register(Choice)</span><br></pre></td></tr></table></figure>

<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512103532211.png" alt="image-20230512103532211" style="zoom:50%;" /> 
</blockquote>
<p>现在 “Choices” 在 Django 后台页中是一个可用的选项了。</p>
<p>“添加选项”的表单看起来像这样：</p>
<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512103605727.png" alt="image-20230512103605727" style="zoom:50%;" /> 

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512103628352.png" alt="image-20230512103628352" style="zoom:43%;" /> 
</blockquote>
<p>在这个表单中，”Question” 字段是一个包含数据库中所有投票的选择框。</p>
<p>Django 知道要将 <code>ForeignKey</code> 在后台中以选择框 <code>&lt;select&gt;</code> 的形式展示。</p>
<p>此时，我们只有一个投票。</p>
<blockquote>
<p>还请注意“问题”旁边的“添加另一个问题”链接。</p>
<p>每个与另一个具有<code>ForeignKey</code>关系的对象都可以免费获得此链接。</p>
<p>当你点击“添加另一个问题”时，你会看到一个带有“添加问题”表单的弹出窗口。如果你在该窗口中添加问题并点击“保存”，Django会将问题保存到数据库中，并将其动态添加为你正在查看的“添加选项”表单上的选定选项。</p>
</blockquote>
<p>不过，这是一种很低效地添加“选项”的方法。更好的办法是在你创建“投票”对象时直接添加好几个选项。让我们实现它。</p>
</li>
<li><p>（方法二）移除调用 <code>register()</code> 注册 <code>Choice</code> 模型的代码。</p>
<p>随后，像这样修改 <code>Question</code> 的注册代码：</p>
<p><code>polls/admin.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Choice, Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChoiceInline</span>(admin.StackedInline):</span><br><span class="line">    model = Choice</span><br><span class="line">    extra = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QuestionAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    fieldsets = [</span><br><span class="line">        (<span class="literal">None</span>, &#123;<span class="string">&quot;fields&quot;</span>: [<span class="string">&quot;question_text&quot;</span>]&#125;),</span><br><span class="line">        (<span class="string">&quot;Date information&quot;</span>, &#123;<span class="string">&quot;fields&quot;</span>: [<span class="string">&quot;pub_date&quot;</span>], <span class="string">&quot;classes&quot;</span>: [<span class="string">&quot;collapse&quot;</span>]&#125;),</span><br><span class="line">    ]</span><br><span class="line">    inlines = [ChoiceInline]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">admin.site.register(Question, QuestionAdmin)</span><br></pre></td></tr></table></figure>

<p>这会告诉 Django：“<code>Choice</code> 对象要在 <code>Question</code> 后台页面编辑。默认提供 3 个足够的选项字段。”</p>
<p>加载“添加投票”页面来看看它长啥样：</p>
<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512104313357.png" alt="image-20230512104313357" style="zoom:43%;" /> 
</blockquote>
<p>它看起来像这样：</p>
<p>有三个关联的选项插槽——由 <code>extra</code> 定义，且每次你返回任意已创建的对象的“修改”页面时，你会见到三个新的插槽。</p>
<p>在三个插槽的末端，你会看到一个“添加新选项”的按钮。</p>
<p>如果你单击它，一个新的插槽会被添加。</p>
<p>如果你想移除已有的插槽，可以点击插槽右上角的X。以下图片展示了一个已添加的插槽：</p>
<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512104421724.png" alt="image-20230512104421724" style="zoom:50%;" /> 
</blockquote>
</li>
<li><p>不过，仍然有点小问题。</p>
<p>它占据了大量的屏幕区域来显示所有关联的 <code>Choice</code> 对象的字段。</p>
<p>对于这个问题，Django 提供了一种表格式的单行显示关联对象的方法。</p>
<p>要使用它，只需按如下形式修改 <code>ChoiceInline</code> 申明：</p>
<p><code>polls/admin.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ChoiceInline</span>(admin.TabularInline):</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>通过 <code>TabularInline</code> （替代 <code>StackedInline</code> ），关联对象以一种表格式的方式展示，显得更加紧凑：</p>
<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512104611002.png" alt="image-20230512104611002" style="zoom: 43%;" /> 
</blockquote>
<p>请注意，有一个额外的“删除？”列，允许删除使用“添加另一个选项”按钮添加的行和已保存的行。</p>
</li>
</ul>
<h3 id="7-3-自定义后台更改列表"><a href="#7-3-自定义后台更改列表" class="headerlink" title="7.3 自定义后台更改列表"></a>7.3 自定义后台更改列表</h3><ul>
<li><p>现在投票的后台页看起来很不错，让我们对“更改列表”页面进行一些调整——改成一个能展示系统中所有投票的页面。</p>
<p>以下是它此时的外观：</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512180544903.png" alt="image-20230512180544903" style="zoom: 67%;" /> 

<p>默认情况下，Django 显示每个对象的 <code>str()</code> 返回的值。但有时如果我们能够显示单个字段，它会更有帮助。</p>
</li>
<li><p>为此，使用 <code>list_display</code>后台选项，它是一个包含要显示的字段名的元组，在更改列表页中以列的形式展示这个对象：</p>
<p>另外，让我们把 教程第 2 部分中的 <code>was_published_recently()</code> 方法也加上：</p>
<p><code>polls/admin.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">QuestionAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    list_display = [<span class="string">&quot;question_text&quot;</span>, <span class="string">&quot;pub_date&quot;</span>, <span class="string">&quot;was_published_recently&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>现在修改投票的列表页看起来像这样：</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512180954199.png" alt="image-20230512180954199" style="zoom: 67%;" />

<p>你可以点击列标题来对这些行进行排序——除了 <code>was_published_recently</code> 这个列，因为没有实现排序方法。</p>
<p>顺便看下这个列的标题 <code>was_published_recently</code>，默认就是方法名（用空格替换下划线），该列的每行都以字符串形式展示出处。</p>
</li>
<li><p>你可以通过在该方法上（在 <code>polls/models.py</code> 中）使用 <code>display()</code>装饰器来改进，如下图所示：</p>
<p><code>polls/models.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Question</span>(models.Model):</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"><span class="meta">    @admin.display(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="meta">        boolean=<span class="literal">True</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">        ordering=<span class="string">&quot;pub_date&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">        description=<span class="string">&quot;Published recently?&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">    </span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">was_published_recently</span>(<span class="params">self</span>):</span><br><span class="line">        now = timezone.now()</span><br><span class="line">        <span class="keyword">return</span> now - datetime.timedelta(days=<span class="number">1</span>) &lt;= self.pub_date &lt;= now</span><br></pre></td></tr></table></figure>

<blockquote>
<p>更多关于可通过装饰器设置的属性的信息，请参见 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/contrib/admin/#django.contrib.admin.ModelAdmin.list_display"><code>list_display</code></a>。</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512181647755.png" alt="image-20230512181647755" style="zoom:50%;" /> 
</blockquote>
</li>
<li><p>再次编辑文件 <code>polls/admin.py</code>，优化 <code>Question</code> 变更页：过滤器，使用 <code>list_filter</code>。</p>
<p>将以下代码添加至 <code>QuestionAdmin</code>：</p>
<p><code>polls/admin.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_filter = [<span class="string">&quot;pub_date&quot;</span>]</span><br></pre></td></tr></table></figure>

<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512181427536.png" alt="image-20230512181427536" style="zoom:50%;" /> 
</blockquote>
<p>这样做添加了一个“过滤器”侧边栏，允许人们以 <code>pub_date</code> 字段来过滤列表：</p>
<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512181720442.png" alt="image-20230512181720442" style="zoom: 50%;" /> 
</blockquote>
<p>展示的过滤器类型取决你你要过滤的字段的类型。</p>
<p>因为 <code>pub_date</code> 是类 <code>DateTimeField</code>，Django 知道要提供哪个过滤器：“任意时间”，“今天”，“过去7天”，“这个月”和“今年”。</p>
</li>
<li><p>这已经弄的很好了。让我们再扩充些功能:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">search_fields = [<span class="string">&quot;question_text&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>在列表的顶部增加一个搜索框。当输入待搜项时，Django 将搜索 <code>question_text</code> 字段。</p>
<p>你可以使用任意多的字段——由于后台使用 <code>LIKE</code> 来查询数据，将待搜索的字段数限制为一个不会出问题大小，会便于数据库进行查询操作。</p>
<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512182208186.png" alt="image-20230512182208186" style="zoom:50%;" /> 
</blockquote>
</li>
<li><p>现在是给你的修改列表页增加分页功能的好时机。</p>
<p>默认每页显示 100 项。</p>
<p><a href="https://docs.djangoproject.com/zh-hans/4.2/ref/contrib/admin/#django.contrib.admin.ModelAdmin.list_per_page"><code>变更页分页</code></a>, <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/contrib/admin/#django.contrib.admin.ModelAdmin.search_fields"><code>搜索框</code></a>, <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/contrib/admin/#django.contrib.admin.ModelAdmin.list_filter"><code>过滤器</code></a>, <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/contrib/admin/#django.contrib.admin.ModelAdmin.date_hierarchy"><code>日期层次结构</code></a>, 和 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/contrib/admin/#django.contrib.admin.ModelAdmin.list_display"><code>列标题排序</code></a> 均以你期望的方式合作运行。</p>
</li>
</ul>
<h3 id="7-4-自定义后台界面和风格"><a href="#7-4-自定义后台界面和风格" class="headerlink" title="7.4 自定义后台界面和风格"></a>7.4 自定义后台界面和风格</h3><blockquote>
<p>在每个后台页顶部显示“Django 管理员”显得很滑稽。这只是一串占位文本。</p>
<p>不过，你可以通过 Django 的模板系统来修改。</p>
<p>Django 的后台由自己驱动，且它的交互接口采用 Django 自己的模板系统。</p>
</blockquote>
<h4 id="自定义你的-工程的-模板"><a href="#自定义你的-工程的-模板" class="headerlink" title="自定义你的 工程的 模板"></a>自定义你的 <em>工程的</em> 模板</h4><ul>
<li><p>在你的工程目录（指包含 <code>manage.py</code> 的那个文件夹）内创建一个名为 <code>templates</code> 的目录。</p>
<blockquote>
<p>模板可放在你系统中任何 Django 能找到的位置。（谁启动了 Django，Django 就以他的用户身份运行。）</p>
<p>不过，把你的模板放在工程内会带来很大便利，推荐你这样做。</p>
</blockquote>
</li>
<li><p>打开你的设置文件（<code>mysite/settings.py</code>，牢记），在 <code>TEMPLATES</code>设置中添加 <code>DIRS</code>选项：</p>
<p><code>mysite/settings.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;BACKEND&quot;</span>: <span class="string">&quot;django.template.backends.django.DjangoTemplates&quot;</span>,</span><br><span class="line">        <span class="string">&quot;DIRS&quot;</span>: [BASE_DIR / <span class="string">&quot;templates&quot;</span>],</span><br><span class="line">        <span class="string">&quot;APP_DIRS&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&quot;OPTIONS&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;context_processors&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;django.template.context_processors.debug&quot;</span>,</span><br><span class="line">                <span class="string">&quot;django.template.context_processors.request&quot;</span>,</span><br><span class="line">                <span class="string">&quot;django.contrib.auth.context_processors.auth&quot;</span>,</span><br><span class="line">                <span class="string">&quot;django.contrib.messages.context_processors.messages&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://docs.djangoproject.com/zh-hans/4.2/ref/settings/#std-setting-TEMPLATES-DIRS"><code>DIRS</code></a> 是一个包含多个系统目录的文件列表，用于在载入 Django 模板时使用，是一个待搜索路径。</p>
<blockquote>
<p>组织模板</p>
<p>就像静态文件一样，我们 <em>可以</em> 把所有的模板文件放在一个大模板目录内，这样它也能工作的很好。</p>
<p>但是，属于特定应用的模板文件最好放在应用所属的模板目录（例如 <code>polls/templates</code>），而不是工程的模板目录（<code>templates</code>）。我们会在 <a href="https://docs.djangoproject.com/zh-hans/4.2/intro/reusable-apps/">创建可复用的应用教程</a> 中讨论 <em>为什么</em> 我们要这样做。</p>
</blockquote>
<blockquote>
<p>Django 的源文件在哪里？</p>
<p>如果你不知道 Django 源码在你系统的哪个位置，运行以下命令：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">...\&gt; py -c <span class="string">&quot;import django; print(django.__path__)&quot;</span></span><br></pre></td></tr></table></figure>
</blockquote>
</blockquote>
</li>
<li><p>接着，用你网页站点的名字编辑替换文件内的 <code>&#123;&#123; site_header|default:_('Django administration') &#125;&#125;</code> （包含大括号）。</p>
<p>完成后，你应该看到如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% block branding %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;site-name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;admin:index&#x27; %&#125;&quot;</span>&gt;</span>Polls Administration<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>我们会用这个方法来教你复写模板。</p>
<p>在一个实际工程中，你可能更期望使用 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/contrib/admin/#django.contrib.admin.AdminSite.site_header"><code>django.contrib.admin.AdminSite.site_header</code></a> 来进行简单的定制。</p>
<p>这个模板文件包含很多类似 <code>&#123;% block branding %&#125;</code> 和 <code>&#123;&#123; title &#125;&#125;</code> 的文本。</p>
<p> &#96;</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>《LaTeX》Notes</title>
    <url>/butterflyblog/2023/08/01/%E3%80%8ALaTeX%E3%80%8BNotes/</url>
    <content><![CDATA[<h1 id="《LaTeX》Notes"><a href="#《LaTeX》Notes" class="headerlink" title="《LaTeX》Notes"></a>《LaTeX》Notes</h1><blockquote>
<h4 id="官网：LaTeX"><a href="#官网：LaTeX" class="headerlink" title="官网：LaTeX"></a>官网：<a href="https://www.latex-project.org/">LaTeX</a></h4><h4 id="知识来源：b站-latex中文教程"><a href="#知识来源：b站-latex中文教程" class="headerlink" title="知识来源：b站 latex中文教程"></a>知识来源：b站 <a href="https://www.bilibili.com/video/BV15x411j7k6/">latex中文教程</a></h4></blockquote>
<h3 id="！！！长文警告！！！"><a href="#！！！长文警告！！！" class="headerlink" title="！！！长文警告！！！"></a>！！！长文警告！！！</h3><blockquote>
<h4 id="速记"><a href="#速记" class="headerlink" title="速记"></a>速记</h4><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">% 中文包</span></span><br><span class="line">&gt;<span class="keyword">\usepackage</span>&#123;ctex&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">% 插图表格浮动体</span></span><br><span class="line">&gt;<span class="keyword">\usepackage</span>&#123;graphicx&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">% 数学公式包</span></span><br><span class="line">&gt;<span class="keyword">\usepackage</span>&#123;amsmath&#125;</span><br><span class="line">&gt;<span class="keyword">\usepackage</span>&#123;amssymb&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="第一章、前言"><a href="#第一章、前言" class="headerlink" title="第一章、前言"></a>第一章、前言</h2><h3 id="1-1-安装-Texlive"><a href="#1-1-安装-Texlive" class="headerlink" title="1.1 安装 Texlive"></a>1.1 安装 Texlive</h3><ul>
<li><p>下载官网：<a href="https://tug.org/texlive/">Tex Live</a></p>
</li>
<li><p>安装时间较长</p>
</li>
</ul>
<h3 id="1-2-基本操作"><a href="#1-2-基本操作" class="headerlink" title="1.2 基本操作"></a>1.2 基本操作</h3><h4 id="1-2-1-版本"><a href="#1-2-1-版本" class="headerlink" title="1.2.1 版本"></a>1.2.1 版本</h4><ul>
<li><p>打开命令行窗口</p>
</li>
<li><p>检查三个版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tex -v</span><br><span class="line">latex -v</span><br><span class="line">xelatex -v</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex1.png"></p>
</li>
<li><p>更新命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tlmgr update --all</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex2.png"></p>
</li>
</ul>
<h4 id="1-2-2-编写"><a href="#1-2-2-编写" class="headerlink" title="1.2.2 编写"></a>1.2.2 编写</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /				#切换到工作目录下</span><br><span class="line">mkdir testLatex		#创建一个文件夹</span><br><span class="line">cd testLatex		#切换到文件夹下</span><br><span class="line">notepad test.tex	#创建一个tex文件</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">写入内容...</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译方法一</span></span><br><span class="line">latex test.tex		#编译latex文件，得到dvi文件</span><br><span class="line">dvipdfmx test.dvi	#把div文件转为pdf文件</span><br><span class="line">test.pdf			#打开查看pdf文件</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">编译方法二</span></span><br><span class="line">xelatex test.tex	#直接生成pdf文件</span><br><span class="line">test.pdf			#打开查看pdf文件</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除多余文件</span></span><br><span class="line">del *.aux *.log *.dvi	#删除同时带来的aux/log/dvi文件</span><br></pre></td></tr></table></figure>

<ul>
<li>创建、写入文件</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex3.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex4.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line"></span><br><span class="line">Hello \LaTeX.</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>方法一：先生成 dvi ，再生成 pdf</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex5.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex6.png">  </p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex7.png"></p>
<ul>
<li>方法二：直接生成pdf 文件</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex8.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex9.png"></p>
<h4 id="1-2-3-批处理文件"><a href="#1-2-3-批处理文件" class="headerlink" title="1.2.3 批处理文件"></a>1.2.3 批处理文件</h4><p>你也可以把命令行操作都放在bat文件中，</p>
<p>然后每次执行这个批处理文件即可。</p>
<ul>
<li><p>编写批处理文件<code>.bat</code>：</p>
<p><code>build.bat</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">latex test.tex</span><br><span class="line">dvipdfmx test.dvi</span><br><span class="line">del *.aux *.dvi *.log</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex10.png"></p>
<blockquote>
<p>当然，你写编译方法二的编译也是可以的。</p>
</blockquote>
</li>
<li><p>运行批处理文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">build</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex11.png"> </p>
<p>可以看到，会自动执行命令了。</p>
</li>
</ul>
<h4 id="1-2-5-采用中文"><a href="#1-2-5-采用中文" class="headerlink" title="1.2.5 采用中文"></a>1.2.5 采用中文</h4><ul>
<li><p>先检查<code>.tex</code>文件是不是<code>utf-8</code>编码的</p>
<blockquote>
<p>点击 文件 | 另存为</p>
<p>可以看到有编码格式查看，</p>
<p>若不是 utf-8，可以先另存为 utf-8 并覆盖原文件。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex12.png"></p>
</blockquote>
</li>
<li><p>引入中文宏包</p>
<p>在 .tex 文件中引入中文包之后就可以使用中文了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line"></span><br><span class="line">\usepackage&#123;ctex&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line"></span><br><span class="line">你好呀，\LaTeX.</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex13.png"> </p>
</li>
<li><p>编译并查看结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">build</span><br><span class="line">test.pdf</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex14.png"></p>
</li>
</ul>
<h3 id="1-3-使用编写软件"><a href="#1-3-使用编写软件" class="headerlink" title="1.3 使用编写软件"></a>1.3 使用编写软件</h3><h4 id="1-3-1-多种软件"><a href="#1-3-1-多种软件" class="headerlink" title="1.3.1 多种软件"></a>1.3.1 多种软件</h4><p>编写软件并没有要求，可以使用 记事本都可以。</p>
<p>关键是，有些软件可以把 cmd 命令集成在软件中，那么操作就会非常方便。</p>
<ul>
<li>TexWorks</li>
<li>TexStudio</li>
<li>VScode</li>
<li>…</li>
</ul>
<h4 id="1-3-2-TexWorks"><a href="#1-3-2-TexWorks" class="headerlink" title="1.3.2 TexWorks"></a>1.3.2 TexWorks</h4><ul>
<li><p>一般会自带</p>
</li>
<li><p>打开效果</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex15.png"></p>
</li>
<li><p>编译只需要点击左上角的播放图标即可</p>
</li>
</ul>
<blockquote>
<p>但是没有提示效果，所以建议采用VScode</p>
</blockquote>
<h4 id="1-3-3-VScode"><a href="#1-3-3-VScode" class="headerlink" title="1.3.3 VScode"></a>1.3.3 VScode</h4><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><ul>
<li><p>安装插件<code>LaTeX Workshop</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex16.png"></p>
</li>
<li><p>重启 VScode</p>
</li>
<li><p>打开VScode 设置，配置 <code>settings.json</code></p>
<blockquote>
<p>左下角 设置                           点击这个中间的按钮</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex17.png"><br><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex18.png"> </p>
</blockquote>
<p><code>settings.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>   </span><br><span class="line">    <span class="comment">// 你已有的设置复制放在这下面</span></span><br><span class="line">   	</span><br><span class="line"></span><br><span class="line">    <span class="comment">//本次latex的设置 start</span></span><br><span class="line">    <span class="attr">&quot;latex-workshop.latex.autoBuild.run&quot;</span><span class="punctuation">:</span> <span class="string">&quot;never&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;latex-workshop.showContextMenu&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;latex-workshop.intellisense.package.enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;latex-workshop.message.error.show&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;latex-workshop.message.warning.show&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;latex-workshop.latex.tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xelatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xelatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;-synctex=1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-interaction=nonstopmode&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-file-line-error&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pdflatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pdflatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;-synctex=1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-interaction=nonstopmode&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-file-line-error&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;latexmk&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;latexmk&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;-synctex=1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-interaction=nonstopmode&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-file-line-error&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-pdf&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-outdir=%OUTDIR%&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bibtex&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bibtex&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;latex-workshop.latex.recipes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;XeLaTeX&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;xelatex&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PDFLaTeX&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;pdflatex&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;BibTeX&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;bibtex&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;LaTeXmk&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;latexmk&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xelatex -&gt; bibtex -&gt; xelatex*2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;xelatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;bibtex&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;xelatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;xelatex&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pdflatex -&gt; bibtex -&gt; pdflatex*2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;pdflatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;bibtex&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;pdflatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;pdflatex&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;latex-workshop.latex.clean.fileTypes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;*.aux&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.bbl&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.blg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.idx&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.ind&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.lof&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.lot&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.out&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.toc&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.acn&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.acr&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.alg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.glg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.glo&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.gls&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.ist&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.fls&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.log&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*.fdb_latexmk&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;latex-workshop.latex.autoClean.run&quot;</span><span class="punctuation">:</span> <span class="string">&quot;onFailed&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;latex-workshop.latex.recipe.default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lastUsed&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;latex-workshop.view.pdf.internal.synctex.keybinding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;double-click&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 本次latex设置 end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><ul>
<li><p>在工作文件夹下，以VScode 打开使用即可</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex19.png"> </p>
</li>
<li><p>右上角有build</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex20.png"> </p>
<p>build 之后，左下角若没有错误，就可以正常打开pdf了</p>
<blockquote>
<p>若出问题，可以打开VScode的问题窗口查看，</p>
<p>快捷键<code>ctrl + 上引号</code> 打开问题窗口和终端。</p>
</blockquote>
</li>
<li><p>整体效果</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex21.png"></p>
</li>
</ul>
<blockquote>
<p>备注： </p>
<p>配置了json文件设置，就会在左侧有操作 cmd</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex22.png"> </p>
</blockquote>
<h2 id="第二章、语法"><a href="#第二章、语法" class="headerlink" title="第二章、语法"></a>第二章、语法</h2><h3 id="2-1-基本结构"><a href="#2-1-基本结构" class="headerlink" title="2.1 基本结构"></a>2.1 基本结构</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 导言区</span></span><br><span class="line"><span class="keyword">\documentclass</span>&#123;ctexart&#125;  <span class="comment">% book,report,letter</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% \usepackage&#123;ctex&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\newcommand</span>&#123;<span class="keyword">\degree</span>&#125;&#123;<span class="built_in">^</span><span class="keyword">\circ</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\title</span>&#123;<span class="keyword">\heiti</span> 杂谈勾股定理&#125;</span><br><span class="line"><span class="keyword">\author</span>&#123;<span class="keyword">\kaishu</span> 张三&#125;</span><br><span class="line"><span class="keyword">\date</span>&#123;<span class="keyword">\today</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">% 正文区（文稿区）</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"><span class="keyword">\maketitle</span></span><br><span class="line"></span><br><span class="line">勾股定理可以使用现代语言表述为：直角三角形斜边的平方等于两腰的平方和。</span><br><span class="line"></span><br><span class="line">可以用符号语言表述为：设直角三角形 <span class="built_in">$</span>ABC<span class="built_in">$</span>，其中 <span class="built_in">$</span><span class="keyword">\angle</span> C=90<span class="keyword">\degree</span><span class="built_in">$</span>，则有：</span><br><span class="line"><span class="keyword">\begin</span>&#123;equation&#125;</span><br><span class="line">    AB<span class="built_in">^</span>2 = BC<span class="built_in">^</span>2 + AC <span class="built_in">^</span>2</span><br><span class="line"><span class="keyword">\end</span>&#123;equation&#125;</span><br><span class="line"></span><br><span class="line">Let <span class="built_in">$</span>f(x)<span class="built_in">$</span> be defined by the formula <span class="built_in">$</span><span class="built_in">$</span>f(x)=3x<span class="built_in">^</span>2+x-1<span class="built_in">$</span><span class="built_in">$</span> which is a polynomial of degree 2.</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex23.png"></p>
<h3 id="2-2-字体设置"><a href="#2-2-字体设置" class="headerlink" title="2.2  字体设置"></a>2.2  字体设置</h3><ul>
<li>字体属性<ul>
<li>字体编码<ul>
<li>正文字体编码：OT1、T1、EU1 等</li>
<li>数学字体编码：OML、MOS、OMX 等</li>
</ul>
</li>
<li>字体族<ul>
<li>罗马字体：笔画起始处有装饰</li>
<li>无衬线字体：笔画起始处无装饰</li>
<li>打字机字体：每个字符宽度相等，又称等宽字体</li>
</ul>
</li>
<li>字体大小</li>
<li>字体系列<ul>
<li>粗细</li>
<li>宽度</li>
</ul>
</li>
<li>字体形状<ul>
<li>直立</li>
<li>斜体</li>
<li>伪斜体</li>
<li>小型大写</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex24.png"> </p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;article&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;ctex&#125;</span><br><span class="line"><span class="keyword">\newcommand</span>&#123;<span class="keyword">\myfont</span>&#125;&#123;<span class="keyword">\textsf</span>&#123;<span class="keyword">\textbf</span>&#123;My Font Content&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\title</span>&#123;<span class="keyword">\heiti</span> 字体设置&#125;</span><br><span class="line"><span class="keyword">\author</span>&#123;Seymour&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"><span class="keyword">\section</span>&#123;字体族&#125;</span><br><span class="line"><span class="comment">% 字体族设置</span></span><br><span class="line">原本：Origin Family，默认就是罗马字体</span><br><span class="line"></span><br><span class="line">(textrm):<span class="keyword">\textrm</span>&#123;Roman Family&#125;</span><br><span class="line"></span><br><span class="line">(textsf):<span class="keyword">\textsf</span>&#123;Sans Serif Family&#125;</span><br><span class="line"></span><br><span class="line">(texttt):<span class="keyword">\texttt</span>&#123;TypeWriter Family&#125;</span><br><span class="line"></span><br><span class="line">写在内部family也可以，如下</span><br><span class="line"></span><br><span class="line">(rmfamily):&#123;<span class="keyword">\rmfamily</span> inner things&#125;</span><br><span class="line"></span><br><span class="line">(sffamily):&#123;<span class="keyword">\sffamily</span> inner things&#125;</span><br><span class="line"></span><br><span class="line">(ttfamily):&#123;<span class="keyword">\ttfamily</span> inner things&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;粗细宽度&#125;</span><br><span class="line">外部text写法：</span><br><span class="line"></span><br><span class="line">(textmd):<span class="keyword">\textmd</span>&#123;Meddium Series&#125;</span><br><span class="line"></span><br><span class="line">(textbf):<span class="keyword">\textbf</span>&#123;Boldface Series&#125;</span><br><span class="line"></span><br><span class="line">内部series写法：</span><br><span class="line"></span><br><span class="line">(mdseries):&#123;<span class="keyword">\mdseries</span> Meddium Series&#125;</span><br><span class="line"></span><br><span class="line">(bfseries):&#123;<span class="keyword">\bfseries</span> Boldface Series&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;字体形状&#125;</span><br><span class="line">外部text写法：</span><br><span class="line"></span><br><span class="line">(textup):<span class="keyword">\textup</span>&#123;Upright Shape 直立&#125;</span><br><span class="line"></span><br><span class="line">(textit):<span class="keyword">\textit</span>&#123;Italic Shape 斜体&#125;</span><br><span class="line"></span><br><span class="line">(textsl):<span class="keyword">\textsl</span>&#123;Slanted Shape 伪斜体&#125;</span><br><span class="line"></span><br><span class="line">(textsc):<span class="keyword">\textsc</span>&#123;Small Caps Shape 小型大写&#125;</span><br><span class="line"></span><br><span class="line">内部shape写法：</span><br><span class="line"></span><br><span class="line">(upshape):&#123;<span class="keyword">\upshape</span> Upright Shape 直立&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(itshape):&#123;<span class="keyword">\itshape</span> Italic Shape 斜体&#125;</span><br><span class="line"></span><br><span class="line">(slshape):&#123;<span class="keyword">\slshape</span> Slanted Shape 伪斜体&#125;</span><br><span class="line"></span><br><span class="line">(scshape):&#123;<span class="keyword">\scshape</span> Small Caps Shape 小型大写&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;中文字体&#125;</span><br><span class="line">&#123;<span class="keyword">\songti</span> 宋体&#125; <span class="keyword">\quad</span> &#123;<span class="keyword">\heiti</span> 黑体&#125; <span class="keyword">\quad</span> &#123;<span class="keyword">\fangsong</span> 仿宋&#125; <span class="keyword">\quad</span> &#123;<span class="keyword">\kaishu</span> 楷书&#125;</span><br><span class="line"></span><br><span class="line">中文&#123;<span class="keyword">\bfseries</span> 粗体&#125; 和 &#123;<span class="keyword">\itshape</span> 斜体&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;字体大小&#125;</span><br><span class="line">&#123;<span class="keyword">\tiny</span> Hello,tiny&#125;<span class="keyword">\\</span></span><br><span class="line">&#123;<span class="keyword">\scriptsize</span> Hello,scriptsize&#125;<span class="keyword">\\</span></span><br><span class="line">&#123;<span class="keyword">\footnotesize</span> Hello,footnotesize&#125;<span class="keyword">\\</span></span><br><span class="line">&#123;<span class="keyword">\small</span> Hello,small&#125;<span class="keyword">\\</span></span><br><span class="line">&#123;<span class="keyword">\normalsize</span> Hello,normalsize&#125;<span class="keyword">\\</span></span><br><span class="line">&#123;<span class="keyword">\large</span> Hello,large&#125;<span class="keyword">\\</span></span><br><span class="line">&#123;<span class="keyword">\Large</span> Hello,Large&#125;<span class="keyword">\\</span></span><br><span class="line">&#123;<span class="keyword">\large</span> Hello,LARGE&#125;<span class="keyword">\\</span></span><br><span class="line">&#123;<span class="keyword">\huge</span> Hello,huge&#125;<span class="keyword">\\</span></span><br><span class="line">&#123;<span class="keyword">\Huge</span> Hello,Huge&#125;<span class="keyword">\\</span></span><br><span class="line">可以在文档导言区使用documentclass[10pt] 来定义正常字体大小<span class="keyword">\\</span></span><br><span class="line">中文字号设置：<span class="keyword">\\</span></span><br><span class="line">(zihao+数字):<span class="keyword">\zihao</span>&#123;3&#125; 你好，3号字体<span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\zihao</span>&#123;5&#125;其他具体，可以通过cmd下的 texdoc ctex 继续参考ctex文档。</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;自定义字体内容&#125;</span><br><span class="line"><span class="keyword">\myfont</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex25.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex26.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex27.png"></p>
<h3 id="2-3-篇章结构"><a href="#2-3-篇章结构" class="headerlink" title="2.3 篇章结构"></a>2.3 篇章结构</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;ctexbook&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">% \usepackage&#123;ctex&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\title</span>&#123;篇章结构&#125;</span><br><span class="line"><span class="keyword">\author</span>&#123;Seymour&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"><span class="keyword">\tableofcontents</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\chapter</span>&#123;开篇&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;引言&#125;</span><br><span class="line">“交通规划设计知识服务平台”是基于CNKI数字图书馆构建的，针对交通规划设计行业从业人员的规划设计创新。<span class="keyword">\par</span> 科研技术人员科研项目选题、撰写论文、成果鉴定，业内管理人员决策经营。</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;实验&#125;</span><br><span class="line"><span class="keyword">\subsection</span>&#123;实验工具&#125;</span><br><span class="line">铁路科研单位、铁路规划及勘察设计单位、地方铁路局。</span><br><span class="line"><span class="keyword">\subsection</span>&#123;实验过程&#125;</span><br><span class="line"><span class="keyword">\subsubsection</span>&#123;准备材料&#125;</span><br><span class="line">《铁路行业知识服务平台》是基于CNKI工程的强大基础平台开发的。</span><br><span class="line"><span class="keyword">\subsubsection</span>&#123;使用材料&#125;</span><br><span class="line">中国知网“公路规建管养知识服务平台”基于CNKI数据资源整合。</span><br><span class="line"><span class="keyword">\subsubsection</span>&#123;得到成果&#125;</span><br><span class="line">重点突出线路工程、机车车辆、通信信号板块。</span><br><span class="line"><span class="keyword">\subsection</span>&#123;实验结果&#125;</span><br><span class="line">中国知网“城市轨道交通知识服务平台”是服务于轨道交通行业用户，从业务需求角度出发。</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;结论&#125;</span><br><span class="line">城市轨道交通科研单位、城市轨道交通勘察设计单位、城市轨道交通运营单位。</span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex28.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex29.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex30.png"> </p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex31.png"> </p>
<h3 id="2-4-特殊字符"><a href="#2-4-特殊字符" class="headerlink" title="2.4 特殊字符"></a>2.4 特殊字符</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;article&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;ctex&#125;</span><br><span class="line"><span class="comment">%提供XeTeX的logo</span></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;xltxtra&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;texnames&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;mflogo&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\title</span>&#123;<span class="keyword">\heiti</span> 特殊字符&#125;</span><br><span class="line"><span class="keyword">\author</span>&#123;Seymour&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\maketitle</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;空白符号&#125;</span><br><span class="line">说明：</span><br><span class="line">空行分段，多个空行等同一个。</span><br><span class="line">自动缩进，绝对不能使用空格代替。</span><br><span class="line">英文中多个空格视为一个空格；中文中空格忽略。</span><br><span class="line">汉字与其他字符的间距由 XeLaTeX 自动处理。</span><br><span class="line">禁止使用中文全角空格。</span><br><span class="line"></span><br><span class="line">空格处理：</span><br><span class="line"></span><br><span class="line"><span class="comment">% 1em</span></span><br><span class="line">1em(quad):a<span class="keyword">\quad</span> b</span><br><span class="line"></span><br><span class="line"><span class="comment">% 2em</span></span><br><span class="line">2em(qquad):a<span class="keyword">\qquad</span> b</span><br><span class="line"></span><br><span class="line"><span class="comment">%约为 1/6 em</span></span><br><span class="line">1/6em(,)(thinspace):a<span class="keyword">\,</span>b a<span class="keyword">\thinspace</span> b</span><br><span class="line"></span><br><span class="line"><span class="comment">% 0.5em</span></span><br><span class="line">0.5em(enspace)<span class="keyword">\enspace</span> b</span><br><span class="line"></span><br><span class="line"><span class="comment">%空格</span></span><br><span class="line">空格( ):a<span class="keyword">\ </span>b</span><br><span class="line"></span><br><span class="line">硬空格:a~b</span><br><span class="line"></span><br><span class="line">1pc=12pt=4.218mm(kern+pc):a<span class="keyword">\kern</span> 1pc b</span><br><span class="line"></span><br><span class="line">可以为负(kern+em):a<span class="keyword">\kern</span> -1em b</span><br><span class="line"></span><br><span class="line">(hskip+em):a<span class="keyword">\hskip</span> 1em b</span><br><span class="line"></span><br><span class="line">(hspace+pt):a<span class="keyword">\hspace</span>&#123;35pt&#125;b</span><br><span class="line"></span><br><span class="line">占位宽度(hphantom+字):a<span class="keyword">\hphantom</span>&#123;xyz&#125;b</span><br><span class="line"></span><br><span class="line">弹性宽度(hfill):a<span class="keyword">\hfill</span> b</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;<span class="keyword">\LaTeX</span> 控制符&#125;</span><br><span class="line">通过转义符实现：</span><br><span class="line"></span><br><span class="line"><span class="keyword">\#</span> <span class="keyword">\$</span> <span class="keyword">\%</span> <span class="keyword">\&#123;</span> <span class="keyword">\&#125;</span> <span class="keyword">\~</span>&#123;&#125; <span class="keyword">\_</span>&#123;&#125; <span class="keyword">\^</span>&#123;&#125; <span class="keyword">\textbackslash</span> <span class="keyword">\&amp;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;排版符号&#125;</span><br><span class="line"><span class="keyword">\textbackslash</span> S 为<span class="keyword">\S</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\textbackslash</span> P 为<span class="keyword">\P</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\textbackslash</span> dag 为<span class="keyword">\dag</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\textbackslash</span> ddag 为<span class="keyword">\ddag</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\textbackslash</span> copyright 为<span class="keyword">\copyright</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\textbackslash</span> pounds 为 <span class="keyword">\pounds</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;<span class="keyword">\TeX</span> 标志符号&#125;</span><br><span class="line"><span class="comment">% &#123;&#125;是为了加空格</span></span><br><span class="line">原生：<span class="keyword">\TeX</span>&#123;&#125; <span class="keyword">\LaTeX</span>&#123;&#125; <span class="keyword">\LaTeXe</span>&#123;&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">% xltxtra 宏包提供</span></span><br><span class="line">xltxtra 宏包：<span class="keyword">\XeLaTeX</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% texnames 宏包提供</span></span><br><span class="line">texnames 宏包<span class="keyword">\AmSTeX</span>&#123;&#125; <span class="keyword">\AmS</span>-<span class="keyword">\LaTeX</span>&#123;&#125; <span class="keyword">\BibTeX</span>&#123;&#125; <span class="keyword">\LuaTeX</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">% mflogo 宏包提供</span></span><br><span class="line">mflogo 宏包：<span class="keyword">\METAFONT</span>&#123;&#125; <span class="keyword">\MF</span>&#123;&#125; <span class="keyword">\MP</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;引号&#125;</span><br><span class="line">`你好！&#x27;</span><br><span class="line"></span><br><span class="line">``你好！&#x27;&#x27;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;连字符&#125;</span><br><span class="line">- -- ---</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;非英文字符&#125;</span><br><span class="line"><span class="keyword">\oe</span>&#123;&#125; <span class="keyword">\OE</span>&#123;&#125; <span class="keyword">\ae</span>&#123;&#125; <span class="keyword">\AE</span>&#123;&#125; <span class="keyword">\aa</span>&#123;&#125; <span class="keyword">\AA</span>&#123;&#125; </span><br><span class="line"><span class="keyword">\o</span>&#123;&#125; <span class="keyword">\O</span>&#123;&#125; <span class="keyword">\l</span>&#123;&#125; <span class="keyword">\L</span>&#123;&#125; <span class="keyword">\ss</span>&#123;&#125; <span class="keyword">\SS</span>&#123;&#125; !`&#123;&#125; ?`&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;重音字符(以o为例)&#125;</span><br><span class="line"><span class="keyword">\`</span>o <span class="keyword">\&#x27;</span>o <span class="keyword">\^</span>o <span class="keyword">\&#x27;</span>&#x27;o <span class="keyword">\~</span>o <span class="keyword">\=</span>o <span class="keyword">\.</span>o</span><br><span class="line"><span class="keyword">\u</span>&#123;o&#125; <span class="keyword">\v</span>&#123;o&#125; <span class="keyword">\H</span>&#123;o&#125; <span class="keyword">\r</span>&#123;o&#125; <span class="keyword">\t</span>&#123;o&#125; <span class="keyword">\b</span>&#123;o&#125; <span class="keyword">\c</span>&#123;o&#125; <span class="keyword">\d</span>&#123;o&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex32.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex33.png"> </p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex34.png"> </p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex35.png"> </p>
<h3 id="2-5-插图"><a href="#2-5-插图" class="headerlink" title="2.5 插图"></a>2.5 插图</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;ctexart&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;graphicx&#125;</span><br><span class="line"><span class="keyword">\graphicspath</span>&#123;&#123;figures/&#125;,&#123;pics/&#125;&#125; <span class="comment">% 图片在当前目录下的 figures 目录、 pics 目录下</span></span><br><span class="line"><span class="comment">% 语法：\includegraphics[keyvals]&#123;imagefile&#125;</span></span><br><span class="line"><span class="comment">% 格式：EPS,PDF,PNG,JPEG,BMP</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"><span class="keyword">\LaTeX</span>&#123;&#125; 中的插图：</span><br><span class="line"></span><br><span class="line"><span class="comment">% 注意，最好设置大小，插图原图尺寸太大会展示不全</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 缩放因子 scale ，宽高尺寸 width height</span></span><br><span class="line"><span class="keyword">\includegraphics</span>[scale=0.1]&#123;pics/icon<span class="built_in">_</span>logo2.png&#125;</span><br><span class="line"><span class="keyword">\includegraphics</span>[height=3cm]&#123;icon<span class="built_in">_</span>logo2.png&#125;</span><br><span class="line"><span class="keyword">\includegraphics</span>[width=3cm]&#123;icon<span class="built_in">_</span>logo2.png&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\includegraphics</span>[width=0.5<span class="keyword">\textwidth</span>]&#123;icon<span class="built_in">_</span>logo2.png&#125;</span><br><span class="line"><span class="keyword">\includegraphics</span>[height=0.2<span class="keyword">\textheight</span>]&#123;icon<span class="built_in">_</span>logo2.png&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex36.png"></p>
<blockquote>
<p>备注：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex37.png"> </p>
</blockquote>
<h3 id="2-6-表格"><a href="#2-6-表格" class="headerlink" title="2.6 表格"></a>2.6 表格</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;ctexart&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;[center]&#123;l|c|c|p&#123;1cm&#125;|r&#125; </span><br><span class="line">    <span class="comment">% 整表位置、行字对齐方式、竖线、宽度固定</span></span><br><span class="line">    <span class="keyword">\hline</span> <span class="comment">% 横线</span></span><br><span class="line">    学号 <span class="built_in">&amp;</span> 姓名 <span class="built_in">&amp;</span> 专业 <span class="built_in">&amp;</span> 成绩 <span class="built_in">&amp;</span> 备注 <span class="keyword">\\</span></span><br><span class="line">    <span class="keyword">\hline</span></span><br><span class="line">    2101 <span class="built_in">&amp;</span> 张三 <span class="built_in">&amp;</span> 计算机科学与技术 <span class="built_in">&amp;</span> 90 <span class="built_in">&amp;</span> 通过 <span class="keyword">\\</span></span><br><span class="line">    2102 <span class="built_in">&amp;</span> 李四 <span class="built_in">&amp;</span> 信息安全 <span class="built_in">&amp;</span> 95 <span class="built_in">&amp;</span> 通过 <span class="keyword">\\</span></span><br><span class="line">    2103 <span class="built_in">&amp;</span> 王五 <span class="built_in">&amp;</span> 数据科学与大数据技术 <span class="built_in">&amp;</span> 98 <span class="built_in">&amp;</span> 通过 <span class="keyword">\\</span></span><br><span class="line">    <span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex38.png"></p>
<blockquote>
<p>更多可以查看宏包说明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">texdoc booktab</span><br><span class="line">texdoc longtab</span><br><span class="line">texdoc tabu</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="2-7-浮动体"><a href="#2-7-浮动体" class="headerlink" title="2.7 浮动体"></a>2.7 浮动体</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;ctexart&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;graphicx&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line">在 <span class="keyword">\LaTeX</span>&#123;&#125;中的图片(图<span class="keyword">\ref</span>&#123;lb-tj&#125;)</span><br><span class="line"><span class="keyword">\begin</span>&#123;figure&#125;[htbp]</span><br><span class="line">    <span class="keyword">\centering</span></span><br><span class="line">    <span class="keyword">\caption</span>&#123;同济大学校徽&#125;<span class="keyword">\label</span>&#123;lb-tj&#125;</span><br><span class="line">    <span class="keyword">\includegraphics</span>[width=3cm]&#123;pics/icon<span class="built_in">_</span>logo2.png&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;figure&#125;</span><br><span class="line"></span><br><span class="line">在 <span class="keyword">\LaTeX</span>&#123;&#125;中的表格(表<span class="keyword">\ref</span>&#123;lb-grades&#125;)</span><br><span class="line"><span class="keyword">\begin</span>&#123;table&#125;[htbp]</span><br><span class="line">    <span class="keyword">\centering</span></span><br><span class="line">    <span class="keyword">\begin</span>&#123;tabular&#125;[center]&#123;l|c|c|p&#123;1cm&#125;|r&#125; </span><br><span class="line">        <span class="comment">% 整表位置、行字对齐方式、竖线、宽度固定</span></span><br><span class="line">        <span class="keyword">\hline</span> <span class="comment">% 横线</span></span><br><span class="line">        学号 <span class="built_in">&amp;</span> 姓名 <span class="built_in">&amp;</span> 专业 <span class="built_in">&amp;</span> 成绩 <span class="built_in">&amp;</span> 备注 <span class="keyword">\\</span></span><br><span class="line">        <span class="keyword">\hline</span></span><br><span class="line">        2101 <span class="built_in">&amp;</span> 张三 <span class="built_in">&amp;</span> 计算机科学与技术 <span class="built_in">&amp;</span> 90 <span class="built_in">&amp;</span> 通过 <span class="keyword">\\</span></span><br><span class="line">        2102 <span class="built_in">&amp;</span> 李四 <span class="built_in">&amp;</span> 信息安全 <span class="built_in">&amp;</span> 95 <span class="built_in">&amp;</span> 通过 <span class="keyword">\\</span></span><br><span class="line">        2103 <span class="built_in">&amp;</span> 王五 <span class="built_in">&amp;</span> 数据科学与大数据技术 <span class="built_in">&amp;</span> 98 <span class="built_in">&amp;</span> 通过 <span class="keyword">\\</span></span><br><span class="line">        <span class="keyword">\hline</span></span><br><span class="line">    <span class="keyword">\end</span>&#123;tabular&#125;</span><br><span class="line">    <span class="keyword">\caption</span>&#123;成绩汇总表&#125;<span class="keyword">\label</span>&#123;lb-grades&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;table&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex39.png"></p>
<blockquote>
<p>备注：</p>
<ul>
<li>允许位置[htbp]<ul>
<li>h,here:代码所在上下文位置</li>
<li>t,top:代码所在的页面或后一页的顶部</li>
<li>b,bottom:代码所在页面的或后一页的底部</li>
<li>p,page:独立一页，浮动页面</li>
</ul>
</li>
<li>标题控制<ul>
<li>caption</li>
<li>bicaption</li>
</ul>
</li>
<li>并排与子图表<ul>
<li>subcaption</li>
<li>subfig</li>
<li>floatrow</li>
</ul>
</li>
<li>绕排<ul>
<li>picinpar</li>
<li>wrapfig</li>
</ul>
</li>
</ul>
<p>可以具体查询宏包手册。</p>
</blockquote>
<h3 id="2-8-数学公式初步"><a href="#2-8-数学公式初步" class="headerlink" title="2.8 数学公式初步"></a>2.8 数学公式初步</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;ctexart&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;ctex&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;amsmath&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"><span class="keyword">\section</span>&#123;简介&#125;</span><br><span class="line"><span class="keyword">\LaTeX</span>&#123;&#125; 将排版内容分为文本模式和数学模式。文本模式用于普通文本排版，数学模式用于数学公式排版。</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;行内公式&#125;</span><br><span class="line"><span class="keyword">\subsection</span>&#123;美元符号&#125;</span><br><span class="line">交换律是 <span class="built_in">$</span>a+b=b+a<span class="built_in">$</span>，如 <span class="built_in">$</span>1+2=2+1=3<span class="built_in">$</span>。</span><br><span class="line"><span class="keyword">\subsection</span>&#123;小括号&#125;</span><br><span class="line">交换律是 <span class="keyword">\(</span>a+b=b+a<span class="keyword">\)</span>，如 <span class="keyword">\(</span>1+2=2+1=3<span class="keyword">\)</span>。</span><br><span class="line"><span class="keyword">\subsection</span>&#123;math环境&#125;</span><br><span class="line">交换律是 <span class="keyword">\begin</span>&#123;math&#125;a+b=b+a<span class="keyword">\end</span>&#123;math&#125;，如 <span class="keyword">\begin</span>&#123;math&#125;1+2=2+1=3<span class="keyword">\end</span>&#123;math&#125;。</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;上下标&#125;</span><br><span class="line"><span class="built_in">$</span>3x<span class="built_in">^</span>&#123;20&#125; - x + 2 = 0<span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">$</span>3x<span class="built_in">^</span>&#123;3x<span class="built_in">^</span>&#123;20&#125; - x + 2&#125; - x + 2 = 0<span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">$</span> a<span class="built_in">_</span>0, a<span class="built_in">_</span>1,a<span class="built_in">_</span>2,...,a<span class="built_in">_</span>&#123;3x<span class="built_in">^</span>&#123;20&#125; - x + 2&#125; <span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;希腊字母&#125;</span><br><span class="line"><span class="built_in">$</span> <span class="keyword">\alpha</span> <span class="keyword">\quad</span> <span class="keyword">\beta</span> <span class="keyword">\quad</span> <span class="keyword">\gamma</span> <span class="keyword">\quad</span> <span class="keyword">\epsilon</span> <span class="keyword">\quad</span> <span class="keyword">\pi</span> <span class="keyword">\quad</span> <span class="keyword">\omega</span> <span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">$</span> <span class="keyword">\Gamma</span> <span class="keyword">\quad</span> <span class="keyword">\Delta</span> <span class="keyword">\quad</span> <span class="keyword">\Theta</span> <span class="keyword">\quad</span> <span class="keyword">\Pi</span> <span class="keyword">\quad</span> <span class="keyword">\Omega</span> <span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">$</span> <span class="keyword">\alpha</span> + <span class="keyword">\beta</span> <span class="built_in">^</span>2 + <span class="keyword">\gamma</span> <span class="built_in">^</span>3 = 0 <span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;数学函数&#125;</span><br><span class="line"><span class="built_in">$</span> <span class="keyword">\log</span> <span class="keyword">\quad</span> <span class="keyword">\sin</span> <span class="keyword">\quad</span> <span class="keyword">\cos</span> <span class="keyword">\quad</span> <span class="keyword">\arcsin</span> <span class="keyword">\quad</span> <span class="keyword">\arccos</span> <span class="keyword">\quad</span> <span class="keyword">\ln</span> <span class="keyword">\quad</span> <span class="built_in">$</span></span><br><span class="line"><span class="built_in">$</span> <span class="keyword">\sin</span> <span class="built_in">^</span>2 x + <span class="keyword">\cos</span> <span class="built_in">^</span>2 x = 1 <span class="keyword">\quad</span> <span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">$</span> y = <span class="keyword">\arcsin</span> x <span class="keyword">\quad</span> <span class="built_in">$</span></span><br><span class="line"><span class="built_in">$</span> y = <span class="keyword">\log</span><span class="built_in">_</span>2 x <span class="keyword">\quad</span> <span class="built_in">$</span></span><br><span class="line"><span class="built_in">$</span> y = sin<span class="built_in">^</span>&#123;-1&#125; x <span class="keyword">\quad</span> <span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;分式&#125;</span><br><span class="line">等底等高，圆锥体积为圆柱体积的<span class="built_in">$</span> 1/3 <span class="built_in">$</span>。</span><br><span class="line"></span><br><span class="line">等底等高，圆锥体积为圆柱体积的<span class="built_in">$</span> <span class="keyword">\frac</span>&#123;1&#125;&#123;3&#125; <span class="built_in">$</span>。</span><br><span class="line"></span><br><span class="line"><span class="built_in">$</span> <span class="keyword">\frac</span>&#123;x&#125;&#123;x<span class="built_in">^</span>2+x+1&#125; <span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">$</span> <span class="keyword">\frac</span>&#123;<span class="keyword">\sqrt</span>&#123;x-1&#125;&#125;&#123;<span class="keyword">\sqrt</span>&#123;x+1&#125;&#125; <span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">$</span> <span class="keyword">\frac</span>&#123;1&#125;&#123;1+<span class="keyword">\frac</span>&#123;1&#125;&#123;x&#125;&#125; <span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">$</span> <span class="keyword">\sqrt</span>&#123;<span class="keyword">\frac</span>&#123;x&#125;&#123;x<span class="built_in">^</span>2+x+1&#125;&#125; <span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;行间公式&#125;</span><br><span class="line"><span class="keyword">\subsection</span>&#123;美元符号&#125;</span><br><span class="line">交换律是 <span class="built_in">$</span><span class="built_in">$</span> a+b=b+a <span class="built_in">$</span><span class="built_in">$</span> 如 <span class="built_in">$</span><span class="built_in">$</span> 1+2=2+1=3 <span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\subsection</span>&#123;中括号&#125;</span><br><span class="line">交换律是 <span class="keyword">\[</span> a+b=b+a <span class="keyword">\]</span> 如 <span class="keyword">\[</span> 1+2=2+1=3 <span class="keyword">\]</span></span><br><span class="line"><span class="keyword">\subsection</span>&#123;displaymath环境&#125;</span><br><span class="line">交换律是 <span class="keyword">\begin</span>&#123;displaymath&#125;a+b=b+a<span class="keyword">\end</span>&#123;displaymath&#125;如 <span class="keyword">\begin</span>&#123;displaymath&#125;1+2=2+1=3<span class="keyword">\end</span>&#123;displaymath&#125;</span><br><span class="line"><span class="keyword">\subsection</span>&#123;自动编号公式equation环境&#125;</span><br><span class="line">交换律见式<span class="keyword">\ref</span>&#123;eq-commutative&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;equation&#125;</span><br><span class="line">    a+b=b+a <span class="keyword">\label</span>&#123;eq-commutative&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;equation&#125;</span><br><span class="line"><span class="keyword">\subsection</span>&#123;不编号公式equation*环境&#125;</span><br><span class="line">交换律见式<span class="keyword">\ref</span>&#123;eq-commutative2&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;equation*&#125;</span><br><span class="line">    a+b=b+a <span class="keyword">\label</span>&#123;eq-commutative2&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;equation*&#125; <span class="comment">% 要引入amsmath包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex40.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex41.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex42.png"> </p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex43.png"> </p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex44.png"></p>
<h3 id="2-9-矩阵"><a href="#2-9-矩阵" class="headerlink" title="2.9 矩阵"></a>2.9 矩阵</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\documentclass&#123;ctexart&#125;</span><br><span class="line"></span><br><span class="line">\usepackage&#123;ctex&#125;</span><br><span class="line">\usepackage&#123;amsmath&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line"></span><br><span class="line">$</span><br><span class="line">\begin&#123;matrix&#125; % 要使用amsmath</span><br><span class="line">    0 &amp; 1 \\</span><br><span class="line">    1 &amp; 0</span><br><span class="line">\end&#123;matrix&#125;</span><br><span class="line">\quad</span><br><span class="line">\begin&#123;pmatrix&#125;</span><br><span class="line">    0 &amp; -i \\</span><br><span class="line">    i &amp; 0</span><br><span class="line">\end&#123;pmatrix&#125;</span><br><span class="line">\quad</span><br><span class="line">\begin&#123;bmatrix&#125;</span><br><span class="line">    0 &amp; -1 \\</span><br><span class="line">    2 &amp; 0</span><br><span class="line">\end&#123;bmatrix&#125;</span><br><span class="line">\quad</span><br><span class="line">\begin&#123;Bmatrix&#125;</span><br><span class="line">    i &amp; 0 \\</span><br><span class="line">    0 &amp; -i</span><br><span class="line">\end&#123;Bmatrix&#125;</span><br><span class="line">\quad</span><br><span class="line">\begin&#123;vmatrix&#125;</span><br><span class="line">    a &amp; b \\</span><br><span class="line">    c &amp; d</span><br><span class="line">\end&#123;vmatrix&#125;</span><br><span class="line">\quad </span><br><span class="line">\begin&#123;Vmatrix&#125;</span><br><span class="line">    a &amp; b \\</span><br><span class="line">    c &amp; d</span><br><span class="line">\end&#123;Vmatrix&#125;</span><br><span class="line">$</span><br><span class="line"></span><br><span class="line">$</span><br><span class="line">A= \begin&#123;pmatrix&#125;</span><br><span class="line">    a_&#123;11&#125;^2 &amp; a_&#123;12&#125;^2 &amp; a_&#123;13&#125;^2 \\</span><br><span class="line">    0 &amp; a_&#123;22&#125; &amp; a_&#123;23&#125; \\</span><br><span class="line">    0 &amp; 0 &amp; a_&#123;33&#125;</span><br><span class="line">\end&#123;pmatrix&#125;</span><br><span class="line">$</span><br><span class="line"></span><br><span class="line">$</span><br><span class="line">A = \begin&#123;bmatrix&#125;</span><br><span class="line">    a_&#123;11&#125; &amp; \dots &amp; a_&#123;1n&#125; \\</span><br><span class="line">    &amp; \ddots &amp; \vdots \\</span><br><span class="line">    0 &amp; &amp; a_&#123;nn&#125; </span><br><span class="line">\end&#123;bmatrix&#125;_&#123;n \times n&#125;</span><br><span class="line">$</span><br><span class="line"></span><br><span class="line">% 分块矩阵</span><br><span class="line">$</span><br><span class="line">\begin&#123;pmatrix&#125;</span><br><span class="line">    \begin&#123;matrix&#125;</span><br><span class="line">        1 &amp; 0 \\</span><br><span class="line">        0 &amp; 1</span><br><span class="line">    \end&#123;matrix&#125;</span><br><span class="line">    &amp; \text&#123;\Large 0&#125; \\</span><br><span class="line">    \text&#123;\Large 0&#125; &amp; \begin&#123;matrix&#125;</span><br><span class="line">        1 &amp; 0 \\</span><br><span class="line">        0 &amp; -1</span><br><span class="line">    \end&#123;matrix&#125;</span><br><span class="line">\end&#123;pmatrix&#125;</span><br><span class="line">$</span><br><span class="line"></span><br><span class="line">% 三角矩阵</span><br><span class="line">$</span><br><span class="line">\begin&#123;pmatrix&#125;</span><br><span class="line">    a_&#123;11&#125; &amp; a_&#123;12&#125; &amp; \cdots &amp; a_&#123;1n&#125; \\</span><br><span class="line">    &amp; a_&#123;22&#125; &amp; \cdots &amp; a_&#123;2n&#125; \\</span><br><span class="line">    &amp; &amp; \ddots &amp; \vdots \\</span><br><span class="line">    &amp; &amp; &amp; a_&#123;nn&#125;</span><br><span class="line">\end&#123;pmatrix&#125;</span><br><span class="line">$</span><br><span class="line"></span><br><span class="line">% 连续省略号</span><br><span class="line">$</span><br><span class="line">\begin&#123;pmatrix&#125;</span><br><span class="line">    1 &amp; \frac 12 &amp; \frac 13 &amp; \dots &amp; \frac 1n \\</span><br><span class="line">    \vdots &amp; \hdotsfor&#123;3&#125; &amp; \vdots \\</span><br><span class="line">    m &amp; \frac m2 &amp; \frac m3 &amp; \dots &amp; \frac mn</span><br><span class="line">\end&#123;pmatrix&#125;</span><br><span class="line">$</span><br><span class="line"></span><br><span class="line">复数$ z = (x,y) $也可以使用矩阵</span><br><span class="line">$ z = \left( % 这里要单独加括号</span><br><span class="line">\begin&#123;smallmatrix&#125;</span><br><span class="line">    x &amp; -y \\ y &amp; x</span><br><span class="line">\end&#123;smallmatrix&#125;</span><br><span class="line">\right) $</span><br><span class="line"></span><br><span class="line">$</span><br><span class="line">\begin&#123;array&#125;&#123;r|r&#125;</span><br><span class="line">    \frac12 &amp; 0 \\</span><br><span class="line">    \hline</span><br><span class="line">    0 &amp; -\frac abc \\</span><br><span class="line">\end&#123;array&#125;</span><br><span class="line">$</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex45.png"></p>
<blockquote>
<p>常用省略号：</p>
<ul>
<li><code>\dots</code>、<code>\cdots</code>：水平省略号</li>
<li><code>\vdots</code>：垂直省略号</li>
<li><code>\ddots</code>：右斜省略号</li>
</ul>
</blockquote>
<h3 id="2-10-多行公式"><a href="#2-10-多行公式" class="headerlink" title="2.10 多行公式"></a>2.10 多行公式</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;ctexart&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;ctex&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;amsmath&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;amssymb&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;多行公式&#125;</span><br><span class="line">我们一般通过 <span class="keyword">\textbackslash</span> <span class="keyword">\textbackslash</span> 来实现换行，</span><br><span class="line"></span><br><span class="line">通过<span class="keyword">\&amp;</span>实现对齐，</span><br><span class="line"></span><br><span class="line">所有环境共用编号。</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;编号环境 gather&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;gather&#125;</span><br><span class="line">    a + b = b + a <span class="keyword">\\</span></span><br><span class="line">    ab ba</span><br><span class="line"><span class="keyword">\end</span>&#123;gather&#125;</span><br><span class="line">在某个公式后加 <span class="keyword">\textbackslash</span> notag 可取消编号，如：</span><br><span class="line"><span class="keyword">\begin</span>&#123;gather&#125;</span><br><span class="line">    3<span class="built_in">^</span>2 + 4<span class="built_in">^</span>2 = 5 <span class="built_in">^</span>2 <span class="keyword">\notag</span> <span class="keyword">\\</span></span><br><span class="line">    a = b + c</span><br><span class="line"><span class="keyword">\end</span>&#123;gather&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;不编号环境 gather*&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;gather*&#125;</span><br><span class="line">    3+5=5+3=8 <span class="keyword">\\</span></span><br><span class="line">    3 <span class="keyword">\times</span> 5 = 5 * 3</span><br><span class="line"><span class="keyword">\end</span>&#123;gather*&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;编号对齐环境align&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;align&#125;</span><br><span class="line">    x <span class="built_in">&amp;</span>= t + <span class="keyword">\cos</span> t + 1 <span class="keyword">\\</span></span><br><span class="line">    y+1 <span class="built_in">&amp;</span>= 2 <span class="keyword">\sin</span> t</span><br><span class="line"><span class="keyword">\end</span>&#123;align&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;不编号对齐环境align*&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;align*&#125;</span><br><span class="line">    x <span class="built_in">&amp;</span>= t <span class="built_in">&amp;</span> x <span class="built_in">&amp;</span>= <span class="keyword">\cos</span> t <span class="built_in">&amp;</span> x <span class="built_in">&amp;</span>= t <span class="keyword">\\</span></span><br><span class="line">    y <span class="built_in">&amp;</span>= 2t <span class="built_in">&amp;</span> y <span class="built_in">&amp;</span>= <span class="keyword">\sin</span>(t+1) <span class="built_in">&amp;</span> y <span class="built_in">&amp;</span>= <span class="keyword">\sin</span> t</span><br><span class="line"><span class="keyword">\end</span>&#123;align*&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;连行公式split&#125;</span><br><span class="line">对齐采用align的方式，编号位于整个公式中间。注意，split还需要使用equation包起来才能奏效。在其后加 <span class="keyword">\textbackslash</span> notag 可取消编号。</span><br><span class="line"><span class="keyword">\begin</span>&#123;equation&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;split&#125;</span><br><span class="line">    <span class="keyword">\cos</span> 2x <span class="built_in">&amp;</span> = <span class="keyword">\cos</span><span class="built_in">^</span>2 x - sin<span class="built_in">^</span>2 x <span class="keyword">\\</span></span><br><span class="line">    <span class="built_in">&amp;</span> = 2 <span class="keyword">\cos</span><span class="built_in">^</span>2 x - 1</span><br><span class="line"><span class="keyword">\end</span>&#123;split&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;equation&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;大括号cases&#125;</span><br><span class="line">每行使用 <span class="keyword">\&amp;</span> 分割为两部分，通常用于表示值和条件。注意，cases还需要使用equation包起来才能奏效。在其后加 <span class="keyword">\textbackslash</span> notag 可取消编号。</span><br><span class="line"><span class="keyword">\begin</span>&#123;equation&#125;</span><br><span class="line">    D(x)=<span class="keyword">\begin</span>&#123;cases&#125;</span><br><span class="line">        1, <span class="built_in">&amp;</span> <span class="keyword">\text</span>&#123;当&#125; x <span class="keyword">\in</span> <span class="keyword">\mathbb</span>&#123;Q&#125;;<span class="keyword">\\</span></span><br><span class="line">        0, <span class="built_in">&amp;</span> <span class="keyword">\text</span>&#123;当&#125; x <span class="keyword">\in</span> <span class="keyword">\mathbb</span>&#123;R&#125;.</span><br><span class="line">    <span class="keyword">\end</span>&#123;cases&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;equation&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex46.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex47.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex48.png"></p>
<h3 id="2-11-参考文献-BibTeX"><a href="#2-11-参考文献-BibTeX" class="headerlink" title="2.11 参考文献 BibTeX"></a>2.11 参考文献 BibTeX</h3><h4 id="直接写入展示"><a href="#直接写入展示" class="headerlink" title="直接写入展示"></a>直接写入展示</h4><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;ctexart&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;ctex&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line">此处引用一篇文章<span class="keyword">\cite</span>&#123;article1&#125;，此处引用一本书<span class="keyword">\cite</span>&#123;book1&#125;等等。</span><br><span class="line"><span class="comment">% 这里编译会不全，要编译两次</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;thebibliography&#125;&#123;99&#125;</span><br><span class="line">    <span class="keyword">\bibitem</span>&#123;article1&#125;陈力回,苏伟,陈晓云./emph&#123;基于LaTeX的Web数学公式提取方法研究&#125;[J].计算机科学. 2014(06)</span><br><span class="line">    <span class="keyword">\bibitem</span>&#123;book1&#125;William H. Press,Sual A. Teukolsky,William T. Vettering,Brian P. Flannery,<span class="keyword">\emph</span>&#123;Numerical Recipes 3rd Edition:The Art of Scientific Computing&#125;</span><br><span class="line">    Cambridge University Press, New York,2007.</span><br><span class="line">    <span class="keyword">\bibitem</span>&#123;book2&#125; Kopka Helmut, W. Daly Patrick,<span class="keyword">\emph</span>&#123;Guide to <span class="keyword">\LaTeX</span>&#125;,<span class="built_in">$</span> 4<span class="built_in">^</span>&#123;th&#125; <span class="built_in">$</span> Edition.</span><br><span class="line">    Available at <span class="keyword">\texttt</span>&#123;http://www.amazon.com&#125;.</span><br><span class="line">    <span class="keyword">\bibitem</span>&#123;book3&#125; Graetzer George, <span class="keyword">\emph</span>&#123;Math Into <span class="keyword">\LaTeX</span>&#125;,BrikhAouser Boston; 3 edition (June 22,2000).</span><br><span class="line">    </span><br><span class="line"><span class="keyword">\end</span>&#123;thebibliography&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex49.png"></p>
<h4 id="单独文件管理"><a href="#单独文件管理" class="headerlink" title="单独文件管理"></a>单独文件管理</h4><p><code>test.bib</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@BOOK&#123;mittelbach2004,</span><br><span class="line">title = &#123;The &#123;&#123;\Latex&#125;&#125; Companion&#125;,</span><br><span class="line">publisher = &#123;Addison-Wesley&#125;,</span><br><span class="line">year = &#123;2004&#125;,</span><br><span class="line">author = &#123;Frank Mittelbach and Michel Goossens&#125;,</span><br><span class="line">series = &#123;Tools and Techniques for  Computer Typesetting&#125;,</span><br><span class="line">address = &#123;Boston&#125;,</span><br><span class="line">edition = &#123;Second&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex50.png"></p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;ctexart&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;ctex&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\bibliographystyle</span>&#123;plain&#125; <span class="comment">% plain unsrt alpha abbrv</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"></span><br><span class="line">这里我们引用<span class="keyword">\cite</span>&#123;mittelbach2004&#125;。</span><br><span class="line"></span><br><span class="line"><span class="keyword">\nocite</span>&#123;*&#125; <span class="comment">% 表示把单独文件中所有的文献都列出来</span></span><br><span class="line"><span class="keyword">\bibliography</span>&#123;bib/test&#125; <span class="comment">%可以写多个bib文件在这里面，逗号分开</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>未能完成，自行学习。</p>
</blockquote>
<h4 id="参考文献-BibLaTeX"><a href="#参考文献-BibLaTeX" class="headerlink" title="参考文献 BibLaTeX"></a>参考文献 BibLaTeX</h4><ul>
<li><p>也是一种编译写入参考文献的排版引擎。</p>
</li>
<li><p>需要更改文献工具</p>
<p><code>BibTeX</code> – &gt; <code>Biber</code></p>
</li>
</ul>
<h3 id="2-12-自定义命令、环境"><a href="#2-12-自定义命令、环境" class="headerlink" title="2.12 自定义命令、环境"></a>2.12 自定义命令、环境</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;ctexart&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;ctex&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">% 文本</span></span><br><span class="line"><span class="keyword">\newcommand</span>&#123;<span class="keyword">\PRC</span>&#125;&#123;People&#x27;s Republic of <span class="keyword">\emph</span>&#123;China&#125;&#125;</span><br><span class="line"><span class="comment">% 含参数</span></span><br><span class="line"><span class="keyword">\newcommand</span>&#123;<span class="keyword">\love</span>&#125;[2]&#123;<span class="params">#1</span> 喜欢 <span class="params">#2</span>&#125;</span><br><span class="line"><span class="keyword">\newcommand</span>&#123;<span class="keyword">\hate</span>&#125;[2]&#123;<span class="params">#2</span> 不喜欢 <span class="params">#1</span>&#125;</span><br><span class="line"><span class="comment">% 含默认参数</span></span><br><span class="line"><span class="keyword">\newcommand</span>&#123;<span class="keyword">\loves</span>&#125;[3][喜欢]&#123;<span class="params">#2</span><span class="params">#1</span><span class="params">#3</span>&#125;</span><br><span class="line"><span class="comment">% 定义环境</span></span><br><span class="line"><span class="keyword">\newenvironment</span>&#123;Quotation&#125;[1]</span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">\newcommand</span>&#123;<span class="keyword">\quotesource</span>&#125;&#123;<span class="params">#1</span>&#125;</span><br><span class="line">    <span class="keyword">\begin</span>&#123;quotation&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">\par</span><span class="keyword">\hfil</span>---《<span class="keyword">\textit</span>&#123;<span class="keyword">\quotesource</span>》&#125;</span><br><span class="line">    <span class="keyword">\end</span>&#123;quotation&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;我的摘要&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\PRC</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\love</span>&#123;猫儿&#125;&#123;鱼&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\hate</span>&#123;猫儿&#125;&#123;鱼&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\loves</span>&#123;猫儿&#125;&#123;鱼&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\loves</span>[爱]&#123;猫儿&#125;&#123;鱼&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;Quotation&#125;&#123;易经&#125;</span><br><span class="line">    初九，潜龙勿用。</span><br><span class="line"><span class="keyword">\end</span>&#123;Quotation&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/latex/latex51.png"></p>
]]></content>
      <categories>
        <category>通用知识</category>
      </categories>
      <tags>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>开发颜色素材——原神</title>
    <url>/butterflyblog/2023/08/03/%E5%BC%80%E5%8F%91%E9%A2%9C%E8%89%B2%E7%B4%A0%E6%9D%90%E2%80%94%E2%80%94%E5%8E%9F%E7%A5%9E/</url>
    <content><![CDATA[<h1 id="开发颜色素材——原神"><a href="#开发颜色素材——原神" class="headerlink" title="开发颜色素材——原神"></a>开发颜色素材——原神</h1><blockquote>
<p>一个常用的占位无用背景色：<code>#f8f8f8 </code> 淡浅灰</p>
</blockquote>
<h4 id="来源1：璃月港"><a href="#来源1：璃月港" class="headerlink" title="来源1：璃月港"></a><a href="https://www.bilibili.com/video/BV1i84y1h75N/?spm_id_from=333.999.0.0&vd_source=c8fd2e0497e85b922bd7937e4829dc8f">来源1：璃月港</a></h4><h4 id="1-1-香菱"><a href="#1-1-香菱" class="headerlink" title="1.1 香菱"></a>1.1 香菱</h4><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/genshincolor/image-20230119174702280.png" alt="image-20230119174702280" style="zoom:50%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#000000</span><br><span class="line">#384871</span><br><span class="line">#E7BD39</span><br><span class="line">#AB4F3F</span><br><span class="line">#47855A</span><br></pre></td></tr></table></figure>



<h4 id="1-2-申鹤"><a href="#1-2-申鹤" class="headerlink" title="1.2 申鹤"></a>1.2 申鹤</h4><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/genshincolor/image-20230119174817927.png" alt="image-20230119174817927" style="zoom:50%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#232B36</span><br><span class="line">#5E7C89</span><br><span class="line">#B4BFD0</span><br><span class="line">#8694AD</span><br><span class="line">#9C3129</span><br></pre></td></tr></table></figure>



<h4 id="1-3-魈"><a href="#1-3-魈" class="headerlink" title="1.3 魈"></a>1.3 魈</h4><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/genshincolor/image-20230119174923461.png" alt="image-20230119174923461" style="zoom:50%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#333C42</span><br><span class="line">#316658</span><br><span class="line">#5EA69C</span><br><span class="line">#C2CFA2</span><br><span class="line">#A4795E</span><br><span class="line">#706690</span><br></pre></td></tr></table></figure>



<h4 id="1-4-胡桃"><a href="#1-4-胡桃" class="headerlink" title="1.4 胡桃"></a>1.4 胡桃</h4><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/genshincolor/image-20230119175000000.png" alt="image-20230119175000000" style="zoom:50%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#3A1B19</span><br><span class="line">#7B595E</span><br><span class="line">#C7A085</span><br><span class="line">#FCF0E1</span><br><span class="line">#C94737</span><br></pre></td></tr></table></figure>



<h4 id="1-5-云堇"><a href="#1-5-云堇" class="headerlink" title="1.5 云堇"></a>1.5 云堇</h4><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/genshincolor/image-20230119175045668.png" alt="image-20230119175045668" style="zoom: 50%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#1E1A22</span><br><span class="line">#67A4BA</span><br><span class="line">#4E4C72</span><br><span class="line">#B94E5E</span><br><span class="line">#D389A1</span><br></pre></td></tr></table></figure>



<h4 id="1-6-钟离"><a href="#1-6-钟离" class="headerlink" title="1.6 钟离"></a>1.6 钟离</h4><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/genshincolor/image-20230119175127600.png" alt="image-20230119175127600" style="zoom:50%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#2F2321</span><br><span class="line">#AA4F23</span><br><span class="line">#F8EBDC</span><br><span class="line">#FED875</span><br><span class="line">#CF627A</span><br></pre></td></tr></table></figure>



<h4 id="1-6-甘雨"><a href="#1-6-甘雨" class="headerlink" title="1.6 甘雨"></a>1.6 甘雨</h4><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/genshincolor/image-20230119175157962.png" alt="image-20230119175157962" style="zoom:50%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#33395B</span><br><span class="line">#5D74A2</span><br><span class="line">#C4D8F2</span><br><span class="line">#F2E8E3</span><br><span class="line">#7C282B</span><br></pre></td></tr></table></figure>



<h4 id="1-7-刻晴"><a href="#1-7-刻晴" class="headerlink" title="1.7 刻晴"></a>1.7 刻晴</h4><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/genshincolor/image-20230119175226756.png" alt="image-20230119175226756" style="zoom:50%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#211A3E</span><br><span class="line">#453370</span><br><span class="line">#A597B6</span><br><span class="line">#FEF3E8</span><br><span class="line">#D06C9D</span><br></pre></td></tr></table></figure>





<h4 id="来源2：稻妻城"><a href="#来源2：稻妻城" class="headerlink" title="来源2：稻妻城"></a><a href="https://www.bilibili.com/video/BV1W24y1e75S/?spm_id_from=333.337.search-card.all.click&vd_source=c8fd2e0497e85b922bd7937e4829dc8f">来源2：稻妻城</a></h4><h4 id="2-1-八重神子"><a href="#2-1-八重神子" class="headerlink" title="2.1 八重神子"></a>2.1 八重神子</h4><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/genshincolor/image-20230119175544863.png" alt="image-20230119175544863" style="zoom:50%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#</span><br></pre></td></tr></table></figure>



<h4 id="2-2-早柚"><a href="#2-2-早柚" class="headerlink" title="2.2 早柚"></a>2.2 早柚</h4><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/genshincolor/image-20230119175615925.png" alt="image-20230119175615925" style="zoom:50%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#</span><br></pre></td></tr></table></figure>



<h4 id="2-3-雷电将军"><a href="#2-3-雷电将军" class="headerlink" title="2.3 雷电将军"></a>2.3 雷电将军</h4><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/genshincolor/image-20230119175645940.png" alt="image-20230119175645940" style="zoom:50%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#</span><br></pre></td></tr></table></figure>



<h4 id="2-4-宵宫"><a href="#2-4-宵宫" class="headerlink" title="2.4 宵宫"></a>2.4 宵宫</h4><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/genshincolor/image-20230119175717878.png" alt="image-20230119175717878" style="zoom:50%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">#CD4432</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#</span><br></pre></td></tr></table></figure>



<h4 id="2-5-枫原万叶"><a href="#2-5-枫原万叶" class="headerlink" title="2.5 枫原万叶"></a>2.5 枫原万叶</h4><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/genshincolor/image-20230119175802792.png" alt="image-20230119175802792" style="zoom:50%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">#</span><br><span class="line">#C33828</span><br><span class="line">#</span><br><span class="line">#</span><br></pre></td></tr></table></figure>



<h4 id="2-6-神里绫华"><a href="#2-6-神里绫华" class="headerlink" title="2.6 神里绫华"></a>2.6 神里绫华</h4><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/genshincolor/image-20230119175841853.png" alt="image-20230119175841853" style="zoom:50%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">#414C87</span><br><span class="line">#9CB3D4</span><br><span class="line">#ECEDEB</span><br><span class="line">#</span><br></pre></td></tr></table></figure>



<h4 id="2-7-荒泷一斗"><a href="#2-7-荒泷一斗" class="headerlink" title="2.7 荒泷一斗"></a>2.7 荒泷一斗</h4><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/genshincolor/image-20230119175910185.png" alt="image-20230119175910185" style="zoom:50%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#F7DB78</span><br><span class="line">#</span><br></pre></td></tr></table></figure>



<h4 id="2-8-珊瑚宫心海"><a href="#2-8-珊瑚宫心海" class="headerlink" title="2.8 珊瑚宫心海"></a>2.8 珊瑚宫心海</h4><img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/posts/genshincolor/image-20230119175944139.png" alt="image-20230119175944139" style="zoom:50%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">#</span><br><span class="line">#8E8DC8</span><br><span class="line">#F7E2DB</span><br><span class="line">#</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>通用知识</category>
      </categories>
      <tags>
        <tag>原神</tag>
      </tags>
  </entry>
  <entry>
    <title>弹性盒子 flex 布局语法</title>
    <url>/butterflyblog/2023/07/10/%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90flex%E5%B8%83%E5%B1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="弹性盒子flex布局语法"><a href="#弹性盒子flex布局语法" class="headerlink" title="弹性盒子flex布局语法"></a>弹性盒子flex布局语法</h1><blockquote>
<p>传统为盒子模型布局，但有缺点，如：无法实现垂直居中</p>
<p>Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。</p>
</blockquote>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p><strong>任何一个容器都可以指定为Flex布局。</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>行内元素也可以使用Flex布局。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Webkit内核的浏览器，必须加上-webkit前缀。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex; <span class="comment">/* Safari */</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。</p>
<ul>
<li><p>采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。</p>
<p>它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230402162410751.png" alt="image-20230402162410751" style="zoom: 80%;" />

<ul>
<li><p>容器默认存在两根轴：</p>
<ul>
<li><p>水平的主轴（main axis）</p>
<blockquote>
<p>主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end</p>
</blockquote>
</li>
<li><p>垂直的交叉轴（cross axis）</p>
<blockquote>
<p>交叉轴的开始位置叫做cross start，结束位置叫做cross end</p>
</blockquote>
</li>
</ul>
</li>
<li><p>项目默认沿主轴排列。</p>
</li>
<li><p>单个项目占据的主轴空间叫做main size，</p>
<p>占据的交叉轴空间叫做cross size。</p>
</li>
</ul>
</li>
</ul>
<h3 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h3><h4 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h4><p>决定主轴的方向（即项目的排列方向）</p>
<ul>
<li>row（默认值）：主轴为水平方向，起点在左端。</li>
<li>row-reverse：主轴为水平方向，起点在右端。</li>
<li>column：主轴为垂直方向，起点在上沿。</li>
<li>column-reverse：主轴为垂直方向，起点在下沿。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230402162751718.png" alt="image-20230402162751718" style="zoom:80%;" />

<h4 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h4><p>默认情况下，项目都排在一条线（又称”轴线”）上。</p>
<p>flex-wrap属性定义，如果一条轴线排不下，如何换行。</p>
<ul>
<li><p>nowrap（默认）：不换行</p>
</li>
<li><p>wrap：换行，第一行在上方</p>
</li>
<li><p>wrap-reverse：换行，第一行在下方</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230402162859131.png" alt="image-20230402162859131" style="zoom:80%;" />

<h4 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h4><p>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式</p>
<p>默认值为row nowrap</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; &lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h4><p>定义了项目在主轴上的对齐方式</p>
<p>具体对齐方式与轴的方向有关，下面假设主轴为从左到右。</p>
<ul>
<li>flex-start（默认值）：左对齐</li>
<li>flex-end：右对齐</li>
<li>center： 居中</li>
<li>space-between：两端对齐，项目之间的间隔都相等</li>
<li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://www.runoob.com/wp-content/uploads/2015/07/c55dfe8e3422458b50e985552ef13ba5.png" alt="img" style="zoom:80%;" />



<h4 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h4><p>定义项目在交叉轴上如何对齐</p>
<p>具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p>
<ul>
<li>flex-start：交叉轴的起点对齐</li>
<li>flex-end：交叉轴的终点对齐</li>
<li>center：交叉轴的中点对齐</li>
<li>baseline: 项目的第一行文字的基线对齐</li>
<li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://www.runoob.com/wp-content/uploads/2015/07/2b0c39c7e7a80d5a784c8c2ca63cde17.png" alt="img" style="zoom:80%;" />



<h4 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h4><p>定义了多根轴线的对齐方式。</p>
<p>如果项目只有一根轴线，该属性不起作用</p>
<ul>
<li>flex-start：与交叉轴的起点对齐</li>
<li>flex-end：与交叉轴的终点对齐</li>
<li>center：与交叉轴的中点对齐</li>
<li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布</li>
<li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍</li>
<li>stretch（默认值）：轴线占满整个交叉轴</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://www.runoob.com/wp-content/uploads/2015/07/f10918ccb8a13247c9d47715a2bd2c33.png" alt="img" style="zoom:80%;" />

<h3 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h3><h4 id="order"><a href="#order" class="headerlink" title="order"></a>order</h4><p>定义项目的排列顺序。</p>
<p>数值越小，排列越靠前，默认为0。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: &lt;integer&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230402163850395.png" alt="image-20230402163850395" style="zoom:80%;" />

<h4 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h4><p>定义项目的放大比例。</p>
<p>默认为0，即如果存在剩余空间，也不放大。</p>
<blockquote>
<p>如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。</p>
<p>如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: &lt;number&gt;; <span class="comment">/* default 0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230402163934529.png" alt="image-20230402163934529" style="zoom:80%;" />

<h4 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h4><p>定义了项目的缩小比例。</p>
<p>默认为1，即如果空间不足，该项目将缩小。</p>
<blockquote>
<p>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。</p>
<p>如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。</p>
<p>负值对该属性无效。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: &lt;number&gt;; <span class="comment">/* default 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230402164028190.png" alt="image-20230402164028190" style="zoom:80%;" />

<h4 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h4><p>定义了在分配多余空间之前，项目占据的主轴空间（main size）。</p>
<p>浏览器根据这个属性，计算主轴是否有多余空间。</p>
<p>它的默认值为auto，即项目的本来大小。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: &lt;length&gt; | auto; <span class="comment">/* default auto */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。</p>
<h4 id="x3D-x3D-flex"><a href="#x3D-x3D-flex" class="headerlink" title="&#x3D;&#x3D;flex"></a>&#x3D;&#x3D;flex</h4><p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写。</p>
<p>默认值为0 1 auto。后两个属性可选。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: none | [ &lt;<span class="string">&#x27;flex-grow&#x27;</span>&gt; &lt;<span class="string">&#x27;flex-shrink&#x27;</span>&gt;? || &lt;<span class="string">&#x27;flex-basis&#x27;</span>&gt; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该属性有两个快捷值：</p>
<ul>
<li><p>auto (1 1 auto) </p>
<p>全都等比例放大或缩小</p>
</li>
<li><p>none (0 0 auto)</p>
<p>全都不放大缩小</p>
</li>
</ul>
<p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>
<h4 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h4><p>允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。</p>
<p>默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p>
<p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://www.runoob.com/wp-content/uploads/2015/07/55b19171b8b6b9487d717bf2ecbba6de.png" alt="img" style="zoom:80%;" />

]]></content>
      <categories>
        <category>Web技术</category>
      </categories>
      <tags>
        <tag>flex布局</tag>
      </tags>
  </entry>
  <entry>
    <title>《Django》入门 Notes（中）</title>
    <url>/butterflyblog/2023/06/02/%E3%80%8ADjango%E3%80%8B%E5%85%A5%E9%97%A8%20Notes%EF%BC%88%E4%B8%AD%EF%BC%89/</url>
    <content><![CDATA[<h1 id="《Django》入门-Notes（中）"><a href="#《Django》入门-Notes（中）" class="headerlink" title="《Django》入门 Notes（中）"></a>《Django》入门 Notes（中）</h1><p>@Seymour0314 来源官方文档<code>https://docs.djangoproject.com/zh-hans/4.2/intro/</code></p>
<blockquote>
<p>本文是Django 后端技术初级入门教程。</p>
<p>编程语言：Python</p>
</blockquote>
<p>[TOC]</p>
<h2 id="第-3-部分"><a href="#第-3-部分" class="headerlink" title="第 3 部分"></a>第 3 部分</h2><blockquote>
<p>本教程从 教程2结束的地方开始。我们将继续开发网络投票应用程序，并将着重于创建公共接口——“视图”。</p>
</blockquote>
<h3 id="3-1-概况"><a href="#3-1-概况" class="headerlink" title="3.1 概况"></a>3.1 概况</h3><ul>
<li><p>Django 中的视图的概念是「<strong>一类具有相同功能和模板的网页的集合</strong>」。</p>
<blockquote>
<p>比如，在一个博客应用中，你可能会创建如下几个视图：</p>
<ul>
<li>博客首页——展示最近的几项内容。</li>
<li>内容“详情”页——详细展示某项内容。</li>
<li>以年为单位的归档页——展示选中的年份里各个月份创建的内容。</li>
<li>以月为单位的归档页——展示选中的月份里各天创建的内容。</li>
<li>以天为单位的归档页——展示选中天里创建的所有内容。</li>
<li>评论处理器——用于响应为一项内容添加评论的操作。</li>
</ul>
<p>而在我们的投票应用中，我们需要下列几个视图：</p>
<ul>
<li>问题索引页——展示最近的几个投票问题。</li>
<li>问题详情页——展示某个投票的问题和不带结果的选项列表。</li>
<li>问题结果页——展示某个投票的结果。</li>
<li>投票处理器——用于响应用户为某个问题的特定选项投票的操作。</li>
</ul>
</blockquote>
</li>
<li><p>在 Django 中，网页和其他内容都是从视图派生而来。</p>
<p>每一个视图表现为一个 Python 函数（或者说方法，如果是在基于类的视图里的话）。</p>
<p>Django 将会根据用户请求的 URL 来选择使用哪个视图（更准确的说，是根据 URL 中域名之后的部分）。</p>
<blockquote>
<p>在你上网的过程中，很可能看见过像这样美丽的 URL：</p>
<p><code>ME2/Sites/dirmod.htm?sid=&amp;type=gen&amp;mod=Core+Pages&amp;gid=A6CD4967199A42D9B65B1B</code></p>
<p>别担心，Django 里的 <em>URL 样式</em> 要比这优雅的多！</p>
</blockquote>
</li>
<li><p>URL 样式是 URL 的一般形式 </p>
<blockquote>
<p>例如：<code>/newsarchive/&lt;year&gt;/&lt;month&gt;/</code>。</p>
</blockquote>
</li>
<li><p>为了将 URL 和视图关联起来，Django 使用了 ‘URLconfs’ 来配置。</p>
<p>URLconf 将 URL 模式映射到视图。</p>
<blockquote>
<p>本教程只会介绍 URLconf 的基础内容，你可以看看 <a href="https://docs.djangoproject.com/zh-hans/4.2/topics/http/urls/">URL调度器</a> 以获取更多内容。</p>
</blockquote>
</li>
</ul>
<h3 id="3-2-编写更多视图"><a href="#3-2-编写更多视图" class="headerlink" title="3.2 编写更多视图"></a>3.2 编写更多视图</h3><ul>
<li><p>现在让我们向 <code>polls/views.py</code> 里添加更多视图。</p>
<p>这些视图有一些不同，因为他们接收参数：</p>
<p><code>polls/views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">detail</span>(<span class="params">request, question_id</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;You&#x27;re looking at question %s.&quot;</span> % question_id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">results</span>(<span class="params">request, question_id</span>):</span><br><span class="line">    response = <span class="string">&quot;You&#x27;re looking at the results of question %s.&quot;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(response % question_id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vote</span>(<span class="params">request, question_id</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;You&#x27;re voting on question %s.&quot;</span> % question_id)</span><br></pre></td></tr></table></figure>
</li>
<li><p>把这些新视图添加进 <code>polls.urls</code> 模块里，</p>
<p>只要添加几个 <code>url()</code> 函数调用就行：</p>
<p><code>polls/urls.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># ex: /polls/</span></span><br><span class="line">    path(<span class="string">&quot;&quot;</span>, views.index, name=<span class="string">&quot;index&quot;</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/</span></span><br><span class="line">    path(<span class="string">&quot;&lt;int:question_id&gt;/&quot;</span>, views.detail, name=<span class="string">&quot;detail&quot;</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/results/</span></span><br><span class="line">    path(<span class="string">&quot;&lt;int:question_id&gt;/results/&quot;</span>, views.results, name=<span class="string">&quot;results&quot;</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/vote/</span></span><br><span class="line">    path(<span class="string">&quot;&lt;int:question_id&gt;/vote/&quot;</span>, views.vote, name=<span class="string">&quot;vote&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看效果</p>
<p>然后看看你的浏览器，如果你转到 “&#x2F;polls&#x2F;34&#x2F;“ ，Django 将会运行 <code>detail()</code> 方法并且展示你在 URL 里提供的问题 ID。</p>
<p>再试试 “&#x2F;polls&#x2F;34&#x2F;vote&#x2F;“ 和 “&#x2F;polls&#x2F;34&#x2F;vote&#x2F;“ ——你将会看到暂时用于占位的结果和投票页。</p>
<blockquote>
<p>记得先开服务器运行<code>py manage.py runserver</code></p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511195955371.png" alt="image-20230511195955371" style="zoom:67%;" /> 

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511200013525.png" alt="image-20230511200013525" style="zoom: 67%;" /> 

<blockquote>
<ul>
<li><p>问题 <code>question_id=34</code> 来自 <code>&lt;int:question_id&gt;</code>。</p>
<p>使用尖括号 “获得” 网址部分后发送给视图函数作为一个关键字参数。</p>
</li>
<li><p>字符串的 <code>question_id</code> 部分定义了要使用的名字，用来识别相匹配的模式，</p>
<p>而 <code>int</code> 部分是一种转换形式，用来确定应该匹配网址路径的什么模式。</p>
<p>冒号 (<code>:</code>) 用来分隔转换形式和模式名。</p>
</li>
</ul>
</blockquote>
</blockquote>
</li>
</ul>
<h3 id="3-3-写一个真正有用的视图"><a href="#3-3-写一个真正有用的视图" class="headerlink" title="3.3 写一个真正有用的视图"></a>3.3 写一个真正有用的视图</h3><blockquote>
<ul>
<li><p>每个视图必须要做的只有两件事：</p>
<ul>
<li>返回一个包含被请求页面内容的 <code>HttpResponse</code> 对象，</li>
<li>或者抛出一个异常，比如 <code>Http404</code>。</li>
</ul>
<p>至于你还想干些什么，随便你。</p>
</li>
<li><p>你的视图</p>
<ul>
<li><p>可以从数据库里读取记录</p>
</li>
<li><p>可以使用一个模板引擎（比如 Django 自带的，或者其他第三方的）</p>
</li>
<li><p>可以生成一个 PDF 文件</p>
</li>
<li><p>可以输出一个 XML</p>
</li>
<li><p>创建一个 ZIP 文件</p>
</li>
</ul>
<p>你可以做任何你想做的事，使用任何你想用的 Python 库。</p>
</li>
</ul>
</blockquote>
<ul>
<li><p>Django 只要求返回的是一个 <code>HttpResponse</code> ，或者抛出一个异常。</p>
<blockquote>
<p>因为 Django 自带的数据库 API 很方便，我们曾在 教程第 2 部分中学过，所以我们试试在视图里使用它。</p>
</blockquote>
</li>
<li><p>我们在 <code>index()</code> 函数里插入了一些新内容，</p>
<p>让它能展示数据库里以发布日期排序的最近 5 个投票问题，以空格分割：</p>
<p><code>polls/views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    latest_question_list = Question.objects.order_by(<span class="string">&quot;-pub_date&quot;</span>)[:<span class="number">5</span>]</span><br><span class="line">    output = <span class="string">&quot;, &quot;</span>.join([q.question_text <span class="keyword">for</span> q <span class="keyword">in</span> latest_question_list])</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(output)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Leave the rest of the views (detail, results, vote) unchanged</span></span><br></pre></td></tr></table></figure>

<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511205742413.png" alt="image-20230511205742413" style="zoom:80%;" /> 

<p>这里有个问题：页面的设计写死在视图函数的代码里的。</p>
<p>如果你想改变页面的样子，你需要编辑 Python 代码。</p>
<p>所以让我们使用 Django 的模板系统，只要创建一个视图，就可以将页面的设计从代码中分离出来。</p>
</blockquote>
</li>
<li><p>首先，在你的 <code>polls</code> 目录里创建一个 <code>templates</code> 目录。</p>
<p>Django 将会在这个目录里查找模板文件。</p>
<blockquote>
<ul>
<li><p>你项目的 <code>TEMPLATES</code> 配置项描述了 Django 如何载入和渲染模板。</p>
</li>
<li><p>默认的设置文件设置了 <code>DjangoTemplates</code> 后端，并将 <code>APP_DIRS</code> 设置成了 True。</p>
<p>这一选项将会让 <code>DjangoTemplates</code> 在每个 <code>INSTALLED_APPS</code> 文件夹中寻找 “templates” 子目录。</p>
<p>这就是为什么尽管我们没有像在第二部分中那样修改 DIRS 设置，Django 也能正确找到 polls 的模板位置的原因。</p>
</li>
</ul>
</blockquote>
<p>在你刚刚创建的 <code>templates</code> 目录里，再创建一个目录 <code>polls</code>，然后在其中新建一个文件 <code>index.html</code> 。</p>
<p><code>polls/templates/polls/index.html</code></p>
<blockquote>
<p>换句话说，你的模板文件的路径应该是 <code>polls/templates/polls/index.html</code> 。</p>
<p>因为<code>app_directories</code> 模板加载器是通过上述描述的方法运行的，</p>
<p>所以 Django 可以引用到 <code>polls/index.html</code> 这一模板了。</p>
<blockquote>
<ul>
<li><p>模板命名空间</p>
<p>虽然我们现在可以将模板文件直接放在 <code>polls/templates</code> 文件夹中（而不是再建立一个 <code>polls</code> 子文件夹），但是这样做不太好。</p>
<p>Django 将会选择第一个匹配的模板文件，如果你有一个模板文件正好和另一个应用中的某个模板文件重名，Django 没有办法 <em>区分</em> 它们。</p>
<p>我们需要帮助 Django 选择正确的模板，最好的方法就是把他们放入各自的 <em>命名空间</em> 中，也就是把这些模板放入一个和 <em>自身</em> 应用重名的子文件夹里。</p>
</li>
</ul>
</blockquote>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if latest_question_list %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for question in latest_question_list %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/polls/&#123;&#123; question.id &#125;&#125;/&quot;</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>No polls are available.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>备注</p>
<p>为了让教程看起来不那么长，所有的模板文件都只写出了核心代码。</p>
<p>在你自己创建的项目中，你应该使用 完整的 HTML 文档 。</p>
<blockquote>
<p>本次的完整HTML：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>POLLS<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Polls:<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% if latest_question_list %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for question in latest_question_list %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/polls/&#123;&#123; question.id &#125;&#125;/&quot;</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>No polls are available.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote>
</li>
</ul>
</li>
<li><p>然后，让我们更新一下 <code>polls/views.py</code> 里的 <code>index</code> 视图来使用模板：</p>
<p><code>polls/views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> loader</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    latest_question_list = Question.objects.order_by(<span class="string">&quot;-pub_date&quot;</span>)[:<span class="number">5</span>]</span><br><span class="line">    template = loader.get_template(<span class="string">&quot;polls/index.html&quot;</span>)</span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">&quot;latest_question_list&quot;</span>: latest_question_list,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(template.render(context, request))</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><p>上述代码的作用是，载入 <code>polls/index.html</code> 模板文件，并且向它传递一个上下文(context)。这个上下文是一个字典，它将模板内的变量映射为 Python 对象。</p>
</li>
<li><p>用你的浏览器访问 “&#x2F;polls&#x2F;“ ，你将会看见一个无序列表，列出了我们在 <a href="https://docs.djangoproject.com/zh-hans/4.2/intro/tutorial02/">教程第 2 部分</a> 中添加的 “What’s up” 投票问题，链接指向这个投票的详情页。</p>
</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511205932031.png" alt="image-20230511205932031" style="zoom:80%;" /></blockquote>
</li>
</ul>
<h4 id="一个快捷函数：-render"><a href="#一个快捷函数：-render" class="headerlink" title="一个快捷函数： render()"></a>一个快捷函数： <code>render()</code></h4><ul>
<li><p>「<strong>载入模板，填充上下文，再返回由它生成的 <code>HttpResponse</code>对象</strong>」</p>
<p>是一个非常常用的操作流程。</p>
</li>
<li><p>于是 Django 提供了一个快捷函数，</p>
<p>我们用它来重写 <code>index()</code> 视图：</p>
<p><code>polls/views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    latest_question_list = Question.objects.order_by(<span class="string">&quot;-pub_date&quot;</span>)[:<span class="number">5</span>]</span><br><span class="line">    context = &#123;<span class="string">&quot;latest_question_list&quot;</span>: latest_question_list&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;polls/index.html&quot;</span>, context)</span><br></pre></td></tr></table></figure>

<p>注意到，我们不再需要导入 <a href="https://docs.djangoproject.com/zh-hans/4.2/topics/templates/#module-django.template.loader"><code>loader</code></a> 和 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/request-response/#django.http.HttpResponse"><code>HttpResponse</code></a> 。</p>
<p>不过如果你还有其他函数（比如说 <code>detail</code>, <code>results</code>, 和 <code>vote</code> ）需要用到它的话，</p>
<p>就需要保持 <code>HttpResponse</code> 的导入。</p>
</li>
</ul>
<h3 id="3-4-抛出-404-错误"><a href="#3-4-抛出-404-错误" class="headerlink" title="3.4 抛出 404 错误"></a>3.4 抛出 404 错误</h3><ul>
<li><p>现在，我们来处理投票详情视图——它会显示指定投票的问题标题。下面是这个视图的代码：</p>
<p><code>polls/views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> Http404</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detail</span>(<span class="params">request, question_id</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        question = Question.objects.get(pk=question_id)</span><br><span class="line">    <span class="keyword">except</span> Question.DoesNotExist:</span><br><span class="line">        <span class="keyword">raise</span> Http404(<span class="string">&quot;Question does not exist&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;polls/detail.html&quot;</span>, &#123;<span class="string">&quot;question&quot;</span>: question&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>这里有个新原则。</p>
<p>如果指定问题 ID 所对应的问题不存在，这个视图就会抛出一个 <code>Http404</code> 异常。</p>
<blockquote>
<p>我们稍后再讨论你需要在 <code>polls/detail.html</code> 里输入什么，</p>
<p>但是如果你想试试上面这段代码是否正常工作的话，</p>
<p>你可以暂时把下面这段输进去：</p>
<p><code>polls/templates/polls/details.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>POLLS<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Polls:<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;&#123; question &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511211221223.png" alt="image-20230511211221223" style="zoom:67%;" /> 

<p>这样你就能测试了。</p>
<p>比如，测试<code>127.0.0.1:8000/polls/34/details/</code></p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511211519781.png" alt="image-20230511211519781" style="zoom:67%;" /></blockquote>
</li>
</ul>
<h4 id="一个快捷函数：-get-object-or-404"><a href="#一个快捷函数：-get-object-or-404" class="headerlink" title="一个快捷函数： get_object_or_404()"></a>一个快捷函数： <code>get_object_or_404()</code></h4><ul>
<li><p>尝试用 <code>get()</code>函数获取一个对象，如果不存在就抛出 <code>Http404</code>错误也是一个普遍的流程。</p>
<p>Django 也提供了一个快捷函数，下面是修改后的详情 <code>detail()</code> 视图代码：</p>
<p><code>polls/views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detail</span>(<span class="params">request, question_id</span>):</span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;polls/detail.html&quot;</span>, &#123;<span class="string">&quot;question&quot;</span>: question&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511212237975.png" alt="image-20230511212237975" style="zoom: 67%;" /> 
</blockquote>
<blockquote>
<p>设计哲学</p>
<ul>
<li><p>为什么我们使用辅助函数 <code>get_object_or_404()</code>而不是自己捕获 <code>ObjectDoesNotExist</code> 异常呢？</p>
<p>还有，为什么模型 API 不直接抛出 <code>ObjectDoesNotExist</code>而是抛出 <code>Http404</code>呢？</p>
</li>
<li><p>因为这样做会增加模型层和视图层的耦合性。</p>
<p>指导 Django 设计的最重要的思想之一就是要保证松散耦合。</p>
<p>一些受控的耦合将会被包含在 <code>django.shortcuts</code> 模块中。</p>
</li>
</ul>
</blockquote>
</li>
<li><p>也有 <code>get_list_or_404()</code>函数，</p>
<p>工作原理和 <code>get_object_or_404()</code> 一样，除了 <code>get()</code> 函数被换成了 <code>filter()</code> 函数。</p>
<p>如果列表为空的话会抛出 <code>Http404</code>异常。</p>
</li>
</ul>
<h3 id="3-5-使用模板系统"><a href="#3-5-使用模板系统" class="headerlink" title="3.5 使用模板系统"></a>3.5 使用模板系统</h3><ul>
<li><p>回过头去看看我们的 <code>detail()</code> 视图。它向模板传递了上下文变量 <code>question</code> 。</p>
<p>下面是 <code>polls/detail.html</code> 模板里正式的代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% for choice in question.choice_set.all %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; choice.choice_text &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>模板系统统一使用点符号来访问变量的属性。</p>
<blockquote>
<p>在示例 <code>&#123;&#123; question.question_text &#125;&#125;</code> 中，</p>
<ul>
<li><p>首先 Django 尝试对 <code>question</code> 对象使用字典查找（也就是使用 obj.get(str) 操作），</p>
</li>
<li><p>如果失败了就尝试属性查找（也就是 obj.str 操作），结果是成功了。</p>
</li>
<li><p>如果这一操作也失败的话，将会尝试列表查找（也就是 obj[int] 操作）。</p>
</li>
</ul>
</blockquote>
</li>
<li><p>在 <code>&#123;% for %&#125;</code>循环中发生的函数调用：</p>
<p><code>question.choice_set.all</code> 被解释为 Python 代码 <code>question.choice_set.all()</code> ，</p>
<p>将会返回一个可迭代的 <code>Choice</code> 对象，这一对象可以在 <code>&#123;% for %&#125;</code> 标签内部使用。</p>
<blockquote>
<p>查看 <a href="https://docs.djangoproject.com/zh-hans/4.2/topics/templates/">模板指南</a> 可以了解关于模板的更多信息。</p>
</blockquote>
</li>
</ul>
<h3 id="3-6-去除模板中的硬编码-URL"><a href="#3-6-去除模板中的硬编码-URL" class="headerlink" title="3.6 去除模板中的硬编码 URL"></a>3.6 去除模板中的硬编码 URL</h3><ul>
<li><p>还记得吗，我们在 <code>polls/index.html</code> 里编写投票链接时，链接是硬编码的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/polls/&#123;&#123; question.id &#125;&#125;/&quot;</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>问题在于，硬编码和强耦合的链接，对于一个包含很多应用的项目来说，修改起来是十分困难的。</p>
</li>
<li><p>然而，因为你在 <code>polls.urls</code> 的 <code>url()</code> 函数中通过 name 参数为 URL 定义了名字，</p>
<p>你可以使用 <code>&#123;% url %&#125;</code> 标签代替它：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;detail&#x27; question.id %&#125;&quot;</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个标签的工作方式是在 <code>polls.urls</code> 模块的 URL 定义中寻具有指定名字的条目。</p>
<p>你可以回忆一下，具有名字 ‘detail’ 的 URL 是在如下语句中定义的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment"># the &#x27;name&#x27; value as called by the &#123;% url %&#125; template tag</span></span><br><span class="line">path(<span class="string">&quot;&lt;int:question_id&gt;/&quot;</span>, views.detail, name=<span class="string">&quot;detail&quot;</span>),</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>如果你想改变投票详情视图的 URL，比如想改成 <code>polls/specifics/12/</code> ，</p>
<p>你不用在模板里修改任何东西（包括其它模板），</p>
<p>只要在 <code>polls/urls.py</code> 里稍微修改一下就行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment"># added the word &#x27;specifics&#x27;</span></span><br><span class="line">path(<span class="string">&quot;specifics/&lt;int:question_id&gt;/&quot;</span>, views.detail, name=<span class="string">&quot;detail&quot;</span>),</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-7-为-URL-名称添加命名空间"><a href="#3-7-为-URL-名称添加命名空间" class="headerlink" title="3.7 为 URL 名称添加命名空间"></a>3.7 为 URL 名称添加命名空间</h3><ul>
<li><p>教程项目只有一个应用，<code>polls</code> 。在一个真实的 Django 项目中，可能会有五个，十个，二十个，甚至更多应用。Django 如何分辨重名的 URL 呢？</p>
<p>举个例子，<code>polls</code> 应用有 <code>detail</code> 视图，可能另一个博客应用也有同名的视图。</p>
<p>Django 如何知道 <code>&#123;% url %&#125;</code> 标签到底对应哪一个应用的 URL 呢？</p>
</li>
<li><p>答案是：在根 URLconf 中添加命名空间。在 <code>polls/urls.py</code> 文件中稍作修改，加上 <code>app_name</code> 设置命名空间：</p>
<p><code>polls/urls.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">app_name = <span class="string">&quot;polls&quot;</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;&quot;</span>, views.index, name=<span class="string">&quot;index&quot;</span>),</span><br><span class="line">    path(<span class="string">&quot;&lt;int:question_id&gt;/&quot;</span>, views.detail, name=<span class="string">&quot;detail&quot;</span>),</span><br><span class="line">    path(<span class="string">&quot;&lt;int:question_id&gt;/results/&quot;</span>, views.results, name=<span class="string">&quot;results&quot;</span>),</span><br><span class="line">    path(<span class="string">&quot;&lt;int:question_id&gt;/vote/&quot;</span>, views.vote, name=<span class="string">&quot;vote&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>现在，编辑 <code>polls/index.html</code> 文件，从：</p>
<p><code>polls/templates/polls/index.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;detail&#x27; question.id %&#125;&quot;</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改为指向具有命名空间的详细视图：</p>
<p><code>polls/templates/polls/index.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;polls:detail&#x27; question.id %&#125;&quot;</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511214221490.png" alt="image-20230511214221490" style="zoom:80%;" /> 

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511214234075.png" alt="image-20230511214234075" style="zoom:80%;" /> 

<p>当你对你写的视图感到满意后，请阅读 教程的第 4 部分了解基础的表单处理和通用视图。</p>
</blockquote>
<h2 id="第-4-部分"><a href="#第-4-部分" class="headerlink" title="第 4 部分"></a>第 4 部分</h2><blockquote>
<p>本教程从 教程第 3 部分 结束的地方开始。我们将继续网络投票的应用，并将重点放在表单处理和精简我们的代码上。</p>
</blockquote>
<h3 id="4-1-编写一个简单的表单"><a href="#4-1-编写一个简单的表单" class="headerlink" title="4.1 编写一个简单的表单"></a>4.1 编写一个简单的表单</h3><ul>
<li><p>让我们更新一下在上一个教程中编写的投票详细页面的模板 (“polls&#x2F;detail.html”) ，</p>
<p>让它包含一个 HTML <code>&lt;form&gt;</code> 元素：</p>
<p><code>polls/templates/polls/detail.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&#123;% url &#x27;polls:vote&#x27; question.id %&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">&#123;% csrf_token %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">legend</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">    &#123;% if error_message %&#125;<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; error_message &#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#123;% endif %&#125;</span><br><span class="line">    &#123;% for choice in question.choice_set.all %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;choice&quot;</span> <span class="attr">id</span>=<span class="string">&quot;choice&#123;&#123; forloop.counter &#125;&#125;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; choice.id &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;choice&#123;&#123; forloop.counter &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; choice.choice_text &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Vote&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>简要说明：</p>
<ul>
<li><p>上面的模板在 Question 的每个 Choice 前添加一个单选按钮。</p>
<blockquote>
<p>每个单选按钮的 <code>value</code> 属性是对应的各个 Choice 的 ID。每个单选按钮的 <code>name</code> 是 <code>&quot;choice&quot;</code> 。这意味着，当有人选择一个单选按钮并提交表单提交时，它将发送一个 POST 数据 <code>choice=#</code> ，其中# 为选择的 Choice 的 ID。这是 HTML 表单的基本概念。</p>
</blockquote>
</li>
<li><p>我们将表单的 <code>action</code> 设置为 <code>&#123;% url 'polls:vote' question.id %&#125;</code>，并设置 <code>method=&quot;post&quot;</code>。</p>
<blockquote>
<p>使用 <code>method=&quot;post&quot;</code> （而不是 <code>method=&quot;get&quot;</code> ）是非常重要的，因为提交这个表单的行为将改变服务器端的数据。当你创建一个改变服务器端数据的表单时，使用 <code>method=&quot;post&quot;</code>。</p>
<p>这不是 Django 的特定技巧；这是优秀的网站开发技巧。</p>
</blockquote>
</li>
<li><p><code>forloop.counter</code> 指示 <code>for</code>标签已经循环多少次。</p>
</li>
<li><p>由于我们创建一个 POST 表单（它具有修改数据的作用），所以我们需要小心跨站点请求伪造。 </p>
<blockquote>
<p>谢天谢地，你不必太过担心，因为 Django 自带了一个非常有用的防御系统。 </p>
<p>简而言之，所有针对内部 URL 的 POST 表单都应该使用 <code>&#123;% csrf_token %&#125;</code> 模板标签。</p>
</blockquote>
</li>
</ul>
</blockquote>
</li>
<li><p>现在，让我们来创建一个 Django 视图来处理提交的数据。</p>
<p>记住，在 教程第 3 部分中，我们为投票应用创建了一个 URLconf ，包含这一行：</p>
<p><code>polls/urls.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path(<span class="string">&quot;&lt;int:question_id&gt;/vote/&quot;</span>, views.vote, name=<span class="string">&quot;vote&quot;</span>),</span><br></pre></td></tr></table></figure>
</li>
<li><p>我们还创建了一个 <code>vote()</code> 函数的虚拟实现。</p>
<p>让我们来创建一个真实的版本。 将下面的代码添加到 <code>polls/views.py</code> ：</p>
<p><code>polls/views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Choice, Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vote</span>(<span class="params">request, question_id</span>):</span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        selected_choice = question.choice_set.get(pk=request.POST[<span class="string">&quot;choice&quot;</span>])</span><br><span class="line">    <span class="keyword">except</span> (KeyError, Choice.DoesNotExist):</span><br><span class="line">        <span class="comment"># Redisplay the question voting form.</span></span><br><span class="line">        <span class="keyword">return</span> render(</span><br><span class="line">            request,</span><br><span class="line">            <span class="string">&quot;polls/detail.html&quot;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;question&quot;</span>: question,</span><br><span class="line">                <span class="string">&quot;error_message&quot;</span>: <span class="string">&quot;You didn&#x27;t select a choice.&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        selected_choice.votes += <span class="number">1</span></span><br><span class="line">        selected_choice.save()</span><br><span class="line">        <span class="comment"># Always return an HttpResponseRedirect after successfully dealing</span></span><br><span class="line">        <span class="comment"># with POST data. This prevents data from being posted twice if a</span></span><br><span class="line">        <span class="comment"># user hits the Back button.</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">&quot;polls:results&quot;</span>, args=(question.<span class="built_in">id</span>,)))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>以上代码中有些内容还未在本教程中提到过：</p>
<ul>
<li><p><code>request.POST</code>是一个类字典对象，让你可以通过关键字的名字获取提交的数据。 </p>
<p>这个例子中， <code>request.POST[&#39;choice&#39;]</code> 以字符串形式返回选择的 Choice 的 ID。</p>
<p> <code>request.POST</code> 的值永远是字符串。</p>
<p>注意，Django 还以同样的方式提供 <code>request.GET</code> 用于访问 GET 数据 </p>
<p>但我们在代码中显式地使用 <code>request.POST</code>，以保证数据只能通过 POST 调用改动。</p>
</li>
<li><p>如果在 <code>request.POST[&#39;choice&#39;]</code> 数据中没有提供 <code>choice</code> ， POST 将引发一个 <code>KeyError</code> 。</p>
<p>上面的代码检查 <code>KeyError</code>，如果没有给出 <code>choice</code> 将重新显示 Question 表单和一个错误信息。</p>
</li>
<li><p>在增加 Choice 的得票数之后，代码返回一个 <code>HttpResponseRedirect</code>而不是常用的 <code>HttpResponse</code>。</p>
<p><code>HttpResponseRedirect</code>只接收一个参数：用户将要被<strong>重定向</strong>的 URL。</p>
<p>（请继续看下去，我们将会解释如何构造这个例子中的 URL）</p>
<blockquote>
<p>正如上面的 Python 注释指出的，在成功处理 POST 数据后，你应该总是返回一个 <code>HttpResponseRedirect</code>。</p>
<p>这不是 Django 的特殊要求，这是那些优秀网站在开发实践中形成的共识。</p>
</blockquote>
</li>
<li><p>在这个例子中，我们在 <code>HttpResponseRedirect</code>的构造函数中使用 <code>reverse()</code> 函数。</p>
<p>这个函数避免了我们在视图函数中硬编码 URL。它需要我们给出我们想要跳转的视图的名字和该视图所对应的 URL 模式中需要给该视图提供的参数。 </p>
<p>在本例中，使用在 教程第 3 部分中设定的 URLconf， <code>reverse()</code> 调用将返回一个这样的字符串：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;/polls/3/results/&quot;</span></span><br></pre></td></tr></table></figure>

<p>其中 <code>3</code> 是 <code>question.id</code> 的值。重定向的 URL 将调用 <code>&#39;results&#39;</code> 视图来显示最终的页面。</p>
<blockquote>
<p>正如在 教程第 3 部分 中提到的，<code>HttpRequest</code> 是一个 <code>HttpRequest</code> 对象。</p>
<p>更多关于 <code>HttpRequest</code> 对象的内容，请参见 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/request-response/">请求和响应的文档</a> 。</p>
</blockquote>
</li>
</ul>
</blockquote>
</li>
<li><p>当有人对 Question 进行投票后，</p>
<p> <code>vote()</code> 视图将请求重定向到 Question 的结果界面。</p>
<p>让我们来编写这个视图：</p>
<p><code>polls/views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">results</span>(<span class="params">request, question_id</span>):</span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;polls/results.html&quot;</span>, &#123;<span class="string">&quot;question&quot;</span>: question&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这和 教程第 3 部分 中的 <code>detail()</code> 视图几乎一模一样。唯一的不同是模板的名字。 我们将在稍后解决这个冗余问题。</p>
</blockquote>
</li>
<li><p>现在，创建一个 <code>polls/results.html</code> 模板：</p>
<p><code>polls/templates/polls/results.html</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;&#123;&#123; question.question_text &#125;&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&#123;% <span class="keyword">for</span> choice <span class="keyword">in</span> question.choice_set.<span class="built_in">all</span> %&#125;</span><br><span class="line">    &lt;li&gt;&#123;&#123; choice.choice_text &#125;&#125; -- &#123;&#123; choice.votes &#125;&#125; vote&#123;&#123; choice.votes|pluralize &#125;&#125;&lt;/li&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href=<span class="string">&quot;&#123;% url &#x27;polls:detail&#x27; question.id %&#125;&quot;</span>&gt;Vote again?&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>现在，在你的浏览器中访问 <code>/polls/1/</code> 然后为 Question 投票。</p>
<p>你应该看到一个投票结果页面，并且在你每次投票之后都会更新。 </p>
<p>如果你提交时没有选择任何 Choice，你应该看到错误信息。</p>
<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511221043107.png" alt="image-20230511221043107" style="zoom:67%;" /> 

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511221102738.png" alt="image-20230511221102738" style="zoom:67%;" /> 

<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230511221121194.png" alt="image-20230511221121194" style="zoom: 67%;" /> 
</blockquote>
<ul>
<li><p>备注</p>
<p>我们的 <code>vote()</code> 视图代码有一个小问题。</p>
<p>代码首先从数据库中获取了 <code>selected_choice</code> 对象，接着计算 <code>vote</code> 的新值，最后把值存回数据库。</p>
<p>如果网站有两个方可同时投票在 <em>同一时间</em> ，可能会导致问题。同样的值，42，会被 <code>votes</code> 返回。然后，对于两个用户，新值43计算完毕，并被保存，但是期望值是44。</p>
<blockquote>
<p>这个问题被称为 <em>竞争条件</em> 。如果你对此有兴趣，你可以阅读 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/models/expressions/#avoiding-race-conditions-using-f">使用 F() 避免竞争条件</a> 来学习如何解决这个问题。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="4-2-使用通用视图：代码还是少点好"><a href="#4-2-使用通用视图：代码还是少点好" class="headerlink" title="4.2 使用通用视图：代码还是少点好"></a>4.2 使用通用视图：代码还是少点好</h3><ul>
<li><p><code>detail()</code> （在 教程第 3 部分 中）和 <code>results()</code> 视图都很精简 </p>
<p>并且，像上面提到的那样，存在冗余问题。用来显示一个投票列表的 <code>index()</code> 视图（也在 教程第 3 部分中）和它们类似。</p>
</li>
<li><p>这些视图反映基本的网络开发中的一个常见情况：</p>
<p>根据 URL 中的参数从数据库中获取数据、载入模板文件然后返回渲染后的模板。 </p>
</li>
<li><p>由于这种情况特别常见，Django 提供一种快捷方式，叫做 <strong>“通用视图” 系统</strong>。</p>
<p>通用视图将常见的模式抽象化，可以使你在编写应用时甚至不需要编写Python代码。</p>
<p>让我们将我们的投票应用转换成使用通用视图系统，这样我们可以删除许多我们的代码。我们仅仅需要做以下几步来完成转换，我们将：</p>
<ol>
<li>转换 URLconf。</li>
<li>删除一些旧的、不再需要的视图。</li>
<li>基于 Django 的通用视图引入新的视图。</li>
</ol>
<p>请继续阅读来了解详细信息。</p>
<blockquote>
<p>为什么要重构代码？</p>
<p>一般来说，当编写一个 Django 应用时，你应该先评估一下通用视图是否可以解决你的问题，你应该在一开始使用它，而不是进行到一半时重构代码。本教程目前为止是有意将重点放在以“艰难的方式”编写视图，这是为将重点放在核心概念上。</p>
<p>就像在使用计算器之前你需要掌握基础数学一样。</p>
</blockquote>
</li>
</ul>
<h3 id="4-3-改良-URLconf"><a href="#4-3-改良-URLconf" class="headerlink" title="4.3 改良 URLconf"></a>4.3 改良 URLconf</h3><ul>
<li><p>首先，打开 <code>polls/urls.py</code> 这个 URLconf 并将它修改成：</p>
<p><code>polls/urls.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">app_name = <span class="string">&quot;polls&quot;</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;&quot;</span>, views.IndexView.as_view(), name=<span class="string">&quot;index&quot;</span>),</span><br><span class="line">    path(<span class="string">&quot;&lt;int:pk&gt;/&quot;</span>, views.DetailView.as_view(), name=<span class="string">&quot;detail&quot;</span>),</span><br><span class="line">    path(<span class="string">&quot;&lt;int:pk&gt;/results/&quot;</span>, views.ResultsView.as_view(), name=<span class="string">&quot;results&quot;</span>),</span><br><span class="line">    path(<span class="string">&quot;&lt;int:question_id&gt;/vote/&quot;</span>, views.vote, name=<span class="string">&quot;vote&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，第二个和第三个匹配准则中，路径字符串中匹配模式的名称已经由 <code>&lt;question_id&gt;</code> 改为 <code>&lt;pk&gt;</code>。</p>
</blockquote>
</li>
</ul>
<h3 id="4-4-改良视图"><a href="#4-4-改良视图" class="headerlink" title="4.4 改良视图"></a>4.4 改良视图</h3><ul>
<li><p>下一步，我们将删除旧的 <code>index</code>, <code>detail</code>, 和 <code>results</code> 视图，并用 Django 的通用视图代替。</p>
<p>打开 <code>polls/views.py</code> 文件，</p>
<blockquote>
<p>原来是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Choice, Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    latest_question_list = Question.objects.order_by(<span class="string">&quot;-pub_date&quot;</span>)[:<span class="number">5</span>]</span><br><span class="line">    context = &#123;<span class="string">&quot;latest_question_list&quot;</span>: latest_question_list&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;polls/index.html&quot;</span>, context)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detail</span>(<span class="params">request, question_id</span>):</span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;polls/detail.html&quot;</span>, &#123;<span class="string">&quot;question&quot;</span>: question&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">results</span>(<span class="params">request, question_id</span>):</span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;polls/results.html&quot;</span>, &#123;<span class="string">&quot;question&quot;</span>: question&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vote</span>(<span class="params">request, question_id</span>):</span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        selected_choice = question.choice_set.get(pk=request.POST[<span class="string">&quot;choice&quot;</span>])</span><br><span class="line">    <span class="keyword">except</span> (KeyError, Choice.DoesNotExist):</span><br><span class="line">        <span class="comment"># Redisplay the question voting form.</span></span><br><span class="line">        <span class="keyword">return</span> render(</span><br><span class="line">            request,</span><br><span class="line">            <span class="string">&quot;polls/detail.html&quot;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;question&quot;</span>: question,</span><br><span class="line">                <span class="string">&quot;error_message&quot;</span>: <span class="string">&quot;You didn&#x27;t select a choice.&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        selected_choice.votes += <span class="number">1</span></span><br><span class="line">        selected_choice.save()</span><br><span class="line">        <span class="comment"># Always return an HttpResponseRedirect after successfully dealing</span></span><br><span class="line">        <span class="comment"># with POST data. This prevents data from being posted twice if a</span></span><br><span class="line">        <span class="comment"># user hits the Back button.</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">&quot;polls:results&quot;</span>, args=(question.<span class="built_in">id</span>,)))</span><br></pre></td></tr></table></figure>
</blockquote>
<p>并将它修改成：</p>
<p><code>polls/views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> generic</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Choice, Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IndexView</span>(generic.ListView):</span><br><span class="line">    template_name = <span class="string">&quot;polls/index.html&quot;</span></span><br><span class="line">    context_object_name = <span class="string">&quot;latest_question_list&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_queryset</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Return the last five published questions.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> Question.objects.order_by(<span class="string">&quot;-pub_date&quot;</span>)[:<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DetailView</span>(generic.DetailView):</span><br><span class="line">    model = Question</span><br><span class="line">    template_name = <span class="string">&quot;polls/detail.html&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ResultsView</span>(generic.DetailView):</span><br><span class="line">    model = Question</span><br><span class="line">    template_name = <span class="string">&quot;polls/results.html&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vote</span>(<span class="params">request, question_id</span>):</span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        selected_choice = question.choice_set.get(pk=request.POST[<span class="string">&quot;choice&quot;</span>])</span><br><span class="line">    <span class="keyword">except</span> (KeyError, Choice.DoesNotExist):</span><br><span class="line">        <span class="comment"># Redisplay the question voting form.</span></span><br><span class="line">        <span class="keyword">return</span> render(</span><br><span class="line">            request,</span><br><span class="line">            <span class="string">&quot;polls/detail.html&quot;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;question&quot;</span>: question,</span><br><span class="line">                <span class="string">&quot;error_message&quot;</span>: <span class="string">&quot;You didn&#x27;t select a choice.&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        selected_choice.votes += <span class="number">1</span></span><br><span class="line">        selected_choice.save()</span><br><span class="line">        <span class="comment"># Always return an HttpResponseRedirect after successfully dealing</span></span><br><span class="line">        <span class="comment"># with POST data. This prevents data from being posted twice if a</span></span><br><span class="line">        <span class="comment"># user hits the Back button.</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">&quot;polls:results&quot;</span>, args=(question.<span class="built_in">id</span>,)))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们在这里使用两个通用视图： <code>ListView</code>和 <code>DetailView</code>。</p>
<p>这两个视图分别抽象“<strong>显示一个对象列表</strong>”和“<strong>显示一个特定类型对象的详细信息页面</strong>”这两种概念。</p>
<ul>
<li>每个通用视图需要知道它将作用于哪个模型。 这由 <code>model</code> 属性提供。</li>
<li><code>DetailView</code>期望从 URL 中捕获名为 <code>&quot;pk&quot;</code> 的主键值，所以我们为通用视图把 <code>question_id</code> 改成 <code>pk</code> 。</li>
</ul>
<p>默认情况下，通用视图 <code>DetailView</code>使用一个叫做 <code>&lt;app name&gt;/&lt;model name&gt;_detail.html</code> 的模板。</p>
<p>在我们的例子中，它将使用 <code>&quot;polls/question_detail.html&quot;</code> 模板。</p>
<ul>
<li><p><code>template_name</code> 属性是用来告诉 Django 使用一个指定的模板名字，而不是自动生成的默认名字。 </p>
<p>我们也为 <code>results</code> 列表视图指定了 <code>template_name</code> —— 这确保 results 视图和 detail 视图在渲染时具有不同的外观，即使它们在后台都是同一个 <code>DetailView</code>。</p>
</li>
</ul>
<p>类似地，<code>ListView</code>使用一个叫做 <code>&lt;app name&gt;/&lt;model name&gt;_list.html</code> 的默认模板；</p>
<ul>
<li>我们使用 <code>template_name</code> 来告诉 <code>ListView</code>使用我们创建的已经存在的 <code>&quot;polls/index.html&quot;</code> 模板。</li>
</ul>
</li>
<li><p>在之前的教程中，提供模板文件时都带有一个包含 <code>question</code> 和 <code>latest_question_list</code> 变量的 context。</p>
<p>对于 <code>DetailView</code> ， <code>question</code> 变量会自动提供—— 因为我们使用 Django 的模型（Question）， Django 能够为 context 变量决定一个合适的名字。</p>
<p>然而对于 ListView， 自动生成的 context 变量是 <code>question_list</code>。为了覆盖这个行为，我们提供 <code>context_object_name</code> 属性，表示我们想使用 <code>latest_question_list</code>。</p>
<p>作为一种替换方案，你可以改变你的模板来匹配新的 context 变量 —— 这是一种更便捷的方法，告诉 Django 使用你想使用的变量名。</p>
</li>
<li><p>启动服务器，使用一下基于通用视图的新投票应用。</p>
<blockquote>
<p>效果与前面一样。</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>更多关于通用视图的详细信息，请查看 <a href="https://docs.djangoproject.com/zh-hans/4.2/topics/class-based-views/">通用视图的文档</a></p>
<p>当你对你所写的表单和通用视图感到满意后，请阅读 <a href="https://docs.djangoproject.com/zh-hans/4.2/intro/tutorial05/">教程的第 5 部分</a> 来了解如何测试我们的投票应用。</p>
</blockquote>
<h2 id="第-5-部分"><a href="#第-5-部分" class="headerlink" title="第 5 部分"></a>第 5 部分</h2><blockquote>
<p>本教程从 教程第 4 部分结束的地方开始。我们已经建立了一个网络投票应用程序，现在我们将为它创建一些自动化测试。</p>
</blockquote>
<h3 id="5-1-自动化测试简介"><a href="#5-1-自动化测试简介" class="headerlink" title="5.1 自动化测试简介"></a>5.1 自动化测试简介</h3><h4 id="自动化测试是什么？"><a href="#自动化测试是什么？" class="headerlink" title="自动化测试是什么？"></a>自动化测试是什么？</h4><ul>
<li><p>测试代码，是用来检查你的代码能否正常运行的程序。</p>
</li>
<li><p>测试在不同的层次中都存在。有些测试只关注某个很小的细节（某个模型的某个方法的返回值是否满足预期？），而另一些测试可能检查对某个软件的一系列操作（<em>某一用户输入序列是否造成了预期的结果？</em>）。其实这和我们在 教程第 2 部分，里做的并没有什么不同，我们使用 <code>shell</code>来测试某一方法的功能，或者运行某个应用并输入数据来检查它的行为。</p>
</li>
<li><p>真正不同的地方在于，<em>自动化</em> 测试是由某个系统帮你自动完成的。当你创建好了一系列测试，每次修改应用代码后，就可以自动检查出修改后的代码是否还像你曾经预期的那样正常工作。你不需要花费大量时间来进行手动测试。</p>
</li>
</ul>
<h4 id="为什么你需要写测试"><a href="#为什么你需要写测试" class="headerlink" title="为什么你需要写测试"></a>为什么你需要写测试</h4><ul>
<li><p>但是，为什么需要测试呢？又为什么是现在呢？</p>
</li>
<li><p>你可能觉得学 Python&#x2F;Django 对你来说已经很满足了，再学一些新东西的话看起来有点负担过重并且没什么必要。毕竟，我们的投票应用看起来已经完美工作了。写一些自动测试并不能让它工作的更好。如果写一个投票应用是你想用 Django 完成的唯一工作，那你确实没必要学写测试。但是如果你还想写更复杂的项目，现在就是学习测试写法的最好时机了。</p>
</li>
<li><p>测试将节约你的时间</p>
<blockquote>
<p>在某种程度上，能够「判断出代码是否正常工作」的测试，就称得上是个令人满意的了。在更复杂的应用程序中，组件之间可能会有数十个复杂的交互。</p>
<p>对其中某一组件的改变，也有可能会造成意想不到的结果。判断「代码是否正常工作」意味着你需要用大量的数据来完整的测试全部代码的功能，以确保你的小修改没有对应用整体造成破坏——这太费时间了。</p>
<p>尤其是当你发现自动化测试能在几秒钟之内帮你完成这件事时，就更会觉得手动测试实在是太浪费时间了。当某人写出错误的代码时，自动化测试还能帮助你定位错误代码的位置。</p>
<p>有时候你会觉得，和富有创造性和生产力的业务代码比起来，编写枯燥的测试代码实在是太无聊了，特别是当你知道你的代码完全没有问题的时候。</p>
<p>然而，编写测试还是要比花费几个小时手动测试你的应用，或者为了找到某个小错误而胡乱翻看代码要有意义的多。</p>
</blockquote>
</li>
<li><p>测试不仅能发现错误，而且能预防错误</p>
<blockquote>
<p>「测试是开发的对立面」，这种思想是不对的。</p>
<p>如果没有测试，整个应用的行为意图会变得更加的不清晰。甚至当你在看自己写的代码时也是这样，有时候你需要仔细研读一段代码才能搞清楚它有什么用。</p>
<p>而测试的出现改变了这种情况。测试就好像是从内部仔细检查你的代码，当有些地方出错时，这些地方将会变得很显眼——<em>就算你自己没有意识到那里写错了</em>。</p>
</blockquote>
</li>
<li><p>测试使你的代码更有吸引力</p>
<blockquote>
<p>你也许遇到过这种情况：你编写了一个绝赞的软件，但是其他开发者看都不看它一眼，因为它缺少测试。没有测试的代码不值得信任。 Django 最初开发者之一的 Jacob Kaplan-Moss 说过：“项目规划时没有包含测试是不科学的。”</p>
<p>其他的开发者希望在正式使用你的代码前看到它通过了测试，这是你需要写测试的另一个重要原因。</p>
</blockquote>
</li>
<li><p>测试有利于团队协作</p>
<blockquote>
<p>前面的几点都是从单人开发的角度来说的。复杂的应用可能由团队维护。测试的存在保证了协作者不会不小心破坏了了你的代码（也保证你不会不小心弄坏他们的）。如果你想作为一个 Django 程序员谋生的话，你必须擅长编写测试！</p>
</blockquote>
</li>
</ul>
<h3 id="5-2-基础测试策略"><a href="#5-2-基础测试策略" class="headerlink" title="5.2 基础测试策略"></a>5.2 基础测试策略</h3><ul>
<li><p>有好几种不同的方法可以写测试。</p>
<p>一些开发者遵循 “<a href="https://en.wikipedia.org/wiki/Test-driven_development">测试驱动</a>“ 的开发原则，他们在写代码之前先写测试。这种方法看起来有点反直觉，但事实上，这和大多数人日常的做法是相吻合的。我们会先描述一个问题，然后写代码来解决它。「测试驱动」的开发方法只是将问题的描述抽象为了 Python 的测试样例。</p>
</li>
<li><p>更普遍的情况是，一个刚接触自动化测试的新手更倾向于先写代码，然后再写测试。虽然提前写测试可能更好，但是晚点写起码也比没有强。</p>
<p>有时候很难决定从哪里开始下手写测试。如果你才写了几千行 Python 代码，选择从哪里开始写测试确实不怎么简单。如果是这种情况，那么在你下次修改代码（比如加新功能，或者修复 Bug）之前写个测试是比较合理且有效的。</p>
</li>
<li><p>所以，我们现在就开始写吧。</p>
</li>
</ul>
<h3 id="5-3-开始写我们的第一个测试"><a href="#5-3-开始写我们的第一个测试" class="headerlink" title="5.3 开始写我们的第一个测试"></a>5.3 开始写我们的第一个测试</h3><h4 id="首先得有个-Bug"><a href="#首先得有个-Bug" class="headerlink" title="首先得有个 Bug"></a>首先得有个 Bug</h4><ul>
<li><p>幸运的是，我们的 <code>polls</code> 应用现在就有一个小 bug 需要被修复：</p>
<p>我们的要求是如果 Question 是在一天之内发布的， <code>Question.was_published_recently()</code> 方法将会返回 <code>True</code> ，</p>
<p>然而现在这个方法在 <code>Question</code> 的 <code>pub_date</code> 字段比当前时间还晚时也会返回 True（这是个 Bug）。</p>
</li>
<li><p>用djadmin:<code>shell</code>命令确认一下这个方法的日期bug</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; py manage.py shell</span><br></pre></td></tr></table></figure>

<blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; import datetime</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from django.utils import timezone</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from polls.models import Question</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment"># create a Question instance with pub_date 30 days in the future</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; future_question = Question(pub_date=timezone.now() + datetime.timedelta(days=30))</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment"># was it published recently?</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; future_question.was_published_recently()</span></span><br><span class="line">True</span><br></pre></td></tr></table></figure>

<p>因为将来发生的是肯定不是最近发生的，所以代码明显是错误的。</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512085658552.png" alt="image-20230512085658552" style="zoom:50%;" /></blockquote>
</li>
</ul>
<h4 id="创建一个测试来暴露这个-bug"><a href="#创建一个测试来暴露这个-bug" class="headerlink" title="创建一个测试来暴露这个 bug"></a>创建一个测试来暴露这个 bug</h4><ul>
<li><p>我们刚刚在 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/django-admin/#django-admin-shell"><code>shell</code></a> 里做的测试也就是自动化测试应该做的工作。所以我们来把它改写成自动化的吧。</p>
</li>
<li><p>按照惯例，Django 应用的测试应该写在应用的 <code>tests.py</code> 文件里。测试系统会自动的在所有以 <code>tests</code> 开头的文件里寻找并执行测试代码。</p>
<p>将下面的代码写入 <code>polls</code> 应用里的 <code>tests.py</code> 文件内：</p>
<p><code>polls/tests.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.test <span class="keyword">import</span> TestCase</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QuestionModelTests</span>(<span class="title class_ inherited__">TestCase</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_was_published_recently_with_future_question</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        was_published_recently() returns False for questions whose pub_date</span></span><br><span class="line"><span class="string">        is in the future.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        time = timezone.now() + datetime.timedelta(days=<span class="number">30</span>)</span><br><span class="line">        future_question = Question(pub_date=time)</span><br><span class="line">        self.assertIs(future_question.was_published_recently(), <span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>我们创建了一个 <code>django.test.TestCase</code>的子类，并添加了一个方法，此方法创建一个 <code>pub_date</code> 时未来某天的 <code>Question</code> 实例。然后检查它的 <code>was_published_recently()</code> 方法的返回值——它 <em>应该</em> 是 False。</p>
</blockquote>
</li>
</ul>
<h4 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h4><ul>
<li><p>在终端中，我们通过输入以下代码运行测试:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; py manage.py test polls</span><br></pre></td></tr></table></figure>

<p>测试情况：</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512090624341.png" alt="image-20230512090624341" style="zoom:50%;" /> 

<blockquote>
<p>不一样的错误？</p>
<p>若在此处你得到了一个 <code>NameError</code> 错误，你可能漏了 第二步 中将 <code>datetime</code> 和 <code>timezone</code> 导入 <code>polls/model.py</code> 的步骤。复制这些语句，然后试着重新运行测试。</p>
</blockquote>
<blockquote>
<p>发生了什么呢？以下是自动化测试的运行过程：</p>
<ul>
<li><code>python manage.py test polls</code> 将会寻找 <code>polls</code> 应用里的测试代码</li>
<li>它找到了 <code>django.test.TestCase</code> 的一个子类</li>
<li>它创建一个特殊的数据库供测试使用</li>
<li>它在类中寻找测试方法——以 <code>test</code> 开头的方法。</li>
<li>在 <code>test_was_published_recently_with_future_question</code> 方法中，它创建了一个 <code>pub_date</code> 值为 30 天后的 <code>Question</code> 实例。</li>
<li>接着使用 <code>assertls()</code> 方法，发现 <code>was_published_recently()</code> 返回了 <code>True</code>，而我们期望它返回 <code>False</code>。</li>
</ul>
<p>测试系统通知我们哪些测试样例失败了，和造成测试失败的代码所在的行号。</p>
</blockquote>
</li>
</ul>
<h4 id="修复这个-bug"><a href="#修复这个-bug" class="headerlink" title="修复这个 bug"></a>修复这个 bug</h4><ul>
<li><p>我们早已知道，当 <code>pub_date</code> 为未来某天时， <code>Question.was_published_recently()</code> 应该返回 <code>False</code>。</p>
<p>我们修改 <code>models.py</code> 里的方法，让它只在日期是过去式的时候才返回 <code>True</code>：</p>
<p><code>polls/models.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">was_published_recently</span>(<span class="params">self</span>):</span><br><span class="line">    now = timezone.now()</span><br><span class="line">    <span class="keyword">return</span> now - datetime.timedelta(days=<span class="number">1</span>) &lt;= self.pub_date &lt;= now</span><br></pre></td></tr></table></figure>

<blockquote>
<p>原来是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">was_published_recently</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.pub_date &gt;= timezone.now() - datetime.timedelta(days=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>再次测试：</p>
<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512091346086.png" alt="image-20230512091346086" style="zoom:67%;" /> 
</blockquote>
<p>发现 bug 后，我们编写了能够暴露这个 bug 的自动化测试。在修复 bug 之后，我们的代码顺利的通过了测试。</p>
<p>将来，我们的应用可能会出现其他的问题，但是我们可以肯定的是，一定不会再次出现这个 bug，因为只要运行一遍测试，就会立刻收到警告。我们可以认为应用的这一小部分代码永远是安全的。</p>
</li>
</ul>
<h4 id="更全面的测试"><a href="#更全面的测试" class="headerlink" title="更全面的测试"></a>更全面的测试</h4><ul>
<li><p>我们已经搞定一小部分了，现在可以考虑全面的测试 <code>was_published_recently()</code> 这个方法以确定它的安全性，然后就可以把这个方法稳定下来了。事实上，在修复一个 bug 时不小心引入另一个 bug 会是非常令人尴尬的。</p>
<p>我们在上次写的类里再增加两个测试，来更全面的测试这个方法：</p>
<p><code>polls/test.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_was_published_recently_with_old_question</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    was_published_recently() returns False for questions whose pub_date</span></span><br><span class="line"><span class="string">    is older than 1 day.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    time = timezone.now() - datetime.timedelta(days=<span class="number">1</span>, seconds=<span class="number">1</span>)</span><br><span class="line">    old_question = Question(pub_date=time)</span><br><span class="line">    self.assertIs(old_question.was_published_recently(), <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_was_published_recently_with_recent_question</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    was_published_recently() returns True for questions whose pub_date</span></span><br><span class="line"><span class="string">    is within the last day.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    time = timezone.now() - datetime.timedelta(hours=<span class="number">23</span>, minutes=<span class="number">59</span>, seconds=<span class="number">59</span>)</span><br><span class="line">    recent_question = Question(pub_date=time)</span><br><span class="line">    self.assertIs(recent_question.was_published_recently(), <span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>现在，我们有三个测试来确保 <code>Question.was_published_recently()</code> 方法对于过去，最近，和将来的三种情况都返回正确的值。</p>
<p>再次申明，尽管 <code>polls</code> 现在是个小型的应用，但是无论它以后变得到多么复杂，无论他和其他代码如何交互，我们可以在一定程度上保证我们为之编写测试的方法将按照预期的方式运行。</p>
<blockquote>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512091837995.png" alt="image-20230512091837995" style="zoom:67%;" /></blockquote>
</li>
</ul>
<h3 id="5-4-测试视图"><a href="#5-4-测试视图" class="headerlink" title="5.4 测试视图"></a>5.4 测试视图</h3><blockquote>
<p>我们的投票应用对所有问题都一视同仁：它将会发布所有的问题，也包括那些 <code>pub_date</code> 字段值是未来的问题。</p>
<p>我们应该改善这一点。如果 <code>pub_date</code> 设置为未来某天，这应该被解释为这个问题将在所填写的时间点才被发布，而在之前是不可见的。</p>
</blockquote>
<h4 id="针对视图的测试"><a href="#针对视图的测试" class="headerlink" title="针对视图的测试"></a>针对视图的测试</h4><ul>
<li><p>为了修复上述 bug ，我们这次先编写测试，然后再去改代码。事实上，这是一个「测试驱动」开发模式的实例，但其实这两者的顺序不太重要。</p>
</li>
<li><p>在我们的第一个测试中，我们关注代码的内部行为。我们通过模拟用户使用浏览器访问被测试的应用来检查代码行为是否符合预期。</p>
<p>在我们动手之前，先看看需要用到的工具们。</p>
</li>
</ul>
<h4 id="Django-测试工具之-Client"><a href="#Django-测试工具之-Client" class="headerlink" title="Django 测试工具之 Client"></a>Django 测试工具之 Client</h4><ul>
<li><p>Django 提供了一个供测试使用的 <code>Client</code> 来模拟用户和视图层代码的交互。我们能在 <code>tests.py</code> 甚至是 <code>shell</code>中使用它。</p>
<p>我们依照惯例从 <code>shell</code> 开始，首先我们要做一些在 <code>tests.py</code> 里不是必须的准备工作。</p>
<ul>
<li><p>第一步是在 <code>shell</code>中配置测试环境:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...\&gt; py manage.py shell</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from django.test.utils import setup_test_environment</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; setup_test_environment()</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>setup_test_environment()</code>安装了一个模板渲染器，</p>
<p>这将使我们能够检查响应上的一些额外属性，如 <code>response.context</code>，否则将无法使用此功能。</p>
<p>请注意，这个方法 <em>不会</em> 建立一个测试数据库，所以下面的内容将针对现有的数据库运行，输出结果可能略有不同，这取决于你已经创建了哪些问题。如果你在 <code>settings.py</code> 中的 <code>TIME_ZONE</code> 不正确，你可能会得到意外的结果。如果你不记得之前的配置，请在继续之前检查。</p>
</blockquote>
<p>准备：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from django.test import Client</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment"># create an instance of the client for our use</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; client = Client()</span></span><br></pre></td></tr></table></figure>

<p>让client 开始工作：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment"># get a response from &#x27;/&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; response = client.get(<span class="string">&quot;/&quot;</span>)</span></span><br><span class="line">Not Found: /</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment"># we should expect a 404 from that address; if you instead see an</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment"># &quot;Invalid HTTP_HOST header&quot; error and a 400 response, you probably</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment"># omitted the setup_test_environment() call described earlier.</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; response.status_code</span></span><br><span class="line">404</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment"># on the other hand we should expect to find something at &#x27;/polls/&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment"># we&#x27;ll use &#x27;reverse()&#x27; rather than a hardcoded URL</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from django.urls import reverse</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; response = client.get(reverse(<span class="string">&quot;polls:index&quot;</span>))</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; response.status_code</span></span><br><span class="line">200</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; response.content</span></span><br><span class="line">b&#x27;\n    &lt;ul&gt;\n    \n        &lt;li&gt;&lt;a href=&quot;/polls/1/&quot;&gt;What&amp;#x27;s up?&lt;/a&gt;&lt;/li&gt;\n    \n    &lt;/ul&gt;\n\n&#x27;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; response.context[<span class="string">&quot;latest_question_list&quot;</span>]</span></span><br><span class="line">&lt;QuerySet [&lt;Question: What&#x27;s up?&gt;]&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>我的测试效果：</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512093201305.png" alt="image-20230512093201305" style="zoom: 67%;" /></blockquote>
</li>
</ul>
</li>
</ul>
<h4 id="改善视图代码"><a href="#改善视图代码" class="headerlink" title="改善视图代码"></a>改善视图代码</h4><ul>
<li><p>现在的投票列表会显示将来的投票（ <code>pub_date</code> 值是未来的某天)。我们来修复这个问题。</p>
<p>在 教程的第 4 部分里，我们介绍了基于 <code>ListView</code> 的视图类：</p>
<p><code>polls/views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">IndexView</span>(generic.ListView):</span><br><span class="line">    template_name = <span class="string">&quot;polls/index.html&quot;</span></span><br><span class="line">    context_object_name = <span class="string">&quot;latest_question_list&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_queryset</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Return the last five published questions.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> Question.objects.order_by(<span class="string">&quot;-pub_date&quot;</span>)[:<span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<p>我们需要改进 <code>get_queryset()</code> 方法，让他它能通过将 Question 的 pub_data 属性与 <code>timezone.now()</code> 相比较来判断是否应该显示此 Question。首先我们需要一行 import 语句，然后我们把 <code>get_queryset</code> 方法改写成下面这样：</p>
<p><code>polls/views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_queryset</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Return the last five published questions (not including those set to be</span></span><br><span class="line"><span class="string">    published in the future).</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> Question.objects.<span class="built_in">filter</span>(pub_date__lte=timezone.now()).order_by(<span class="string">&quot;-pub_date&quot;</span>)[:<span class="number">5</span>]</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="测试新视图"><a href="#测试新视图" class="headerlink" title="测试新视图"></a>测试新视图</h4><ul>
<li><p>启动服务器、在浏览器中载入站点、创建一些发布时间在过去和将来的 <code>Questions</code> ，然后检验只有已经发布的 <code>Questions</code> 会展示出来，现在你可以对自己感到满意了。<em>你不想每次修改可能与这相关的代码时都重复这样做</em> —— 所以让我们基于以上 <a href="https://docs.djangoproject.com/zh-hans/4.2/ref/django-admin/#django-admin-shell"><code>shell</code></a> 会话中的内容，再编写一个测试。</p>
<p>将下面的代码添加到 <code>polls/tests.py</code> ：（我们写一个公用的快捷函数用于创建投票问题，再为视图创建一个测试类：）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_question</span>(<span class="params">question_text, days</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Create a question with the given `question_text` and published the</span></span><br><span class="line"><span class="string">    given number of `days` offset to now (negative for questions published</span></span><br><span class="line"><span class="string">    in the past, positive for questions that have yet to be published).</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    time = timezone.now() + datetime.timedelta(days=days)</span><br><span class="line">    <span class="keyword">return</span> Question.objects.create(question_text=question_text, pub_date=time)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QuestionIndexViewTests</span>(<span class="title class_ inherited__">TestCase</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_no_questions</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        If no questions exist, an appropriate message is displayed.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        response = self.client.get(reverse(<span class="string">&quot;polls:index&quot;</span>))</span><br><span class="line">        self.assertEqual(response.status_code, <span class="number">200</span>)</span><br><span class="line">        self.assertContains(response, <span class="string">&quot;No polls are available.&quot;</span>)</span><br><span class="line">        self.assertQuerySetEqual(response.context[<span class="string">&quot;latest_question_list&quot;</span>], [])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_past_question</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Questions with a pub_date in the past are displayed on the</span></span><br><span class="line"><span class="string">        index page.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        question = create_question(question_text=<span class="string">&quot;Past question.&quot;</span>, days=-<span class="number">30</span>)</span><br><span class="line">        response = self.client.get(reverse(<span class="string">&quot;polls:index&quot;</span>))</span><br><span class="line">        self.assertQuerySetEqual(</span><br><span class="line">            response.context[<span class="string">&quot;latest_question_list&quot;</span>],</span><br><span class="line">            [question],</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_future_question</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Questions with a pub_date in the future aren&#x27;t displayed on</span></span><br><span class="line"><span class="string">        the index page.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        create_question(question_text=<span class="string">&quot;Future question.&quot;</span>, days=<span class="number">30</span>)</span><br><span class="line">        response = self.client.get(reverse(<span class="string">&quot;polls:index&quot;</span>))</span><br><span class="line">        self.assertContains(response, <span class="string">&quot;No polls are available.&quot;</span>)</span><br><span class="line">        self.assertQuerySetEqual(response.context[<span class="string">&quot;latest_question_list&quot;</span>], [])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_future_question_and_past_question</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Even if both past and future questions exist, only past questions</span></span><br><span class="line"><span class="string">        are displayed.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        question = create_question(question_text=<span class="string">&quot;Past question.&quot;</span>, days=-<span class="number">30</span>)</span><br><span class="line">        create_question(question_text=<span class="string">&quot;Future question.&quot;</span>, days=<span class="number">30</span>)</span><br><span class="line">        response = self.client.get(reverse(<span class="string">&quot;polls:index&quot;</span>))</span><br><span class="line">        self.assertQuerySetEqual(</span><br><span class="line">            response.context[<span class="string">&quot;latest_question_list&quot;</span>],</span><br><span class="line">            [question],</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_two_past_questions</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        The questions index page may display multiple questions.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        question1 = create_question(question_text=<span class="string">&quot;Past question 1.&quot;</span>, days=-<span class="number">30</span>)</span><br><span class="line">        question2 = create_question(question_text=<span class="string">&quot;Past question 2.&quot;</span>, days=-<span class="number">5</span>)</span><br><span class="line">        response = self.client.get(reverse(<span class="string">&quot;polls:index&quot;</span>))</span><br><span class="line">        self.assertQuerySetEqual(</span><br><span class="line">            response.context[<span class="string">&quot;latest_question_list&quot;</span>],</span><br><span class="line">            [question2, question1],</span><br><span class="line">        )</span><br></pre></td></tr></table></figure>

<blockquote>
<p>让我们更详细地看下以上这些内容。</p>
<p>首先是一个快捷函数 <code>create_question</code>，它封装了创建投票的流程，减少了重复代码。</p>
<p>在 <code>test_past_question</code> 方法中，我们创建了一个投票并检查它是否出现在列表中。</p>
<p>在 <code>test_future_question</code> 中，我们创建 <code>pub_date</code> 在未来某天的投票。数据库会在每次调用测试方法前被重置，所以第一个投票已经没了，所以主页中应该没有任何投票。</p>
<p>剩下的那些也都差不多。实际上，测试就是假装一些管理员的输入，然后通过用户端的表现是否符合预期来判断新加入的改变是否破坏了原有的系统状态。</p>
</blockquote>
</li>
</ul>
<h4 id="测试-DetailView"><a href="#测试-DetailView" class="headerlink" title="测试 DetailView"></a>测试 <code>DetailView</code></h4><ul>
<li><p>我们的工作似乎已经很完美了？不，还有一个问题：就算在发布日期时未来的那些投票不会在目录页 <em>index</em> 里出现，但是如果用户知道或者猜到正确的 URL ，还是可以访问到它们。所以我们得在 <code>DetailView</code> 里增加一些约束：</p>
<p><code>polls/views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DetailView</span>(generic.DetailView):</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_queryset</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Excludes any questions that aren&#x27;t published yet.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> Question.objects.<span class="built_in">filter</span>(pub_date__lte=timezone.now())</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后，我们应该增加一些测试来检验 <code>pub_date</code> 在过去的 <code>Question</code> 能够被显示出来，而 <code>pub_date</code> 在未来的则不可以：</p>
<p><code>polls/test.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">QuestionDetailViewTests</span>(<span class="title class_ inherited__">TestCase</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_future_question</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        The detail view of a question with a pub_date in the future</span></span><br><span class="line"><span class="string">        returns a 404 not found.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        future_question = create_question(question_text=<span class="string">&quot;Future question.&quot;</span>, days=<span class="number">5</span>)</span><br><span class="line">        url = reverse(<span class="string">&quot;polls:detail&quot;</span>, args=(future_question.<span class="built_in">id</span>,))</span><br><span class="line">        response = self.client.get(url)</span><br><span class="line">        self.assertEqual(response.status_code, <span class="number">404</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_past_question</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        The detail view of a question with a pub_date in the past</span></span><br><span class="line"><span class="string">        displays the question&#x27;s text.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        past_question = create_question(question_text=<span class="string">&quot;Past Question.&quot;</span>, days=-<span class="number">5</span>)</span><br><span class="line">        url = reverse(<span class="string">&quot;polls:detail&quot;</span>, args=(past_question.<span class="built_in">id</span>,))</span><br><span class="line">        response = self.client.get(url)</span><br><span class="line">        self.assertContains(response, past_question.question_text)</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<blockquote>
<p>我的测试结果：</p>
<img src="https://cdn.jsdelivr.net/gh/Seymour0314/PicGo/img/image-20230512095545574.png" alt="image-20230512095545574" style="zoom:80%;" /></blockquote>
</li>
</ul>
<h4 id="更多的测试思路"><a href="#更多的测试思路" class="headerlink" title="更多的测试思路"></a>更多的测试思路</h4><ul>
<li><p>我们应该给 <code>ResultsView</code> 也增加一个类似的 <code>get_queryset</code> 方法，并且为它创建测试。这和我们之前干的差不多，事实上，基本就是重复一遍。</p>
</li>
<li><p>我们还可以从各个方面改进投票应用，但是测试会一直伴随我们。比方说，在目录页上显示一个没有选项 <code>Choices</code> 的投票问题就没什么意义。我们可以检查并排除这样的投票题。测试可以创建一个没有选项的投票，然后检查它是否被显示在目录上。当然也要创建一个有选项的投票，然后确认它确实被显示了。</p>
<p>恩，也许你想让管理员能在目录上看见未被发布的那些投票，但是普通用户看不到。不管怎么说，如果你想要增加一个新功能，那么同时一定要为它编写测试。不过你是先写代码还是先写测试那就随你了。</p>
</li>
<li><p>在未来的某个时刻，你一定会去查看测试代码，然后开始怀疑：「这么多的测试不会使代码越来越复杂吗？」。别着急，我们马上就会谈到这一点。</p>
</li>
</ul>
<h3 id="5-5-当需要测试的时候，测试用例越多越好"><a href="#5-5-当需要测试的时候，测试用例越多越好" class="headerlink" title="5.5 当需要测试的时候，测试用例越多越好"></a>5.5 当需要测试的时候，测试用例越多越好</h3><ul>
<li><p>貌似我们的测试多的快要失去控制了。按照这样发展下去，测试代码就要变得比应用的实际代码还要多了。而且测试代码大多都是重复且不优雅的，特别是在和业务代码比起来的时候，这种感觉更加明显。</p>
<p><strong>但是这没关系！</strong> 就让测试代码继续肆意增长吧。大部分情况下，你写完一个测试之后就可以忘掉它了。在你继续开发的过程中，它会一直默默无闻地为你做贡献的。</p>
</li>
<li><p>但有时测试也需要更新。想象一下如果我们修改了视图，只显示有选项的那些投票，那么只前写的很多测试就都会失败。<em>但这也明确地告诉了我们哪些测试需要被更新</em>，所以测试也会测试自己。</p>
<p>最坏的情况是，当你继续开发的时候，发现之前的一些测试现在看来是多余的。但是这也不是什么问题，多做些测试也 <em>不错</em>。</p>
<p>如果你对测试有个整体规划，那么它们就几乎不会变得混乱。下面有几条好的建议：</p>
<ul>
<li>对于每个模型和视图都建立单独的 <code>TestClass</code></li>
<li>每个测试方法只测试一个功能</li>
<li>给每个测试方法起个能描述其功能的名字</li>
</ul>
</li>
</ul>
<h3 id="5-6-深入代码测试"><a href="#5-6-深入代码测试" class="headerlink" title="5.6 深入代码测试"></a>5.6 深入代码测试</h3><ul>
<li><p>在本教程中，我们仅仅是了解了测试的基础知识。你能做的还有很多，而且世界上有很多有用的工具来帮你完成这些有意义的事。</p>
<p>举个例子，在上述的测试中，我们已经从代码逻辑和视图响应的角度检查了应用的输出，现在你可以从一个更加 “in-browser” 的角度来检查最终渲染出的 HTML 是否符合预期，使用 Selenium 可以很轻松的完成这件事。这个工具不仅可以测试 Django 框架里的代码，还可以检查其他部分，比如说你的 JavaScript。它假装成是一个正在和你站点进行交互的浏览器，就好像有个真人在访问网站一样！Django 它提供了 <code>LiveServerTestCase</code> 来和 Selenium 这样的工具进行交互。</p>
</li>
<li><p>如果你在开发一个很复杂的应用的话，</p>
<p>你也许想在每次提交代码时自动运行测试，也就是我们所说的持续集成 continuous integration，</p>
<p>这样就能实现质量控制的自动化，起码是部分自动化。</p>
</li>
<li><p>一个找出代码中未被测试部分的方法是检查代码覆盖率。它有助于找出代码中的薄弱部分和无用部分。如果你无法测试一段代码，通常说明这段代码需要被重构或者删除。想知道代码覆盖率和无用代码的详细信息，查看文档 <a href="https://docs.djangoproject.com/zh-hans/4.2/topics/testing/advanced/#topics-testing-code-coverage">集成 coverage.py</a> 获取详细信息。</p>
</li>
</ul>
<blockquote>
<p>文档 <a href="https://docs.djangoproject.com/zh-hans/4.2/topics/testing/">Django 中的测试</a> 里有关于测试的更多信息。</p>
</blockquote>
<h3 id="5-7-接下来要做什么？"><a href="#5-7-接下来要做什么？" class="headerlink" title="5.7 接下来要做什么？"></a>5.7 接下来要做什么？</h3><blockquote>
<p>如果你想深入了解测试，就去看 <a href="https://docs.djangoproject.com/zh-hans/4.2/topics/testing/">Django 中的测试</a> 。</p>
<p>当你已经比较熟悉测试 Django 视图的方法后，就可以继续阅读 教程第 6 部分 ，学习静态文件管理的相关知识。</p>
</blockquote>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
</search>
